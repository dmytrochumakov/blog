[{"content":"The problem Design a time-based key-value data structure that can store multiple values for the same key at different timestamps and retrieve the key\u0026rsquo;s value at a certain timestamp.\nImplement the TimeMap class:\nTimeMap() Initializes the object of the data structure. void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp. String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev \u0026lt;= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \u0026quot;\u0026quot;. Examples Input [\u0026#34;TimeMap\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;] [[], [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 3], [\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 5]] Output [null, null, \u0026#34;bar\u0026#34;, \u0026#34;bar\u0026#34;, null, \u0026#34;bar2\u0026#34;, \u0026#34;bar2\u0026#34;] Explanation TimeMap timeMap = new TimeMap(); timeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1); // store the key \u0026#34;foo\u0026#34; and value \u0026#34;bar\u0026#34; along with timestamp = 1. timeMap.get(\u0026#34;foo\u0026#34;, 1); // return \u0026#34;bar\u0026#34; timeMap.get(\u0026#34;foo\u0026#34;, 3); // return \u0026#34;bar\u0026#34;, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \u0026#34;bar\u0026#34;. timeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4); // store the key \u0026#34;foo\u0026#34; and value \u0026#34;bar2\u0026#34; along with timestamp = 4. timeMap.get(\u0026#34;foo\u0026#34;, 4); // return \u0026#34;bar2\u0026#34; timeMap.get(\u0026#34;foo\u0026#34;, 5); // return \u0026#34;bar2\u0026#34; Constraints 1 \u0026lt;= key.length, value.length \u0026lt;= 100 key and value consist of lowercase English letters and digits. 1 \u0026lt;= timestamp \u0026lt;= 10^7 All the timestamps of set are strictly increasing. At most 2 * 10^5 calls will be made to set and get. Explanation Our objective for this task is to design a key-value store. We are going to have a key, and a list of values associated with that key, and each value is going to have a timestamp associated with it. As for operations, we are going to support only set and get operations. Now, let\u0026rsquo;s look at our example we are going to set, foo as our key, and [bar, 1] as our value next, we are going to get value by key = “foo” and timestamp = 1, so we will be returning value \u0026quot;bar\u0026quot; We will be solving this problem by using a hashmap. Our key will be our actual key that is given to us as an input, and our value will be a list of pairs (value, timestamp). To find our result we will be iterating over the list of pair values. Let\u0026rsquo;s move to our second get operation\nwe are given key = \u0026quot;foo\u0026quot;, and timestamp = 3, so we are going to go to the same list as we did before. You can see that we don\u0026rsquo;t have a value with timestamp = 3, but we are not going to return nil, because of how this problem is defined. The problem does not want to find an exact match; instead, we need to find and return the most recent one. By recent, they mean the closest result (timestamp_prev \u0026lt;= timestamp).\nNext, we will continue doing the same steps as we did above until we complete all of our operations. The set operation will always take O(1) time, but for the get operation we can do it in multiple ways and with different time complexity.\nBrute Force Solution class TimeMap { private var store: [String: [(String, Int)]] init() { self.store = [:] } func set(_ key: String, _ value: String, _ timestamp: Int) { if self.store[key] == nil { self.store[key] = [] } self.store[key]!.append((value, timestamp)) } func get(_ key: String, _ timestamp: Int) -\u0026gt; String { var res = \u0026#34;\u0026#34; let values = self.store[key] ?? [] for value in values { if value.1 \u0026lt;= timestamp { res = value.0 } } return res } } Explanation One way to solve this problem is to just iterate over the list of all pairs and find the closest one. This solution will take O(n), but we know that we are searching for values, so we can use binary search that will take O(logn) time.\nTime/Space complexity Time complexity: O(1) for set operation, O(n) for get operation Space complexity: O(m*n) where n is the total number of unique timestamps associated with a key, and m is the total number of keys Binary Search Solution class TimeMap { private var store: [String: [(String, Int)]] init() { self.store = [:] } func set(_ key: String, _ value: String, _ timestamp: Int) { if self.store[key] == nil { self.store[key] = [] } self.store[key]!.append((value, timestamp)) } func get(_ key: String, _ timestamp: Int) -\u0026gt; String { var res = \u0026#34;\u0026#34; let values = self.store[key] ?? [] var l = 0 var r = values.count - 1 while l \u0026lt;= r { let m = (l + r) / 2 if values[m].1 \u0026lt;= timestamp { res = values[m].0 l = m + 1 } else { r = m - 1 } } return res } } Explanation A more optimal way to solve this problem is to use binary search. We can use it without additional sorting because in the constraints section they mention that All timestamps of set operation are strictly increasing, so we do not need to sort it.\nTime/Space complexity Time complexity: O(1) for set operation, and O(logn) for get operation Space complexity: O(m*n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-time-based-key-value-store/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eDesign a time-based key-value data structure that can store multiple values for the same key at different timestamps and retrieve the key\u0026rsquo;s value at a certain timestamp.\u003c/p\u003e\n\u003cp\u003eImplement the \u003ccode\u003eTimeMap\u003c/code\u003e class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTimeMap()\u003c/code\u003e Initializes the object of the data structure.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid set(String key, String value, int timestamp)\u003c/code\u003e Stores the key \u003ccode\u003ekey\u003c/code\u003e with the value \u003ccode\u003evalue\u003c/code\u003e at the given time \u003ccode\u003etimestamp\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eString get(String key, int timestamp)\u003c/code\u003e Returns a value such that \u003ccode\u003eset\u003c/code\u003e was called previously, with \u003ccode\u003etimestamp_prev \u0026lt;= timestamp\u003c/code\u003e. If there are multiple such values, it returns the value associated with the largest \u003ccode\u003etimestamp_prev\u003c/code\u003e. If there are no values, it returns \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput\n[\u0026#34;TimeMap\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;]\n[[], [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 3], [\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 5]]\nOutput\n[null, null, \u0026#34;bar\u0026#34;, \u0026#34;bar\u0026#34;, null, \u0026#34;bar2\u0026#34;, \u0026#34;bar2\u0026#34;]\n\nExplanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1);  // store the key \u0026#34;foo\u0026#34; and value \u0026#34;bar\u0026#34; along with timestamp = 1.\ntimeMap.get(\u0026#34;foo\u0026#34;, 1);         // return \u0026#34;bar\u0026#34;\ntimeMap.get(\u0026#34;foo\u0026#34;, 3);         // return \u0026#34;bar\u0026#34;, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \u0026#34;bar\u0026#34;.\ntimeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4); // store the key \u0026#34;foo\u0026#34; and value \u0026#34;bar2\u0026#34; along with timestamp = 4.\ntimeMap.get(\u0026#34;foo\u0026#34;, 4);         // return \u0026#34;bar2\u0026#34;\ntimeMap.get(\u0026#34;foo\u0026#34;, 5);         // return \u0026#34;bar2\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= key.length, value.length \u0026lt;= 100\u003c/li\u003e\n\u003cli\u003ekey and value consist of lowercase English letters and digits.\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= timestamp \u0026lt;= 10^7\u003c/li\u003e\n\u003cli\u003eAll the timestamps of set are strictly increasing.\u003c/li\u003e\n\u003cli\u003eAt most 2 * 10^5 calls will be made to set and get.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eOur objective for this task is to design a key-value store.\nWe are going to have a \u003ccode\u003ekey\u003c/code\u003e, and a list of \u003ccode\u003evalues\u003c/code\u003e associated with that key, and each value is going to have a \u003ccode\u003etimestamp\u003c/code\u003e associated with it.\nAs for operations, we are going to support only \u003ccode\u003eset\u003c/code\u003e and \u003ccode\u003eget\u003c/code\u003e operations.\nNow, let\u0026rsquo;s look at our example\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-93282\" hidden\u003e\n    \u003clabel for=\"zoomCheck-93282\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/981.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - 150 - Time Based Key-Value Store"},{"content":"The problem Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\nReturn the minimum integer k such that she can eat all the bananas within h hours.\nExamples Input: piles = [3,6,7,11], h = 8 Output: 4 Input: piles = [30,11,23,4,20], h = 5 Output: 30 Input: piles = [30,11,23,4,20], h = 6 Output: 23 Constraints 1 \u0026lt;= piles.length \u0026lt;= 10^4 piles.length \u0026lt;= h \u0026lt;= 10^9 1 \u0026lt;= piles[i] \u0026lt;= 10^9 Explanation From the description of the problem we know that we have n piles of bananas given to us in the input array piles[i].\nWe are also given the second parameter h, which is the number of hours that we have in order to eat all of the bananas.\nKoko has an eating speed at which she can eat a certain amount of bananas per hour, and that variable is k, where k is the value that we are trying to determine as the solution to this problem.\nWe also learn that Koko can only eat one entire pile of bananas in one hour.\nBrute Force Solution func minEatingSpeed(_ piles: [Int], _ h: Int) -\u0026gt; Int { var speed = 1 while true { var totalTime = 0 for pile in piles { totalTime += Int(ceil(Double(pile) / Double(speed))) } if totalTime \u0026lt;= h { return speed } speed += 1 } return speed } Explanation Let\u0026rsquo;s look at the first example and try to figure out the way we can solve this problem. The brute force way is to start from k = 1.\nThis way Koko can only eat 3 / 1 = 3, plus 6 / 1 = 6, that will be 9 and it\u0026rsquo;s more than h = 8, so this way Koko can only eat one pile.\nWe know that the minimum k value can only be 1 because that would mean that Koko is barely eating any piles.\nAs for the maximum value for k, it will be the maximum value in our input array.\nTo solve this problem, we are going to try to iterate over k in the range 1 … max(piles), and we will continue until we find our value that allows us to eat every single pile in less than or equal to our h value.\nThe time complexity for this solution will be O(m*n).\nBut why should we iterate over every single element in the k range when we have our target h, and we can apply binary search algorithm and optimize our solution?\nTime/ Space complexity Time complexity: O(m*n) Space complexity: O(1) where m is the length of the input array and n is the maximum number of bananas in a pile. Binary Search Solution func minEatingSpeed(_ piles: [Int], _ h: Int) -\u0026gt; Int { var l = 1 var r = piles.max()! var res = r while l \u0026lt;= r { let m = (r + l) / 2 var hours = 0 for p in piles { hours += Int(ceil(Double(p) / Double(m))) } if hours \u0026lt;= h { res = min(res, m) r = m - 1 } else { l = m + 1 } } return res } Explanation From the solution above we learn that we can apply the binary search algorithm and reduce time complexity to O(logm * n).\nWe know that the potential rate k that Koko eats bananas is going to be in the range from 1 to max(piles) (in our example it\u0026rsquo;s 11).\nNext, we are going to have the left pointer at the start and the right pointer at the end of the range. Next, we compute the middle pointer, and our k. So for middle value 6, our rate of eating bananas will be 6 and our res value will be 6. We are not going to stop because we are looking for the minimum k value. Now, we can discard all elements on the right side, and only look at the left side. Our middle pointer will be at value 3, and the rate of eating bananas will be 3/3 + 6/3 + 7/3 + 11/3 = 10. The rate is greater than our h, so we are going to update our left and middle pointers. Next, we repeat the steps we did before and calculate the rate that will result in value 8. So at this point our middle pointer is at 4, and our result is 6, so we can update it to 4. Lastly, we are going to stop our binary search and return the result because if we continue, we will be searching values that we already crossed out. Time/ Space complexity Time complexity: O(log(m * n)) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-koko-eating-bananas/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eKoko loves to eat bananas. There are \u003ccode\u003en\u003c/code\u003e piles of bananas, the \u003ccode\u003eith\u003c/code\u003e pile has \u003ccode\u003epiles[i]\u003c/code\u003e bananas. The guards have gone and will come back in \u003ccode\u003eh\u003c/code\u003e hours.\u003c/p\u003e\n\u003cp\u003eKoko can decide her bananas-per-hour eating speed of \u003ccode\u003ek\u003c/code\u003e. Each hour, she chooses some pile of bananas and eats \u003ccode\u003ek\u003c/code\u003e bananas from that pile. If the pile has less than \u003ccode\u003ek\u003c/code\u003e bananas, she eats all of them instead and will not eat any more bananas during this hour.\u003c/p\u003e","title":"LeetCode - 150 - Koko Eating Bananas"},{"content":"The problem You are given an m x n integer matrix matrix with the following two properties:\nEach row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer target, return true if target is in matrix or false otherwise.\nYou must write a solution in O(log(m * n)) time complexity.\nExamples Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 Output: true Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 Output: false Constraints m == matrix.length n == matrix[i].length 1 \u0026lt;= m, n \u0026lt;= 100 -10^4 \u0026lt;= matrix[i][j], target \u0026lt;= 10^4 Explanation From the description of the problem, we learn that each row is sorted and the next row is going to be greater than the previous one. Therefore, each number throughout the matrix is going to be in sorted order. The brute-force way to solve this problem is to search every single value in our input. This algorithm will take O(m * n) time.\nLet\u0026rsquo;s look at another solution assuming that we just had a single row, and it was in sorted order. We know that the most optimal algorithm that can search for a target would be binary search because we can do search in O(logn) time.\nWe can do it by running binary search on every single row until we find our target. This way we can satisfy the first property from our description. The time complexity for this solution will be O(m * logn), but we can do better and optimize it even further.\nWe can optimize it further by following the second property. By knowing the fact that the next first row will be greater than the last integer in the previous row, we can apply binary search to determine in which row we can find our potential target.\nIf values in our current row are greater than our target, we will be crossing out the current row and will be looking at the row above the current row, because the top row will have smaller values than the bottom row. This approach is more efficient because the first binary search will search for the row and will take O(logm) time, and the second binary search will search for the target value inside the row and will take O(logn) time. So the overall time complexity is O(logm + logn).\nBinary Search Solution func searchMatrix(_ matrix: [[Int]], _ target: Int) -\u0026gt; Bool { let rows = matrix.count let cols = matrix[0].count var topRow = 0 var bottomRow = rows - 1 while topRow \u0026lt;= bottomRow { let m = (bottomRow + topRow) / 2 if matrix[m].last! \u0026lt; target { topRow = m + 1 } else if matrix[m][0] \u0026gt; target { bottomRow = m - 1 } else { break } } let row = (bottomRow + topRow) / 2 var l = 0 var r = cols - 1 while l \u0026lt;= r { let m = (l + r) / 2 if matrix[row][m] \u0026lt; target { l = m + 1 } else if matrix[row][m] \u0026gt; target { r = m - 1 } else { return true } } return false } Time/ Space complexity Time complexity: O(logm + logn), which reduces to O(logm * n) Space complexity: O(1) where m is the number of rows and n is the number of columns of the matrix Binary Search (One Pass) Solution func searchMatrix(_ matrix: [[Int]], _ target: Int) -\u0026gt; Bool { let rows = matrix.count let cols = matrix[0].count var l = 0 var r = rows * cols - 1 while l \u0026lt;= r { let m = (l + r) / 2 let row = m / cols let col = m % cols if matrix[row][col] \u0026lt; target { l = m + 1 } else if matrix[row][col] \u0026gt; target { r = m - 1 } else { return true } } return false } Time/ Space complexity Time complexity: O(logm * n) Space complexity: O(1) where m is the number of rows and n is the number of columns of the matrix Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-search-a-2d-matrix/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an \u003ccode\u003em x n\u003c/code\u003e integer matrix \u003ccode\u003ematrix\u003c/code\u003e with the following two properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach row is sorted in non-decreasing order.\u003c/li\u003e\n\u003cli\u003eThe first integer of each row is greater than the last integer of the previous row.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003etarget\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003etarget\u003c/code\u003e is in \u003ccode\u003ematrix\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cp\u003eYou must write a solution in \u003ccode\u003eO(log(m * n))\u003c/code\u003e time complexity.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f9a47\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f9a47\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/mat.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3  \nOutput: true  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7112f\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7112f\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/mat2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - 150 - Search a 2D Matrix"},{"content":"The problem Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.\nExamples Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4 Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 Explanation: 2 does not exist in nums so return -1 Constraints 1 \u0026lt;= nums.length \u0026lt;= 10^4 -10^4 \u0026lt; nums[i], target \u0026lt; 10^4 All the integers in nums are unique. nums is sorted in ascending order. Explanation Before we jump into the solution, let’s figure out what the requirements for a binary search algorithm are and how it is going to work. The main requirement for binary search is that the input must be sorted.\nFrom the description of the problem, we learn that our input is already sorted, so we do not need to do that.\nAs for the algorithm, we are going to have two pointers l and r, that we initialize at the start and end of the input accordingly.\nWe can’t look only to the leftmost or the rightmost values because we are eliminating only one possibility, and we still need to look at the rest of them. But if we look at the midway point, we can compare it with the target and check if it is smaller than the target or if it is larger than the target:\nIf it is smaller than the target, then everything to the left is also going to be smaller than the target. Now we can shift our left pointer and update it to the value of mid + 1. After that, we are going to repeat the steps we just did. We are going to check if our value at the mid index equals the target, and it does, so we are going to return that index. The algorithm takes O(log n) time because at each iteration we are dividing our input by 2.\nRecursive Binary Search Solution func search(_ nums: [Int], _ target: Int) -\u0026gt; Int { return binarySearch(0, nums.count - 1, nums, target) } func binarySearch(_ l: Int, _ r: Int, _ nums: [Int], _ target: Int) -\u0026gt; Int { if l \u0026gt; r { return -1 } let m = (r + l) / 2 if nums[m] \u0026gt; target { return binarySearch(l, m - 1, nums, target) } else if nums[m] \u0026lt; target { return binarySearch(m + 1, r, nums, target) } else { return m } } Time/Space complexity Time complexity: O(log n) Space complexity: O(log n) Iterative Binary Search Solution func search(_ nums: [Int], _ target: Int) -\u0026gt; Int { var l = 0 var r = nums.count - 1 while l \u0026lt;= r { let m = (r + l) / 2 if nums[m] \u0026gt; target { r = m - 1 } else if nums[m] \u0026lt; target { l = m + 1 } else { return m } } return -1 } Time/Space complexity Time complexity: O(log n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-binary-search/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e which is sorted in ascending order, and an integer \u003ccode\u003etarget\u003c/code\u003e, write a function to search \u003ccode\u003etarget\u003c/code\u003e in \u003ccode\u003enums\u003c/code\u003e. If \u003ccode\u003etarget\u003c/code\u003e exists, then return its index. Otherwise, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou must write an algorithm with \u003ccode\u003eO(log n)\u003c/code\u003e runtime complexity.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [-1,0,3,5,9,12], target = 9  \nOutput: 4  \nExplanation: 9 exists in nums and its index is 4\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [-1,0,3,5,9,12], target = 2  \nOutput: -1  \nExplanation: 2 does not exist in nums so return -1\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003e-10^4 \u0026lt; nums[i], target \u0026lt; 10^4\u003c/li\u003e\n\u003cli\u003eAll the integers in nums are unique.\u003c/li\u003e\n\u003cli\u003enums is sorted in ascending order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we jump into the solution, let’s figure out what the requirements for a binary search algorithm are and how it is going to work.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-0d4d4\" hidden\u003e\n    \u003clabel for=\"zoomCheck-0d4d4\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/704.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nThe main requirement for binary search is that the input must be sorted.\u003c/p\u003e","title":"LeetCode - 150 - Binary Search"},{"content":"The problem Given an array of integers heights representing the histogram\u0026rsquo;s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\nExamples Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. Input: heights = [2,4] Output: 4 Constraints 1 \u0026lt;= heights.length \u0026lt;= 10^5 0 \u0026lt;= heights[i] \u0026lt;= 10^4 Explanation Before we jump to the solution, let\u0026rsquo;s visualize the problem with Input: heights = [2,1,5,6,2,3] After we calculated the area, you can see that the largest rectangle has an area 10. Now let\u0026rsquo;s figure out why it works this way. If we just draw the first two elements, we can see the pattern that with rectangle with height 2, once we reached the 1, we can\u0026rsquo;t extend it any further, because 1 \u0026lt; 2 and we have a hole. For rectangle with value 1, we can extend it towards the left and use the left rectangle. Now let\u0026rsquo;s look at an example when the 1 comes first In this case, we can keep extending it to the right because nothing is stopping us. In case if two rectangles are even, we can extend it to the right too. After analyzing all cases from above, we can conclude that current heights will be in increasing order.\nStack Solution func largestRectangleArea(_ heights: [Int]) -\u0026gt; Int { var maxArea = 0 var stack: [(Int, Int)] = [] for (i, h) in heights.enumerated() { var start = i while !stack.isEmpty \u0026amp;\u0026amp; stack.last!.1 \u0026gt; h { let (index, height) = stack.removeLast() maxArea = max(maxArea, height * (i - index)) start = index } stack.append((start, h)) } for (i, h) in stack { maxArea = max(maxArea, h * (heights.count - i)) } return maxArea } Explanation To solve this problem, we will be using a stack. We will be looking for increasing heights and where increasing stopped. If we found the rectangle that cannot be extended, we will compute the area and pop the element. For example, input with heights = [1, 2, 3, 4, 2] You can see that we can\u0026rsquo;t extend rectangle with value 4 any further, so we will compute the area and pop 4. We also cannot extend rectangle with value 3, so we need to compute the area and pop it as well. As for rectangle with value 2, we can extend it because the rightmost value to it is also 2. So in this example, we only need to remove values 3 and 4.\nNow let\u0026rsquo;s look at the algorithm.\nWe start at index 0, and add height 2 to our stack Next, we get to index 1, and add height 1 to our stack, but you can see that we have height 1 at the top of our stack, and we can\u0026rsquo;t extend area with height 2 any further. The max area that we have so far is two, because our width is one, and our height is two, and now we can pop rectangle with value 2 from our stack. We can also extend rectangle at index one to the left, so index for this height will be zero Next, we are going to get to index two and height 5, five is greater than one and it can be extended, so we are going to add it to our stack Next, we get to index three, and again, height 6 is greater than 5, so we are going to add it to our stack Next, at index four we have height 2, and we can\u0026rsquo;t extend previous rectangle with height 6 any further, therefore we need to compute the area and pop it Now, the top value in our stack has height 5, and it is also greater than 2, so we need to compute the area, and pop it. As for start index for rectangle with height 2, we can extend backwards to the index two, because we just popped two elements Lastly, we reach our index five with height 3, so we put it into our stack, and we do not need to pop previous value 2, because 3 \u0026gt; 2, and we can continue extending. As for start index, we can\u0026rsquo;t extend backwards anymore so it will be 5 At this point, we have three values that are still in our stack, and we need to compute areas for these heights\nAt index five and height 3, it started and went all the way to the end of the histogram, that means that the length for it is just 1, and we can compute the area of 3. The area of 3 is not greater than our current maximum of 10, so we don\u0026rsquo;t update our max At the next index of 2, we have height 2, so this means that the area starts from index 2, and went all the way to the end of histogram. This means that width was 4 and height was 2, so the computed area equals 8. The calculated area is not greater than 10, so we don\u0026rsquo;t update our max area At the last area of our stack with index 0, and height 1, tells us that it started at index 0 and went all the way to the end of the histogram, so the width will be 6, the height was 1, so the calculated area equals 6, this area is not greater than our current value of 10, so we do not update max area Time/Space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-largest-rectangle-in-histogram/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of integers \u003ccode\u003eheights\u003c/code\u003e representing the histogram\u0026rsquo;s bar height where the width of each bar is \u003ccode\u003e1\u003c/code\u003e, return the area of the largest rectangle in the histogram.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f3e90\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f3e90\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/histogram.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: heights = [2,1,5,6,2,3]  \nOutput: 10  \nExplanation: The above is a histogram where width of each bar is 1.  \nThe largest rectangle is shown in the red area, which has an area = 10 units.  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-1deaf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-1deaf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/histogram-1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - 150 - Largest Rectangle in Histogram"},{"content":"The problem There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.\nYou are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\nA car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.\nIf a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.\nReturn the number of car fleets that will arrive at the destination.\nExamples Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] Output: 3 Explanation: * The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target. * The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself. * The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target. Input: target = 10, position = [3], speed = [3] Output: 1 Explanation: There is only one car, hence there is only one fleet. Input: target = 100, position = [0,2,4], speed = [4,2,1] Output: 1 Explanation: * The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5. * Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target. Constraints n == position.length == speed.length 1 \u0026lt;= n \u0026lt;= 10^5 0 \u0026lt; target \u0026lt;= 10^6 0 \u0026lt;= position[i] \u0026lt; target All the values of position are unique. 0 \u0026lt; speed[i] \u0026lt;= 10^6 Explanation Before we jump into the solution, let\u0026rsquo;s draw a visual representation of two cars that are traveling with different speeds and different positions. The first car is traveling with speed 10 miles per hour and it\u0026rsquo;s first in the line. The second car is traveling with speed 20 miles per hour and it\u0026rsquo;s second in the line. The faster car will eventually catch up and will be travelling with the same speed as the first car because the road has a single line. When the faster car catches up, its speed will be reduced to the speed of the slower one. Once cars are traveling next to each other, that is called a car fleet and cars are assumed to have the same exact position. Stack Solution func carFleet(_ target: Int, _ position: [Int], _ speed: [Int]) -\u0026gt; Int { let pair = zip(position, speed).sorted { $0.0 \u0026gt; $1.0 } var stack: [Double] = [] for (p, s) in pair { stack.append(Double(target - p) / Double(s)) if stack.count \u0026gt;= 2 \u0026amp;\u0026amp; stack[stack.count - 1] \u0026lt;= stack[stack.count - 2] { stack.removeLast() } } return stack.count } Explanation Let\u0026rsquo;s look at another example with [position, speed] = [[3, 3], [5, 2], [7, 1]] We start with position 3 and speed 3:\nAt one second, it will be at position 6; at two seconds, it will be at position 9; and at three seconds, it will be at position 12. Next, the position starts at 5 and speed 2:\nAt one second, it will be at position 7; at two seconds, it will be at position 9; and at three seconds, it will be at position 11. Lastly, we have position 7 and speed 1:\nAt one second, it will be at position 8; at two seconds, it will be at position 9; and at three seconds, it will be at position 10. You can see that lines intersect. It tells us that they are going to be a fleet. You can also see that the blue line intersects with the orange line before the green line does, meaning that it will be traveling with the same rate as the orange one.\nNow when we know the idea, we can get into the solution to this problem. One way to solve this problem is to calculate intersections, but more easier way would be to determine in what time cars are going to reach their destination.\nIf the car with position 5 reaches the destination before or at the same time as the position 7, this means that they become a car fleet. We know at what speed each car is traveling, so we can calculate the time when they will reach the destination.\nTo do that, we will take our target, subtract the position, and divide it by the speed. After calculation, you can see that cars at position 5 and 7 are going to collide. Now we can delete a car.\nWe are going to remove the car that is not ahead, because when the cars collide, the speed is going to be reduced to the car that is ahead. We are going to look from right to left because, if we go from left to right, we do not know at what speed the blue car is going to travel, and we can\u0026rsquo;t assume that the car is going to travel with the same speed and will not collide with somebody else and slow down. We will be using a stack to solve this problem:\nInitially, our stack is going to be empty We are going to go through elements in reverse order We are going to add the first car to our stack Next, we are going to take the next car and add it to the top of the stack Then we are going to compare both cars to see if they collide with each other Then we are going to remove the car that is on top of the stack Next steps will be the same as above Time/ Space complexity Time complexity: O(n*logn) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-car-fleet/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e cars at given miles away from the starting mile 0, traveling to reach the mile \u003ccode\u003etarget\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou are given two integer array \u003ccode\u003eposition\u003c/code\u003e and \u003ccode\u003espeed\u003c/code\u003e, both of length \u003ccode\u003en\u003c/code\u003e, where \u003ccode\u003eposition[i]\u003c/code\u003e is the starting mile of the \u003ccode\u003eith\u003c/code\u003e car and \u003ccode\u003espeed[i]\u003c/code\u003e is the speed of the \u003ccode\u003eith\u003c/code\u003e car in miles per hour.\u003c/p\u003e\n\u003cp\u003eA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\u003c/p\u003e","title":"LeetCode - 150 - Car Fleet"},{"content":"The problem Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\nExamples Input: temperatures = [73,74,75,71,69,72,76,73] Output: [1,1,4,2,1,1,0,0] Input: temperatures = [30,40,50,60] Output: [1,1,1,0] Input: temperatures = [30,60,90] Output: [1,1,0] Constraints 1 \u0026lt;= temperatures.length \u0026lt;= 10^5 30 \u0026lt;= temperatures[i] \u0026lt;= 100 Explanation Before we jump to the solution, let\u0026rsquo;s figure out the way we can solve this problem. In the first example, we can see that we can calculate how many days in the input array it takes us to find a temperature that is greater than 73.\nWe can see that on the next day we have temperature 74 that is greater than 73, so it took us one day We will need one day to find a temperature that is greater than 74, because the next day contains temperature 75 We will need four days to get the next value that is greater than 75 For the last two positions, we will return 0 because nothing to the right is greater than 76 and there is no temperature to the right after 73 Brute force Solution func dailyTemperatures(_ temperatures: [Int]) -\u0026gt; [Int] { let n = temperatures.count var res: [Int] = [] for i in 0 ..\u0026lt; n { var count = 1 var j = i + 1 while j \u0026lt; n { if temperatures[j] \u0026gt; temperatures[i] { break } j += 1 count += 1 } if j == n { count = 0 } res.append(count) } return res } Explanation The brute force way to solve this problem is to look at every temperature and scan through the entire temperature array\nfind out how many days it will take us to find a temperature that is greater than the current one. We will need to do the same thing for every temperature until we have looked through all elements in the array. This solution will take O(n^2) time complexity, but there is a more optimal way to solve it if we use extra memory.\nTime/ Space complexity Time complexity: O(n^2) Space complexity: O(1) extra space, O(n) space for the output array Stack Solution func dailyTemperatures(_ temperatures: [Int]) -\u0026gt; [Int] { let n = temperatures.count var res: [Int] = Array(repeating: 0, count: n) var stack: [[Int]] = [] for (i, t) in temperatures.enumerated() { while !stack.isEmpty \u0026amp;\u0026amp; t \u0026gt; stack.last![0] { let val = stack.removeLast() let stackT = val[0] let stackIdx = val[1] res[stackIdx] = (i - stackIdx) } stack.append([t, i]) } return res } Explanation From the solution above, we learn that we can solve this problem in a more optimal way using a stack. To do that, we need to know the previous temperatures that we looked at.\nIf we find a temperature that is greater than the current temperature in our stack, we will find the difference, add it to our output, and remove the smallest temperature from our stack. In case we have a temperature that is less than the top temperature in our stack, we can\u0026rsquo;t remove the value from our stack; instead, we will add the next value. The values in our stack will be in monotonic decreasing order In case we have temperatures in our stack in decreasing order and we encounter a new value that is greater than our top value in the stack, we will pop all values that are less than the new temperature Time/ Space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-daily-temperatures/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of integers \u003ccode\u003etemperatures\u003c/code\u003e represents the daily temperatures, return an array \u003ccode\u003eanswer\u003c/code\u003e such that \u003ccode\u003eanswer[i]\u003c/code\u003e is the number of days you have to wait after the \u003ccode\u003ei\u003c/code\u003eth day to get a warmer temperature. If there is no future day for which this is possible, keep \u003ccode\u003eanswer[i] == 0\u003c/code\u003e instead.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: temperatures = [73,74,75,71,69,72,76,73]  \nOutput: [1,1,4,2,1,1,0,0]  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: temperatures = [30,40,50,60]  \nOutput: [1,1,1,0]  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: temperatures = [30,60,90]  \nOutput: [1,1,0]  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= temperatures.length \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003e30 \u0026lt;= temperatures[i] \u0026lt;= 100\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we jump to the solution, let\u0026rsquo;s figure out the way we can solve this problem.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-ce6f1\" hidden\u003e\n    \u003clabel for=\"zoomCheck-ce6f1\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/739.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nIn the first example, we can see that we can calculate how many days in the input array it takes us to find a temperature that is greater than \u003ccode\u003e73\u003c/code\u003e.\u003c/p\u003e","title":"LeetCode - 150 - Daily Temperatures"},{"content":"The problem Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nExamples Input: n = 3 Output: [\u0026#34;((()))\u0026#34;,\u0026#34;(()())\u0026#34;,\u0026#34;(())()\u0026#34;,\u0026#34;()(())\u0026#34;,\u0026#34;()()()\u0026#34;] Input: n = 1 Output: [\u0026#34;()\u0026#34;] Constraints 1 \u0026lt;= n \u0026lt;= 8 Explanation Before we jump to the solution, let\u0026rsquo;s figure out what well-formed parentheses mean. In this problem, this means when you\u0026rsquo;re writing the code using nested parentheses, you want them to be nested in a valid way, like (()()).\nWe can\u0026rsquo;t have a right ) parenthesis come before a left ( parenthesis. In the example section, you can see that for each left parenthesis we have a matching right parenthesis that comes after it at some point. The n = 3 means that we have three pairs. In total, we have six parentheses (three are going to be open (, and three are going to be closed )).\nBacktracking Solution func generateParenthesis(_ n: Int) -\u0026gt; [String] { var stack: [String] = [] var res: [String] = [] func backtrack(_ openN: Int, _ closedN: Int) { if openN == closedN \u0026amp;\u0026amp; closedN == n { res.append(stack.joined(separator: \u0026#34;\u0026#34;)) return } if openN \u0026lt; n { stack.append(\u0026#34;(\u0026#34;) backtrack(openN + 1, closedN) stack.removeLast() } if closedN \u0026lt; openN { stack.append(\u0026#34;)\u0026#34;) backtrack(openN, closedN + 1) stack.removeLast() } } backtrack(0, 0) return res } Explanation Let\u0026rsquo;s say we start with an empty array:\nWe know that we can\u0026rsquo;t start with a closing ) parenthesis; we can only start with an open ( parenthesis. We can have another open ( parenthesis because our limit is 3 open parentheses, and so far we have two. What if we wanted to add a closing ) parenthesis instead of an open (? We can do it because at this point we have only one open parenthesis, and zero closed, but when we add a closed parenthesis, the close count also changes to one. You can see that we keep count of our open and closed parentheses, which helps us add an open parenthesis only when the condition close \u0026lt; open is satisfied. When we add a parenthesis, we update our counters.\nWe can solve this problem by using a backtracking algorithm.\nWe will be keeping track of how many open and closed parentheses are left And check if the condition close \u0026lt; open is satisfied In the picture, you can see how the algorithm will generate the result, with three of each parenthesis and valid ordering.\nTime/ Space complexity Time complexity: O(4^n/sqrt(n)) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-generate-parentheses/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven \u003ccode\u003en\u003c/code\u003e pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 3  \nOutput: [\u0026#34;((()))\u0026#34;,\u0026#34;(()())\u0026#34;,\u0026#34;(())()\u0026#34;,\u0026#34;()(())\u0026#34;,\u0026#34;()()()\u0026#34;]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 1  \nOutput: [\u0026#34;()\u0026#34;]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 8\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we jump to the solution, let\u0026rsquo;s figure out what \u003cstrong\u003ewell-formed parentheses\u003c/strong\u003e mean.\nIn this problem, this means when you\u0026rsquo;re writing the code using nested parentheses, you want them to be nested in a valid way, like \u003ccode\u003e(()())\u003c/code\u003e.\u003c/p\u003e","title":"LeetCode - 150 - Generate Parentheses"},{"content":"The problem You are given an array of strings tokens that represents an arithmetic expression in Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\nThe valid operators are +, -, * and /. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in reverse Polish notation. The answer and all the intermediate calculations can be represented in a 32-bit integer. Examples Input: tokens = [\u0026#34;2\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;*\u0026#34;] Output: 9 Explanation: ((2 + 1) * 3) = 9 Input: tokens = [\u0026#34;4\u0026#34;,\u0026#34;13\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;/\u0026#34;,\u0026#34;+\u0026#34;] Output: 6 Explanation: (4 + (13 / 5)) = 6 Input: tokens = [\u0026#34;10\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;-11\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;/\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;17\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;+\u0026#34;] Output: 22 Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 Constraints 1 \u0026lt;= tokens.length \u0026lt;= 10^4 tokens[i] is either an operator: +, -, *, or /, or an integer in the range [-200, 200]. Explanation Let’s take a look at the example with input tokens = [\u0026quot;2\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;*\u0026quot;], and try to figure out the way we can solve it. We will be reading inputs from left to right. Any operator will be applied to the previous two values (we are guaranteed that there are going to be two values). Next, we replace the previous two values with the new calculated value. 2 + 1 = 3 Next, we are going to apply the multiply operator on the previous two values and get our result 3 * 3 = 9 Stack Solution func evalRPN(_ tokens: [String]) -\u0026gt; Int { var stack: [Int] = [] for token in tokens { switch token { case \u0026#34;+\u0026#34;: stack.append(stack.removeLast() + stack.removeLast()) case \u0026#34;-\u0026#34;: let a = stack.removeLast() let b = stack.removeLast() stack.append(b - a) case \u0026#34;*\u0026#34;: stack.append(stack.removeLast() * stack.removeLast()) case \u0026#34;/\u0026#34;: let a = stack.removeLast() let b = stack.removeLast() stack.append(b / a) default: if let num = Int(token) { stack.append(num) } } } return stack[0] } Explanation From the explanation above, we can see that we can use a stack data structure.\nAs we read through the input, each value will be added to the stack. Any time we reach an operator, the previous values are removed from the stack, we perform the operation, and push the result back to the stack. Since we are guaranteed that the result of our operations will be valid, we will be left with a single value in the stack, which is the value we return. Time/Space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-evaluate-reverse-polish-notation/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an array of strings \u003ccode\u003etokens\u003c/code\u003e that represents an arithmetic expression in \u003ca href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\"\u003eReverse Polish Notation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEvaluate the expression. Return an integer that represents the value of the expression.\u003c/p\u003e\n\u003cp\u003eNote that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe valid operators are \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e and \u003ccode\u003e/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEach operand may be an integer or another expression.\u003c/li\u003e\n\u003cli\u003eThe division between two integers always truncates toward zero.\u003c/li\u003e\n\u003cli\u003eThere will not be any division by zero.\u003c/li\u003e\n\u003cli\u003eThe input represents a valid arithmetic expression in reverse Polish notation.\u003c/li\u003e\n\u003cli\u003eThe answer and all the intermediate calculations can be represented in a 32-bit integer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: tokens = [\u0026#34;2\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;*\u0026#34;]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: tokens = [\u0026#34;4\u0026#34;,\u0026#34;13\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;/\u0026#34;,\u0026#34;+\u0026#34;]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: tokens = [\u0026#34;10\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;-11\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;/\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;17\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;+\u0026#34;]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= tokens.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003etokens[i] is either an operator: \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, or \u003ccode\u003e/\u003c/code\u003e, or an integer in the range [-200, 200].\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet’s take a look at the example with input \u003ccode\u003etokens = [\u0026quot;2\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;*\u0026quot;]\u003c/code\u003e, and try to figure out the way we can solve it.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-359c0\" hidden\u003e\n    \u003clabel for=\"zoomCheck-359c0\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/150.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - 150 - Evaluate Reverse Polish Notation"},{"content":"The problem Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\nMinStack() initializes the stack object. void push(int val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getMin() retrieves the minimum element in the stack. You must implement a solution with O(1) time complexity for each function.\nExamples Input [\u0026#34;MinStack\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;getMin\u0026#34;,\u0026#34;pop\u0026#34;,\u0026#34;top\u0026#34;,\u0026#34;getMin\u0026#34;] [[],[-2],[0],[-3],[],[],[],[]] Output [null,null,null,null,-3,null,0,-2] Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top(); // return 0 minStack.getMin(); // return -2 Constraints -2^31 \u0026lt;= val \u0026lt;= 2^31 - 1 Methods pop, top, and getMin operations will always be called on non-empty stacks. At most 3 * 10^4 calls will be made to push, pop, top, and getMin. Explanation Before we jump into the solution, let\u0026rsquo;s look at our example from the description we push value -2 next, we push value 0 next, we push value -3 Now we want to getMin. The brute-force way to do this is to look into every single value and find the min value. This approach will take O(n) time.\nTwo Stacks Solution class MinStack { private var stack: [Int] private var minStack: [Int] init() { self.stack = [] self.minStack = [] } func push(_ val: Int) { self.stack.append(val) if self.minStack.isEmpty { self.minStack.append(val) return } else { let val = min(val, self.minStack.last!) self.minStack.append(val) } } func pop() { if self.stack.isEmpty { return } self.stack.removeLast() self.minStack.removeLast() } func top() -\u0026gt; Int { if self.stack.isEmpty { return -1 } return self.stack.last! } func getMin() -\u0026gt; Int { if self.minStack.isEmpty { return -1 } return self.minStack.last! } } Explanation Above we learned that we can solve the problem in a brute-force way in O(n) time. But in the problem description, we see that we need to solve it in O(1) time. To do that, we can try to create a single variable that will track our minimum The problem with this approach occurs when the popped element is the minimum. Now we don\u0026rsquo;t know what the new minimum is A good workaround to this problem is to store the current minimum at each position, so when we pop, we will know our new minimum You can see that we defined another stack:\none stack tells us the order and values that we added so far the other stack tells us what the minimum values are that we added so far in each position of the stack if we add a value, we will be inserting into both stacks if we pop a value, we will be popping from both stacks Time/ Space complexity Time complexity: O(1) for all operations Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-min-stack/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eDesign a stack that supports \u003ccode\u003epush\u003c/code\u003e, \u003ccode\u003epop\u003c/code\u003e, \u003ccode\u003etop\u003c/code\u003e, and \u003cstrong\u003eretrieving the minimum element in constant time\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eImplement the \u003ccode\u003eMinStack\u003c/code\u003e class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMinStack()\u003c/code\u003e initializes the stack object.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid push(int val)\u003c/code\u003e pushes the element \u003ccode\u003eval\u003c/code\u003e onto the stack.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid pop()\u003c/code\u003e removes the element on the top of the stack.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint top()\u003c/code\u003e gets the top element of the stack.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint getMin()\u003c/code\u003e retrieves the minimum element in the stack.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou must implement a solution with \u003ccode\u003eO(1)\u003c/code\u003e time complexity for each function.\u003c/p\u003e","title":"LeetCode - 150 - Min Stack"},{"content":"The problem You are given an array of integers nums, and there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\nExamples Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Input: nums = [1], k = 1 Output: [1] Constraints 1 \u0026lt;= nums.length \u0026lt;= 10^5 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 1 \u0026lt;= k \u0026lt;= nums.length Explanation Before we jump into the solution, let\u0026rsquo;s look at our example with nums = [1,3,-1,-3,5,3,6,7], k = 3 We can see that at the first position we have max value 3, which we add to our output array.\nAt the next position, we see that our max is still 3, so we put it in our output. At the next position, we see that our max value is 5, which we put in our output. You might recognize one solution to this problem immediately, by finding max in the window array.\nBrute Force Solution func maxSlidingWindow(_ nums: [Int], _ k: Int) -\u0026gt; [Int] { var res: [Int] = [] let n = nums.count for i in 0 ..\u0026lt; n - k + 1 { var maxVal = nums[i] for j in i ..\u0026lt; i + k { maxVal = max(maxVal, nums[j]) } res.append(maxVal) } return res } Explanation Above we learn that we can solve this problem in a brute force way by going through each window and scanning through the array and finding the max value. This solution is not very efficient because we have repetitive work when we scan the array. But we can optimize it even further and get O(n) time.\nTime / Space complexity Time complexity: O(k * n) Space complexity: O(1) extra space, O(n - k + 1) for the output array Where k is the size of the window, and n is the length of the input array. Deque Solution func maxSlidingWindow(_ nums: [Int], _ k: Int) -\u0026gt; [Int] { var res: [Int] = [] var q: Deque\u0026lt;Int\u0026gt; = Deque() var l = 0 var r = 0 while r \u0026lt; nums.count { while !q.isEmpty \u0026amp;\u0026amp; nums[q.last!] \u0026lt; nums[r] { q.removeLast() } q.append(r) if l \u0026gt; q[0] { q.removeFirst() } if (r + 1) \u0026gt;= k { res.append(nums[q[0]]) l += 1 } r += 1 } return res } Explanation From the brute force solution we learn that we can eliminate repetitive work. If we have a window and we see a value that is greater than the previous values in our window, then we can eliminate those values from our window. We can do this by using the Deque data structure. Values in deque are always going to be in decreasing order. Since value 4 is greater than the rightmost position in our deque, we can pop it.\nAfter that, we are going to make a comparison again. Value 4 is still at the top of our deque, so we are going to pop it. We will continue popping until we have popped all elements. Next, we will add value 4 to our output. Now, we shift our window by one position, and we introduce a new element 5.\nWe need to check if 5 is greater than the value at the top of our deque. After the comparison, we see that 4 \u0026lt; 5, so we remove value 4 from our deque and add value 5. We also add value 5 to our output. This solution is more efficient because adding and removing elements from a deque takes O(1) time, so the overall time complexity will be O(n).\nThis type of problem is called a monotonic decreasing queue. The reason behind this is that our queue is always going to be in decreasing order.\nTime / Space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-sliding-window-maximum/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an array of integers \u003ccode\u003enums\u003c/code\u003e, and there is a sliding window of size \u003ccode\u003ek\u003c/code\u003e which is moving from the very left of the array to the very right. You can only see the \u003ccode\u003ek\u003c/code\u003e numbers in the window. Each time the sliding window moves right by one position.\u003c/p\u003e\n\u003cp\u003eReturn the max sliding window.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1], k = 1\nOutput: [1]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003e-10^4 \u0026lt;= nums[i] \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= k \u0026lt;= nums.length\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we jump into the solution, let\u0026rsquo;s look at our example with \u003ccode\u003enums = [1,3,-1,-3,5,3,6,7], k = 3\u003c/code\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-2dedb\" hidden\u003e\n    \u003clabel for=\"zoomCheck-2dedb\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/239.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nWe can see that at the first position we have \u003cstrong\u003emax\u003c/strong\u003e value \u003ccode\u003e3\u003c/code\u003e, which we add to our output array.\u003c/p\u003e","title":"LeetCode - 150 - Sliding Window Maximum"},{"content":"The problem Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\nA permutation is a rearrangement of all the characters of a string.\nIn other words, return true if one of s1’s permutations is a substring of s2.\nExamples Input: s1 = \u0026#34;ab\u0026#34;, s2 = \u0026#34;eidbaooo\u0026#34; Output: true Explanation: s2 contains one permutation of s1 (\u0026#34;ba\u0026#34;). Input: s1 = \u0026#34;ab\u0026#34;, s2 = \u0026#34;eidboaoo\u0026#34; Output: false Constraints 1 \u0026lt;= s1.length, s2.length \u0026lt;= 10^4 s1 and s2 consist of lowercase English letters. Explanation Before we jump into the solution, let\u0026rsquo;s take a look at the example with input s1 = \u0026quot;ab\u0026quot;, s2 = \u0026quot;eidbaooo\u0026quot;\nWe are looking for a permutation of s1 in s2 with the size of s1.\nIn the example, we can see that we have a permutation of s1 = \u0026quot;ab\u0026quot; in s2 = \u0026quot;eidbaooo\u0026quot; but in a different order.\nIf we had, for example, characters \u0026quot;ab\u0026quot; in s2, it would also count as a permutation. Order in this case does not matter.\nHash Map Solution func checkInclusion(_ s1: String, _ s2: String) -\u0026gt; Bool { let s2Len = s2.count let s2Array = Array(s2) var count1: [Character: Int] = [:] for c in s1 { count1[c, default: 0] += 1 } let need = count1.count for i in 0 ..\u0026lt; s2Len { var count2 : [Character: Int] = [:] var curr = 0 for j in i ..\u0026lt; s2Len { count2[s2Array[j], default: 0] += 1 if count1[s2Array[j], default: 0] \u0026lt; count2[s2Array[j], default: 0] { break } if count1[s2Array[j], default: 0] == count2[s2Array[j]] { curr += 1 } if curr == need { return true } } } return false } Explanation We can solve this problem by using a hashmap.\nWe are going to create a hashmap for s1 which will stay the same. We are also going to have a hashmap for s2 which will contain only the characters of the current window. So, every time we create a window, we only add the new character and maybe remove the character that was on the left. Once we have those hashmaps, we are going to compare them to check if they are equal. This solution will take O(n * m) time complexity, but we can optimize it further and get O(n) time.\nTime/ Space complexity Time complexity: O(n * m) Space complexity: O(m) Where n is the length of string2, and m is the length of string1. Sliding Window Solution func checkInclusion(_ s1: String, _ s2: String) -\u0026gt; Bool { if s1.count \u0026gt; s2.count { return false } let s1Array = Array(s1) let s2Array = Array(s2) let aAsciiValue: Int = Int(Character(\u0026#34;a\u0026#34;).asciiValue!) var count1 = Array(repeating: 0, count: 26) var count2 = Array(repeating: 0, count: 26) for i in 0 ..\u0026lt; s1.count { count1[Int(s1Array[i].asciiValue!) - aAsciiValue] += 1 count2[Int(s2Array[i].asciiValue!) - aAsciiValue] += 1 } var matches = 0 for i in 0 ..\u0026lt; 26 { if count1[i] == count2[i] { matches += 1 } } var l = 0 for r in s1.count ..\u0026lt; s2.count { if matches == 26 { return true } var index = Int(s2Array[r].asciiValue!) - aAsciiValue count2[index] += 1 if count1[index] == count2[index] { matches += 1 } if count1[index] + 1 == count2[index] { matches -= 1 } index = Int(s2Array[l].asciiValue!) - aAsciiValue count2[index] -= 1 if count1[index] == count2[index] { matches += 1 } if count1[index] - 1 == count2[index] { matches -= 1 } l += 1 } return matches == 26 } Explanation From the previous solution, we learned that we can get O(n) time with some optimizations.\nWe are going to have the same hashmaps that we had in the previous solution.\nWe are also going to have a window of the size of string1, which we will move to the right by one. The difference between this solution and the previous one is that we are not going to compare two hashmaps directly. Instead, we are going to keep track of one more variable, matches.\nThe matches variable maintains the total number of equal character counts in both hashmaps.\nSo, the first thing we do is look at the first few characters and fill up our s2Count hashmap.\nAfter we fill our hashmaps, we iterate through both hashmaps comparing each character. Next, we can see that both hashmaps have matches because they both have zero ds, es, fs, etc. They all match every single character except for c and x. Therefore, we initially have 24 matches. Next, we shift our window one character to the right.\nWhen we shift, we remove the b character from the s2Count hashmap. Now, changing the count of b in s2Count to 0 means it no longer matches the b count in the s1Count hashmap. Therefore, our matches total is updated to 23. We also added a new character y, which affects our matches because in s1Count we have zero ys. This means we created a mismatch and need to decrease our matches by 1, making the total number of matches = 22. Next, we continue moving our window and repeat the operations above until we reach 26 matches, at which point we stop the algorithm and return true, or until we reach the end of string2, in which case we return false.\nWe also return false if string2 is shorter than string1.\nTime/ Space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-permutation-in-string/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven two strings \u003ccode\u003es1\u003c/code\u003e and \u003ccode\u003es2\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003es2\u003c/code\u003e contains a permutation of \u003ccode\u003es1\u003c/code\u003e, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA permutation is a rearrangement of all the characters of a string.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eIn other words, return \u003ccode\u003etrue\u003c/code\u003e if one of \u003ccode\u003es1\u003c/code\u003e’s permutations is a substring of \u003ccode\u003es2\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s1 = \u0026#34;ab\u0026#34;, s2 = \u0026#34;eidbaooo\u0026#34;\nOutput: true\nExplanation: s2 contains one permutation of s1 (\u0026#34;ba\u0026#34;).\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s1 = \u0026#34;ab\u0026#34;, s2 = \u0026#34;eidboaoo\u0026#34;\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s1.length, s2.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003es1 and s2 consist of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we jump into the solution, let\u0026rsquo;s take a look at the example with input \u003ccode\u003es1 = \u0026quot;ab\u0026quot;, s2 = \u0026quot;eidbaooo\u0026quot;\u003c/code\u003e\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7d24f\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7d24f\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/567.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003cbr\u003e\nWe are looking for a permutation of \u003ccode\u003es1\u003c/code\u003e in \u003ccode\u003es2\u003c/code\u003e with the size of \u003ccode\u003es1\u003c/code\u003e.\u003cbr\u003e\nIn the example, we can see that we have a permutation of \u003ccode\u003es1 = \u0026quot;ab\u0026quot;\u003c/code\u003e in \u003ccode\u003es2 = \u0026quot;eidbaooo\u0026quot;\u003c/code\u003e but in a different order.\u003c/p\u003e","title":"LeetCode - 150 - Permutation in String"},{"content":"The problem Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\nExamples Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Input: height = [4,2,0,3,2,5] Output: 9 Constraints n == height.length 1 \u0026lt;= n \u0026lt;= 2 * 10^4 0 \u0026lt;= height[i] \u0026lt;= 10^5 Explanation Let\u0026rsquo;s look at our example and determine the algorithm of how much water each position could trap.\nIn the picture, you can see that no matter how much water you put at the position of zero, it will spill out because there are no boundaries on the left. The same goes for position one, because no matter how much water you put on top of the block with height 1, it\u0026rsquo;s not going to trap water, since there is no boundary to its left and the water is going to spill out. In the third position, we have one block of water. If we try to add a second block of water, we can see that we have a right boundary of 2 on the right, but on the left side we only have a boundary with height 1, meaning that water will spill out. So we see that the height on the right is 2, and the height on the left is 1, so we need to take the minimum of 1 and 2 - (min(1, 2)). Prefix \u0026amp; Suffix Arrays Solution func trap(_ height: [Int]) -\u0026gt; Int { let n = height.count if n == 0 { return 0 } var leftMax = Array(repeating: 0, count: n) var rightMax = Array(repeating: 0, count: n) leftMax[0] = height[0] for i in 1 ..\u0026lt; n { leftMax[i] = max(leftMax[i - 1], height[i]) } rightMax[n - 1] = height[n - 1] for i in stride(from: n - 2, to: -1, by: -1) { rightMax[i] = max(rightMax[i + 1], height[i]) } var res = 0 for i in 0 ..\u0026lt; n { res += min(leftMax[i], rightMax[i]) - height[i] } return res } Explanation Above, we discussed our bottleneck (how much water we were able to trap) for every single position.\nWe need the max height on the left and max height on the right, and we need to take the minimum of those two. Let\u0026rsquo;s take a look at the position of 3.\nWe can’t trap any water here, because when you look at the right section, the maximum height is 3. When you look at the left section, the maximum height there is 1. The calculation will look like this:\nWe are going to take the minimum of the left height and right height and subtract the current height (min(L, R) - h[i]). This will help us determine how much water we can trap at position i. If, for example, we have L = 1, R = 3, and current height h[i] = 2, the result will be min(L, R) - h[i] = -1. The negative value tells us that we can trap zero water at position h[i]. We will continue to use this calculation to get the appropriate water count, and when we take the sum of all the calculated values, we will get our result.\nNow we can dive into the implementation.\nSince for every single position, to know how much water we can trap at index i, we need to know what the max left and right heights are at every single position. We can make an array and store the calculation for us.\nTo do that:\nWe are going to scan through the entire array, calculating every single maxLeft position. We are also going to calculate maxRight in reverse order. Lastly, we are going to take the minimum of max left and max right, because the minimum is going to help us determine how much water is trapped at a specific position. So now, for every single position, we are going to determine how much water we can trap. We can do it with our calculation: min(L, R) - h[i].\nThis solution will take O(n) time and space complexity. It\u0026rsquo;s a very efficient solution, but we can optimize it even further by reducing memory.\nTime/Space complexity Time complexity: O(n) Space complexity: O(n) Solution func trap(_ height: [Int]) -\u0026gt; Int { let n = height.count if n == 0 { return 0 } var l = 0 var r = n - 1 var res = 0 var leftMax = height[l] var rightMax = height[r] while l \u0026lt; r { if leftMax \u0026lt; rightMax { l += 1 leftMax = max(leftMax, height[l]) res += leftMax - height[l] } else { r -= 1 rightMax = max(rightMax, height[r]) res += rightMax - height[r] } } return res } Explanation From the previous solution, we learn that we can get rid of extra memory by using the two-pointer technique.\nWe are going to have a left pointer at the beginning of the array, and a right pointer at the end of the array. We are also going to have two variables: maxLeft and maxRight, which are going to keep track of the max of the left pointer and max of the right pointer. Now we are going to update our pointers. We are going to shift the pointer that has the smaller max value. When our maxLeft and maxRight are equal, it does not matter which pointer we shift, so we can choose one of them. We continue calculating our result by shifting pointers. At height 2, we are going to update our right pointer because our maxL value is greater than maxR. After that, our maxL and maxR are equal again, and we will be updating the left pointer. We will continue doing this operation until the condition left \u0026lt; right is no longer satisfied. Time/Space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-trapping-rain-water/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven \u003ccode\u003en\u003c/code\u003e non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-ed9e8\" hidden\u003e\n    \u003clabel for=\"zoomCheck-ed9e8\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/rainwatertrap.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: height = [4,2,0,3,2,5]\nOutput: 9\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003en == height.length\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 2 * 10^4\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= height[i] \u0026lt;= 10^5\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s look at our example and determine the algorithm of how much water each position could trap.\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-ada9c\" hidden\u003e\n    \u003clabel for=\"zoomCheck-ada9c\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/42.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - 150 - Trapping Rain Water"},{"content":"The problem Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 \u0026lt;= index1 \u0026lt; index2 \u0026lt;= numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.\nExamples Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]. Input: numbers = [2,3,4], target = 6 Output: [1,3] Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]. Input: numbers = [-1,0], target = -1 Output: [1,2] Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]. Constraints 2 \u0026lt;= numbers.length \u0026lt;= 3 * 10^4 -1000 \u0026lt;= numbers[i] \u0026lt;= 1000 numbers is sorted in non-decreasing order. -1000 \u0026lt;= target \u0026lt;= 1000 The tests are generated such that there is exactly one solution. Brute Force Solution func twoSum(_ numbers: [Int], _ target: Int) -\u0026gt; [Int] { let n = numbers.count for i in 0 ..\u0026lt; n { for j in i + 1 ..\u0026lt; n { if numbers[i] + numbers[j] == target { return [i + 1, j + 1] } } } return [] } Explanation The brute force way to solve this problem is to look through every single combination of two numbers.\nFor example, with input [1, 2, 3, 4, 5, 7, 10, 11] and target = 9:\nWe are going to start from the first index with value 1, and sum it with the next value 2 and check if it\u0026rsquo;s equal to the target. We will continue summing values until we reach a sum that is more than our target, and this also means that we don’t have to look at the remaining numbers in the array, because every next number will be greater than the target. We are going to follow this algorithm with other values until we have tried all possible combinations. Time/Space complexity Time complexity: O(n²) Space complexity: O(1) Solution func twoSum(_ numbers: [Int], _ target: Int) -\u0026gt; [Int] { let n = numbers.count var l = 0 var r = n - 1 while l \u0026lt; r { if numbers[l] + numbers[r] \u0026gt; target { r -= 1 } else if numbers[l] + numbers[r] \u0026lt; target { l += 1 } else { return [l + 1, r + 1] } } return [] } Explanation We can solve this problem using the fact that our array is sorted to our advantage.\nLet’s look at our example from above:\nFirst, we eliminated value 11 from consideration. Then we eliminated 10. So we are basically eliminating elements from the end of the array in reverse order, and we can use this to our advantage. Let’s try the same problem but with a slightly different algorithm.\nWe can use two pointers where the left pointer is going to be at the beginning of the array, and the right pointer is going to be at the end of the array.\nNow we are going to sum the values at those pointers:\nWe currently have values 1 and 11, and sum = 12, which is greater than our target. Since sum is too big, we need to decrease our right pointer, because if we choose to increase our left pointer, we will be increasing sum. Next, we recompute our sum, which will be 11, and we will decrease our right pointer again. Next, we will have a sum of 8, which is less than our target, and then we will increment our left pointer. Lastly, we recompute our sum again, where we find our result. Time/Space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-two-sum-ii-input-array-is-sorted/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven a 1-indexed array of integers \u003ccode\u003enumbers\u003c/code\u003e that is already sorted in non-decreasing order, find two numbers such that they add up to a specific \u003ccode\u003etarget\u003c/code\u003e number. Let these two numbers be \u003ccode\u003enumbers[index1]\u003c/code\u003e and \u003ccode\u003enumbers[index2]\u003c/code\u003e where \u003ccode\u003e1 \u0026lt;= index1 \u0026lt; index2 \u0026lt;= numbers.length\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eReturn the indices of the two numbers, \u003ccode\u003eindex1\u003c/code\u003e and \u003ccode\u003eindex2\u003c/code\u003e, added by one as an integer array \u003ccode\u003e[index1, index2]\u003c/code\u003e of length 2.\u003c/p\u003e\n\u003cp\u003eThe tests are generated such that there is exactly one solution. You may not use the same element twice.\u003c/p\u003e","title":"LeetCode - 150 - Two Sum II - Input Array Is Sorted"},{"content":"The problem Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules. Examples Input: board = [[\u0026#34;5\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;] ,[\u0026#34;4\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;] ,[\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;5\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;9\u0026#34;]] Output: true Input: board = [[\u0026#34;8\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;] ,[\u0026#34;4\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;] ,[\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;5\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;9\u0026#34;]] Output: false Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\u0026#39;s in the top left 3x3 sub-box, it is invalid. Constraints board.length == 9 board[i].length == 9 board[i][j] is a digit 1-9 or \u0026lsquo;.\u0026rsquo;. Explanation From description of the problem we learn that row must contain digits 1-9 without repetition. The same goes for column, this means that we can\u0026rsquo;t have duplicates in any particular row or column. The last rule tells us that our sub-boxes 3x3 should contain digits 1-9 without repetition.\nOur Sudoku board does not necessarily have to be filled in, and it can have only values without any duplicates.\nSolution func isValidSudoku(_ board: [[Character]]) -\u0026gt; Bool { var rows: [Int: Set\u0026lt;Character\u0026gt;] = [:] var cols: [Int: Set\u0026lt;Character\u0026gt;] = [:] var squares: [IndexHelper: Set\u0026lt;Character\u0026gt;] = [:] for r in 0 ..\u0026lt; 9 { for c in 0 ..\u0026lt; 9 { if board[r][c] == \u0026#34;.\u0026#34; { continue } if ( rows[r, default: []].contains(board[r][c]) || cols[c, default: []].contains(board[r][c]) || squares[IndexHelper(r: r / 3, c: c / 3), default: []].contains(board[r][c])) { return false } cols[c, default: []].insert(board[r][c]) rows[r, default: []].insert(board[r][c]) squares[IndexHelper(r: r / 3, c: c / 3), default: []].insert(board[r][c]) } } return true } struct IndexHelper: Hashable { let r: Int let c: Int } Explanation We can solve this problem by going through every single row and make sure that every particular row does not have any duplicates. We will be using hash set for each single row for entire grid to check if we don\u0026rsquo;t have any duplicates.\nAt this point we were able to find a way to follow the first rule and check if row has any duplicates.\nAs for second rule where we need to check every single column we can do the same thing, create a hash set for every column, and then we can determine if there are any duplicates or not.\nFor the third rule we can also use hash set to store 3x3 grid.\nLet\u0026rsquo;s try to figure out how we can use hash set in third rule.\nSince we have grid 9x9, the question becomes how do we know that for example value in row = 1 and col = 1 happens to be in particular 3x3 grid, where cell with row = 4 and col = 4 happens to be in different grid.\nNotice that we have sub-squares with size 3x3.\nOne way to find value in sub-squares is to have an index that represents row of different squares, and similarly index that represents column.\nNow the question is how we can convert cell with row = 4 and col = 4, to indices.\nSince we have sub-squares with size 3x3, we are going to take actual index of row 4/3 = 1, similarly we do the same thing to column 4/3 = 1, this way we can uniquely identify that [1, 1] belongs to the middle 3x3 grid.\nFinally, we are going to have hash set where the pair is going to be row / 3, column / 3, and value is going to be hash set where we can tell do we have any duplicates or not.\nWe are going to go through entire grid, if we find any duplicates we return false, if we don\u0026rsquo;t we can return true.\nTime/ Space complexity Time complexity: O(n^2) Space complexity: O(n^2) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-150-valid-sudoku/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eDetermine if a \u003ccode\u003e9 x 9\u003c/code\u003e Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEach row must contain the digits \u003ccode\u003e1-9\u003c/code\u003e without repetition.\u003c/li\u003e\n\u003cli\u003eEach column must contain the digits \u003ccode\u003e1-9\u003c/code\u003e without repetition.\u003c/li\u003e\n\u003cli\u003eEach of the nine \u003ccode\u003e3 x 3\u003c/code\u003e sub-boxes of the grid must contain the digits \u003ccode\u003e1-9\u003c/code\u003e without repetition.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA Sudoku board (partially filled) could be valid but is not necessarily solvable.\u003c/li\u003e\n\u003cli\u003eOnly the filled cells need to be validated according to the mentioned rules.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-334fd\" hidden\u003e\n    \u003clabel for=\"zoomCheck-334fd\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Sudoku-by-L2G-20050714.svg.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - 150 - Valid Sudoku"},{"content":"The problem Given two integers a and b, return the sum of the two integers without using the operators + and -.\nExamples Input: a = 1, b = 2 Output: 3 Input: a = 2, b = 3 Output: 5 Constraints -1000 \u0026lt;= a, b \u0026lt;= 1000 Explanation From the description of the problem, we learn that we need to figure out the way of adding two numbers without using + or - operators.\nLet\u0026rsquo;s visualize this problem and find the way we can do it.\nWe know that in binary representation of our number we could have 0 and 1.\nNormally, when we use + operator, we have a value in binary, for example a = 1, b = 0, we would get 1 in our output. If binary values in both a = 1, b = 1, are 1s, we would get 0 as result. What we have discovered is logical operator xor - ^ (exclusive or). Basically, it means:\nIf one of a or b has 1, then we will have 1 in the output. If both of a and b are the same, then we will have 0 in the output. So xor works. If we have a = 1 and b = 1, and we do the xor operation, we\u0026rsquo;re going to get a 0 in the output, but we also want a 1 carry.\nWe are going to have a carry only in the case when we have two ones a = 1 and b = 1.\nTo determine if we have a carry, we are going to use the \u0026amp; operator, because by using the \u0026amp; operator on a = 1 and b = 1 we will get 1.\nNow we need to move our carry to the left spot. We can do it by shifting \u0026lt;\u0026lt; to the left by 1.\nNow our solution will look like this: (a \u0026amp; b) \u0026lt;\u0026lt; 1\nSummarizing all that we did above:\nWe are going to have a loop Do xor operation If we have a carry value, we are going to shift \u0026lt;\u0026lt; to the left Solution func getSum(_ a: Int, _ b: Int) -\u0026gt; Int { var a = a var b = b while (b != 0) { let tmp = (a \u0026amp; b) \u0026lt;\u0026lt; 1 a = a ^ b b = tmp } return a } Explanation Now as we figured out the way how we are going to solve this problem, let\u0026rsquo;s go through an example with a = 9, b = 11:\nWe are going to run xor operation a ^ b bit by bit, and in result we will get 0010. We are also going to run \u0026amp; operation a \u0026amp; b, and shift \u0026lt;\u0026lt; it to the left. That will get 10010. After that, we are going to take the result of the xor operation and the \u0026amp;, and add them together (by doing the same operations as above). We will continue doing these operations until our carry is equal to 0. We do not need to create additional logic for dealing with negative numbers because xor and \u0026amp; operations are equivalent to addition, as long as the language that we are using handles binary representation correctly.\nTime/ Space complexity Time complexity: O(1) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-sum-of-two-integers/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven two integers \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e, return the sum of the two integers without using the operators \u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: a = 1, b = 2\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: a = 2, b = 3\nOutput: 5\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e-1000 \u0026lt;= a, b \u0026lt;= 1000\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eFrom the description of the problem, we learn that we need to figure out the way of adding two numbers without using \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e operators.\u003cbr\u003e\nLet\u0026rsquo;s visualize this problem and find the way we can do it.\u003c/p\u003e","title":"LeetCode - Blind 75 - Sum of Two Integers"},{"content":"The problem Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\nExamples Input: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. Input: nums = [0,1] Output: 2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. Constraints n == nums.length 1 \u0026lt;= n \u0026lt;= 10^4 0 \u0026lt;= nums[i] \u0026lt;= n All the numbers of nums are unique. Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\nSolution func missingNumber(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var numsSet = Set(nums) for i in 0 ..\u0026lt; n + 1 { if !numsSet.contains(i) { return i } } return 0 } Explanation One way to solve this problem is to use additional memory by using a hash set.\nLet\u0026rsquo;s look at an example with nums = [3,0,1],\nWe are given three distinct numbers, so the range that we are looking at is from 0 to 3, and in this range we have four different numbers: 0, 1, 2, 3.\nWe are going to iterate through numbers 0, 1, 2, 3 and check if we have this number in our hash set, and if it\u0026rsquo;s not, we will return it as our result.\nTime/ Space complexity Time complexity: O(n) Space complexity: O(n) Bitwise XOR Solution func missingNumber(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var res = n for i in 0 ..\u0026lt; n { res ^= i ^ nums[i] } return res } Explanation Another way that we can solve this problem with O(1) memory is by using the xor - ^ binary operator.\nSuppose we had two numbers, 2 and 3, that we want to ^ together\nYou can do a ^ operation by looking at each bit:\nIf both of them are different, 0 and 1, the output is going to be 1. If both bits are the same, the output is going to be 0. When we have both numbers that are the same, for example 5 and 5, we will get 0 in the output, because the binary representation of these numbers is the same\nThe order in which we do the ^ operation does not matter, because values that are the same cancel each other out.\nNow we are at the point where we can apply the ^ operator and solve this problem.\nWe will be using the example with nums = [3,0,1],\nWe are going to take the range [0, 1, 2, 3], and use the ^ operator on the input array [3, 0, 1]. We can see that values:\n0s are going to cancel out We are going to get rid of the 1s 3s are going to cancel out as well At the end, we have value 2 that did not show up twice, because that was the missing number, which will be the answer.\nTime/ Space complexity Time complexity: O(n) Space complexity: O(1) Math Solution func missingNumber(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var res = n for i in 0 ..\u0026lt; n { res += i - nums[i] } return res } Explanation The easiest way to solve this problem with O(1) space is by using a math operation.\nWe will be using the example with nums = [3,0,1],\nThe idea behind it looks like this:\nWe are going to take the sum of range [0, 1, 2, 3] and subtract the sum of the input array [3, 0, 1], after that we would be left with the result of 2. Time/ Space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-missing-number/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array \u003ccode\u003enums\u003c/code\u003e containing \u003ccode\u003en\u003c/code\u003e distinct numbers in the range \u003ccode\u003e[0, n]\u003c/code\u003e, return the only number in the range that is missing from the array.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [3,0,1]\nOutput: 2\nExplanation:\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [0,1]\nOutput: 2\nExplanation:\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation:\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003en == nums.length\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= nums[i] \u0026lt;= n\u003c/li\u003e\n\u003cli\u003eAll the numbers of \u003ccode\u003enums\u003c/code\u003e are unique.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: Could you implement a solution using only \u003ccode\u003eO(1)\u003c/code\u003e extra space complexity and \u003ccode\u003eO(n)\u003c/code\u003e runtime complexity?\u003c/p\u003e","title":"LeetCode - Blind 75 - Missing Number"},{"content":"The problem Reverse bits of a given 32-bit unsigned integer.\nNote:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer\u0026rsquo;s internal binary representation is the same, whether it is signed or unsigned. In Java, the compiler represents the signed integers using 2’s complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825. Examples Input: n = 00000010100101000001111010011100 Output: 964176192 (00111001011110000010100101000000) Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192, whose binary representation is 00111001011110000010100101000000. Input: n = 11111111111111111111111111111101 Output: 3221225471 (10111111111111111111111111111111) Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471, whose binary representation is 10111111111111111111111111111111. Constraints The input must be a binary string of length 32 Follow up: If this function is called many times, how would you optimize it?\nBrute Force Solution func reverseBits(_ n: Int) -\u0026gt; Int { var binary = \u0026#34;\u0026#34; for i in 0 ..\u0026lt; 32 { if ((n \u0026amp; (1 \u0026lt;\u0026lt; i)) != 0) { binary += \u0026#34;1\u0026#34; } else { binary += \u0026#34;0\u0026#34; } } var res = 0 for (i, bit) in binary.reversed().enumerated() { if bit == \u0026#34;1\u0026#34; { res |= (1 \u0026lt;\u0026lt; i) } } return res } Explanation Before we jump to the code, let\u0026rsquo;s look at an example with input n = 4 and its binary representation.\nSuppose we had an output variable for the result where we had 32 bits in the output.\nWe want to go bit by bit, reversing our input like we would do when reversing a string.\nNow the question is how can we go bit by bit, getting the first bit, then the next bit, all the way to the end.\nOne way to do it is by using the \u0026amp; operator:\nIf we take input with 0 and 1, and \u0026amp; them, we get output 0 (0 \u0026amp; 1 = 0) If we have input with 1 and we \u0026amp; it with 1, we get output 1 (1 \u0026amp; 1 = 1) When we want to look at the next place, we are going to use the \u0026lt;\u0026lt; shift operator to the left by 1 each time we move to a different spot in the input.\nFor example, if we had a value like 01, and then we do a shift operation to the left, 01 \u0026lt;\u0026lt; 1, all that does is shift bits to the left by one and replace the 1 spot with 0. Our output will look like this: 01 \u0026lt;\u0026lt; 1 = 10. Lastly, we are going to convert our binary representation to an int value by using logical | operation:\nIf we have value 0 and we logic | it with 1, we get 1 (0 | 1 = 1) If we take 0 and we logic | it with 0, we get 0 (0 | 0 = 0) Time/Space complexity Time complexity: O(1) Space complexity: O(1) Bit Manipulation Solution func reverseBits(_ n: Int) -\u0026gt; Int { var res = 0 for i in 0 ..\u0026lt; 32 { let bit = (n \u0026gt;\u0026gt; i) \u0026amp; 1 res = res | (bit \u0026lt;\u0026lt; (31 - i)) } return res } Explanation In the previous solution, we used a string that we reversed to get our result, but we can do better by getting rid of the additional string and unnecessary for loop, dealing only with bit manipulations.\nWe are going to use a for loop with range from 0 to 32 exclusive.\nAfter that, we are going to take n, shift it to the right \u0026gt;\u0026gt; by i. This will help us find the target bit, which we will \u0026amp; with 1, so our bit will be 1 or 0. Then we want to logic | our bit with our output to put this bit into the output. We are using logic | with the bit because we are only going to be updating one spot of our result.\nBut we want to update it in reverse order. We want to start from our largest bit and work our way down. We are going to shift our bit to the left \u0026lt;\u0026lt; by 31 - i. At the first iteration of the loop, we will be getting the first bit from n, and we will be putting it into the 31st spot of the result.\nThe time complexity will be O(1) because we are guaranteed that it’s only going to be 32 bits, so the solution does not scale regardless of whatever input n.\nAnd for memory, we are only using a single variable, so it also will be O(1).\nTime/Space complexity Time complexity: O(1) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-reverse-bits/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eReverse bits of a given 32-bit unsigned integer.\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer\u0026rsquo;s internal binary representation is the same, whether it is signed or unsigned.\u003c/li\u003e\n\u003cli\u003eIn Java, the compiler represents the signed integers using \u003ca href=\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003e2’s complement notation\u003c/a\u003e. Therefore, in Example 2 above, the input represents the signed integer \u003ccode\u003e-3\u003c/code\u003e and the output represents the signed integer \u003ccode\u003e-1073741825\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 00000010100101000001111010011100  \nOutput:    964176192 (00111001011110000010100101000000)  \nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192, whose binary representation is 00111001011110000010100101000000.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 11111111111111111111111111111101  \nOutput:   3221225471 (10111111111111111111111111111111)  \nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471, whose binary representation is 10111111111111111111111111111111.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe input must be a binary string of length \u003ccode\u003e32\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: If this function is called many times, how would you optimize it?\u003c/p\u003e","title":"LeetCode - Blind 75 - Reverse Bits"},{"content":"The problem Given an integer n, return an array ans of length n + 1 such that for each i (0 \u0026lt;= i \u0026lt;= n), ans[i] is the number of 1s in the binary representation of i.\nExamples Input: n = 2 Output: [0,1,1] Explanation: 0 --\u0026gt; 0 1 --\u0026gt; 1 2 --\u0026gt; 10 Input: n = 5 Output: [0,1,1,2,1,2] Explanation: 0 --\u0026gt; 0 1 --\u0026gt; 1 2 --\u0026gt; 10 3 --\u0026gt; 11 4 --\u0026gt; 100 5 --\u0026gt; 101 Constraints 0 \u0026lt;= n \u0026lt;= 10^5 Follow up:\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass? Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)? Explanation Before jumping into the solution, let’s take a look at an example with input n = 2 and how we can count bits.\nWhen we start counting, we can see that we have three values: 0, 1, 2.\nValue 0 has no leading 1s in binary representation Value 1 has only one 1 bit Value 2 also has only one 1 bit As a result, we return an array with [0, 1, 1].\nBit Manipulation - I Solution func countBits(_ n: Int) -\u0026gt; [Int] { var res: [Int] = [] for num in 0 ..\u0026lt; n + 1 { var one = 0 for i in 0 ..\u0026lt; 32 { if ((num \u0026amp; (1 \u0026lt;\u0026lt; i)) != 0) { one += 1 } } res.append(one) } return res } Explanation Now let’s change our input to 3 -\u0026gt; 011, and find the way we can count multiple 1s.\nWe are going to use \u0026amp; operator, which will help us determine if the current bit is equal to 1.\nWe will also be using the \u0026lt;\u0026lt; shift operator to the right. This way, we can cross out the current bit and find the rest of the bits.\nTime/Space complexity Time complexity: O(n*logn) Space complexity: O(1) extra space, O(n) space for the output array Bit Manipulation (DP) Solution func countBits(_ n: Int) -\u0026gt; [Int] { var dp = Array(repeating: 0, count: n + 1) var offset = 1 for i in 1 ..\u0026lt; n + 1 { if offset * 2 == i { offset = i } dp[i] = 1 + dp[i - offset] } return dp } Explanation Let’s look at the binary representation of 8:\nWe know that 0 has zero 1s in binary representation.\nWhen we get to 1, we have one occurrence of 1 For binary representation of 2, we have one For binary representation of 3, we have two different 1s When you get to value 4, you start to notice how we are doing repetitive work.\nYou can see that for the values from 4 to 7, the first two bits repeat the previous four values that we calculated.\nSo when we want to get the value of 4, we can take the binary representation of 0 and add 1 to its third bit.\nIf you want to get the value of 5, you can take the binary representation of 1 and add a 1 bit to the third bit.\nYou can see that when we calculate how many 1s are in the binary representation of 4, we just say 1 + dp[0] or 1 + dp[n - 4]. This is a dynamic problem because we are using previous results that we calculated to compute the new results.\nWhen we get to the binary representation of 8, our offset is no longer four, because now the binary representation of 8 represents integer 0. So we want to take 8, offset it to eight, which is going to get us to zero.\nFor each value, we are going to have the equation 1 + dp[n - offset], where offset is the most significant bit we have reached so far.\nThe most significant bit is going to be [1, 2, 4, 8, 16, …]. Basically, it doubles in size. We also know that each bit is a power of two—that’s what binary represents.\nLet’s look at how we can calculate our offset:\nWe know that 0 is our base case and it has zero ones.\nWe know that in the next position of one, we reached the most significant bit of 1, therefore our value will be 1 + dp[n - 1]. At the next position of two, we reached the significant bit of 2, so our value will be 1 + dp[n - 2]. At the next position of three, we again have the most significant bit of 2, so it’s going to use the previous value 1 + dp[n - 2]. When we get to the next element of four, we can see that we reached a new power of two, therefore we will be modifying our offset to 1 + dp[n - 4]. Similarly, when we get to eight, we reach a new power of two, so we are going to do 1 + dp[n - 8]. We can detect that we reached a new power of two by multiplying the previous power of two by 2, and comparing it to the current value we are at.\nTime/Space complexity Time complexity: O(n) Space complexity: O(1) extra space, O(n) space for the output array Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-counting-bits/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003en\u003c/code\u003e, return an array \u003ccode\u003eans\u003c/code\u003e of length \u003ccode\u003en + 1\u003c/code\u003e such that for each \u003ccode\u003ei\u003c/code\u003e (\u003ccode\u003e0 \u0026lt;= i \u0026lt;= n\u003c/code\u003e), \u003ccode\u003eans[i]\u003c/code\u003e is the number of \u003ccode\u003e1\u003c/code\u003es in the binary representation of \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 2  \nOutput: [0,1,1]  \nExplanation:  \n0 --\u0026gt; 0  \n1 --\u0026gt; 1  \n2 --\u0026gt; 10  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 5  \nOutput: [0,1,1,2,1,2]  \nExplanation:  \n0 --\u0026gt; 0  \n1 --\u0026gt; 1  \n2 --\u0026gt; 10  \n3 --\u0026gt; 11  \n4 --\u0026gt; 100  \n5 --\u0026gt; 101  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e0 \u0026lt;= n \u0026lt;= 10^5\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up:\u003c/p\u003e","title":"LeetCode - Blind 75 - Counting Bits"},{"content":"The problem Given a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight).\nA set bit refers to a bit in the binary representation of a number that has a value of 1.\nExamples Input: n = 11 Output: 3 Explanation: The input binary string 1011 has a total of three set bits. Input: n = 128 Output: 1 Explanation: The input binary string 10000000 has a total of one set bit. Input: n = 2147483645 Output: 30 Explanation: The input binary string 1111111111111111111111111111101 has a total of thirty set bits. Constraints 1 \u0026lt;= n \u0026lt;= 2^31 - 1 Follow up: If this function is called many times, how would you optimize it?\nExplanation The brute-force way to solve this problem is to go through every single character in the input string and count all 1s. This solution will take O(n) time, but we actually can solve it in a more efficient way.\nBit Mask Solution func hammingWeight(_ n: Int) -\u0026gt; Int { var n = n var res = 0 for i in 0 ..\u0026lt; 32 { if (((1 \u0026lt;\u0026lt; i) \u0026amp; n) != 0) { res += 1 } } return res } Explanation Another way that we can solve this problem is by using the logic \u0026amp; operator.\nWhen we use the \u0026amp; operator on two values, we only get 1 in the case when both values have 1, and other values will be converted to 0.\nAt this moment we have a way to detect if the first bit is 1 or 0, but we also need to look at the next bit, so we need to get the rest of the bits and shift them to the right by one.\nThis way we can compare two numbers, and if we detect 1, then we update our result.\nWe are using the range 0 .. \u0026lt; 32 because from the constraints we know that n fits into a 32-bit integer.\nWe also have a small downside in our solution—the algorithm has to look at every bit even if it’s not 1.\nTime/ Space complexity Time complexity: O(1) Space complexity: O(1) Bit Mask (Optimal) Solution func hammingWeight(_ n: Int) -\u0026gt; Int { var n = n var res = 0 while n != 0 { n = n \u0026amp; (n - 1) res += 1 } return res } Explanation We can solve this problem in an optimal way by running the algorithm as many times as there are 1s in our input.\nWe can do this by using the \u0026amp; operation, n - 1 value, and incrementing our result by 1.\nThis solution works because we \u0026amp; the current n value with n - 1, and update our n value with the new one.\nWhen we subtract 1 from n, we are getting rid of a bit. We also use logic \u0026amp; to combine the two values, because we are removing one bit that contains 1. Next, when we subtract 1, we get rid of the next 1 bit. Even when we introduce a bunch of other 1s, this will not affect us because every new 1 bit that we introduced will be on the right side, and they do not matter because we \u0026amp; n with n - 1— they are all going to cancel out.\nBasically, what we did is skip all 0s in between, and we allowed ourselves to run the loop as many times as there are 1 bits in the input.\nTime/ Space complexity Time complexity: O(1) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-number-of-1-bits/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven a positive integer \u003ccode\u003en\u003c/code\u003e, write a function that returns the number of set bits in its binary representation (also known as the \u003ca href=\"https://en.wikipedia.org/wiki/Hamming_weight\"\u003eHamming weight\u003c/a\u003e).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA set bit refers to a bit in the binary representation of a number that has a value of 1.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 11  \nOutput: 3  \nExplanation:  \nThe input binary string 1011 has a total of three set bits.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 128  \nOutput: 1  \nExplanation:  \nThe input binary string 10000000 has a total of one set bit.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 2147483645  \nOutput: 30  \nExplanation:  \nThe input binary string 1111111111111111111111111111101 has a total of thirty set bits.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 2^31 - 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: If this function is called many times, how would you optimize it?\u003c/p\u003e","title":"LeetCode - Blind 75 - Number of 1 Bits"},{"content":"The problem Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0s.\nYou must do it in place.\nExamples Input: matrix = [[1,1,1],[1,0,1],[1,1,1]] Output: [[1,0,1],[0,0,0],[1,0,1]] Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]] Constraints m == matrix.length n == matrix[0].length 1 \u0026lt;= m, n \u0026lt;= 200 -2³¹ \u0026lt;= matrix[i][j] \u0026lt;= 2³¹ - 1 Follow up:\nA straightforward solution using O(m*n) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution. Could you devise a constant space solution? Brute Force Solution func setZeroes(_ matrix: inout [[Int]]) { let rows = matrix.count let cols = matrix[0].count var mark: [[Int]] = [] for r in 0 ..\u0026lt; rows { var row: [Int] = [] for c in 0 ..\u0026lt; cols { row.append(matrix[r][c]) } mark.append(row) } for r in 0 ..\u0026lt; rows { for c in 0 ..\u0026lt; cols { if matrix[r][c] == 0 { for col in 0 ..\u0026lt; cols { mark[r][col] = 0 } for row in 0 ..\u0026lt; rows { mark[row][c] = 0 } } } } for r in 0 ..\u0026lt; rows { for c in 0 ..\u0026lt; cols { matrix[r][c] = mark[r][c] } } } Explanation We can solve this problem by declaring a copy of our input array.\nThe reason why we can’t do it in-place is because when we replace 1 in the last column with 0, we end up making the entire column filled with 0s, breaking the correct order.\nThis is why we use copy: when we make changes, we make them to our copy without breaking anything, and when we read, we read from our input array.\nIn the example\nyou can see that when we encounter 0, we are going to update the entire first row, and also update the entire column in our copy array.\nWe created copy because when we go to the next position and we see that it’s 1, we do not modify the column, because we have not read that value yet.\nNext, we continue moving to the next position in our matrix and when we encounter 0, we set the entire row to 0, but in our copy we can see that we already did it for the middle value.\nLastly, we go to our last position, and we can see that it is 0, so we are going to set the entire column to 0, and we are going to set the entire row to 0 in our copy.\nYou can see that in this solution we have a lot of repetitive work; therefore, we can prevent this from happening.\nTime/ Space complexity Time complexity: O((m*n) * (m+n)) Space complexity: O(m * n) where m is the number of rows, and n is the number of columns Iteration Solution func setZeroes(_ matrix: inout [[Int]]) { let ROWS = matrix.count let COLS = matrix[0].count var rows = Array(repeating: false, count: ROWS) var cols = Array(repeating: false, count: COLS) for r in 0 ..\u0026lt; ROWS { for c in 0 ..\u0026lt; COLS { if matrix[r][c] == 0 { rows[r] = true cols[c] = true } } } for r in 0 ..\u0026lt; ROWS { for c in 0 ..\u0026lt; COLS { if rows[r] || cols[c] { matrix[r][c] = 0 } } } } Explanation We can improve the brute force solution’s time and space complexity by only allocating additional row and column arrays to keep track of what we need to update.\nWe start from our first row, and when we encounter 0, we mark our additional row and column.\nAfter that, we move to the next row, and when we see 0 in it, we mark that row, but we do not mark the column because we already did it.\nLastly, we move to our last row and mark the row and column that need to be set to 0.\nNow, we look at the marked rows and columns, and set them to 0.\nThe advantage of this algorithm is that the memory used is O(m+n), and the time complexity is O(m*n).\nWe can go even further and optimize the memory complexity.\nTime/ Space complexity Time complexity: O(m*n) Space complexity: O(m+n) where m is the number of rows, and n is the number of columns Iteration (Space Optimized) Solution func setZeroes(_ matrix: inout [[Int]]) { let rows = matrix.count let cols = matrix[0].count var rowZero = false for r in 0 ..\u0026lt; rows { for c in 0 ..\u0026lt; cols { if matrix[r][c] == 0 { matrix[0][c] = 0 if r \u0026gt; 0 { matrix[r][0] = 0 } else { rowZero = true } } } } for r in 1 ..\u0026lt; rows { for c in 1 ..\u0026lt; cols { if matrix[0][c] == 0 || matrix[r][0] == 0 { matrix[r][c] = 0 } } } if matrix[0][0] == 0 { for r in 0 ..\u0026lt; rows { matrix[r][0] = 0 } } if rowZero { for c in 0 ..\u0026lt; cols { matrix[0][c] = 0 } } } Explanation We can take our additional row and column from the previous solution and put them inside our matrix so that we can do our algorithm in-place, but we are going to need one additional variable.\nIf you look at the top-left corner, you can see that the row and column overlap at that place.\nThe rest of the algorithm stays the same as in the previous solution.\nTo sum up:\nWe are going to keep track of rowZero. Set our column to 0 when we encounter value 0. If we encounter 0 in the middle of the matrix, we are going to set the cell in the first row with the current column to 0, and also set 0 to the cell in the first column with the current row position. This way, we can keep track of which rows and columns we should zero out by looking at the values in the first row and column, and moving from top-left and working our way down — from top to bottom, from left to right.\nTime/ Space complexity Time complexity: O(m * n) Space complexity: O(1) where m is the number of rows, and n is the number of columns Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-set-matrix-zeroes/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e integer matrix \u003ccode\u003ematrix\u003c/code\u003e, if an element is \u003ccode\u003e0\u003c/code\u003e, set its entire row and column to \u003ccode\u003e0\u003c/code\u003es.\u003c/p\u003e\n\u003cp\u003eYou must do it \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\"\u003ein place\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-fafeb\" hidden\u003e\n    \u003clabel for=\"zoomCheck-fafeb\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/mat1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]  \nOutput: [[1,0,1],[0,0,0],[1,0,1]]  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7112f\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7112f\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/mat2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]  \nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003em == matrix.length\u003c/li\u003e\n\u003cli\u003en == matrix[0].length\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= m, n \u0026lt;= 200\u003c/li\u003e\n\u003cli\u003e-2³¹ \u0026lt;= matrix[i][j] \u0026lt;= 2³¹ - 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA straightforward solution using O(m*n) space is probably a bad idea.\u003c/li\u003e\n\u003cli\u003eA simple improvement uses O(m + n) space, but still not the best solution.\u003c/li\u003e\n\u003cli\u003eCould you devise a constant space solution?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esetZeroes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kr\"\u003einout\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecols\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ecol\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emark\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-b986a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-b986a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/73.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Set Matrix Zeroes"},{"content":"The problem Given an m x n matrix, return all elements of the matrix in spiral order.\nExamples Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,2,3,6,9,8,7,4,5] Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] Output: [1,2,3,4,8,12,11,10,9,5,6,7] Constraints m == matrix.length n == matrix[i].length 1 \u0026lt;= m, n \u0026lt;= 10 -100 \u0026lt;= matrix[i][j] \u0026lt;= 100 Explanation Let\u0026rsquo;s look at the example with matrix = [[1,2,3],[4,5,6],[7,8,9]] and try to figure out a way to solve this problem.\nWe are going to start from the top left corner:\nGo right from 1 to 2, Go right again from 2 to 3, now we can’t go right anymore Next, we go down from 3 to 6, Go down one more time from 6 to 9, Now we are going to go left from 9 to 8 because we can’t go down anymore, Go left again from 8 to 7 We can’t go left anymore, so we go up from 7 to 4, and if we try to go up, we see that we already visited it and we can’t go there Lastly, we go right from 4 to 5. If we try to go right, we can see that we cannot go right anymore because we already visited that element To solve this problem we are going to start from the top left corner:\nGo right until we visit all of them Next, we go down and visit all available elements Next, we go left and visit all of the elements Next, we go up We went through all four directions, but we still have some elements left.\nWe took the outermost layer and shrank it. Now we have a sub-matrix, and we can do the same algorithm on it. We can do it by introducing left and right boundaries that we move inward by 1. Similarly, we have top and bottom boundaries that we also need to shrink by 1. After that, we are going to solve the sub-matrix in spiral order by going from top left to the right. You can notice that we’ve gone through all elements, so now we can move our left and right boundaries once more, and stop because we don’t have a rectangle anymore and we visited all elements. Iteration Solution func spiralOrder(_ matrix: [[Int]]) -\u0026gt; [Int] { var res: [Int] = [] var l = 0 var r = matrix[0].count var top = 0 var bottom = matrix.count while l \u0026lt; r \u0026amp;\u0026amp; top \u0026lt; bottom { for i in l ..\u0026lt; r { res.append(matrix[top][i]) } top += 1 for i in top ..\u0026lt; bottom { res.append(matrix[i][r - 1]) } r -= 1 if !(l \u0026lt; r \u0026amp;\u0026amp; top \u0026lt; bottom) { break } for i in stride(from: r - 1, to: l - 1, by: -1) { res.append(matrix[bottom - 1][i]) } bottom -= 1 for i in stride(from: bottom - 1, to: top - 1, by: -1) { res.append(matrix[i][l]) } l += 1 } return res } Explanation We are going to initialize the left boundary at 0, right at len(matrix[0]), top at 0, and bottom at len(matrix) to solve this problem in an easier way and avoid edge cases.\nWe are always going to start at the top left position.\nAfter that, we are going to go right and iterate through the first row, adding values to our result until we reach our right boundary. Now we can go down, so we need to shift our top boundary down by 1, add values to our result, and continue going down until we reach our bottom boundary We can see that we visited all elements in the last column, therefore we can now move our right boundary by decreasing it by 1 Next, we can go through elements to the left until we reach our left boundary and add those elements to our result When we reach the left boundary, you can see that we also finished the entire bottom row, meaning that we can shift our bottom boundary up by 1 Next, we are going to go up until we reach our top boundary, and add values to our result When we reach our top boundary we can update our left boundary by increasing it by 1 Next, we go right and add elements to our result until we reach our right boundary Lastly, when the left boundary reaches the right boundary or top reaches bottom, we will stop our algorithm because we’ve done every single element Time/ Space complexity Time complexity: O(m*n) Space complexity: O(1) extra memory, O(m*n) for the output list Where m is the number of rows, and n is the number of columns Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-spiral-matrix/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e \u003ccode\u003ematrix\u003c/code\u003e, return all elements of the \u003ccode\u003ematrix\u003c/code\u003e in spiral order.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-85d07\" hidden\u003e\n    \u003clabel for=\"zoomCheck-85d07\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/spiral1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f4d28\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f4d28\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/spiral.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003em == matrix.length\u003c/li\u003e\n\u003cli\u003en == matrix[i].length\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= m, n \u0026lt;= 10\u003c/li\u003e\n\u003cli\u003e-100 \u0026lt;= matrix[i][j] \u0026lt;= 100\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s look at the example with \u003ccode\u003ematrix = [[1,2,3],[4,5,6],[7,8,9]]\u003c/code\u003e and try to figure out a way to solve this problem.\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-fd35d\" hidden\u003e\n    \u003clabel for=\"zoomCheck-fd35d\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/54.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Spiral Matrix"},{"content":"The problem You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\nExamples Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[7,4,1],[8,5,2],[9,6,3]] Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] Constraints n == matrix.length == matrix[i].length 1 \u0026lt;= n \u0026lt;= 20 -1000 \u0026lt;= matrix[i][j] \u0026lt;= 1000 Explanation Before we jump to the solution, let\u0026rsquo;s look at how rotation was done to the matrix = [[1,2,3],[4,5,6],[7,8,9]]. The problem occurs when you move value 1 to the position of value 3, because you have to save value 3 temporarily. The same logic applies to values 9 and 7. We also have other values in our outer layer that we need to take care of, values 4, 2, 6, 8. During rotation:\nvalue 2 is going to replace value 6 value 6 is going to replace value 8 value 8 is going to replace value 4 value 4 is going to replace value 2 Lastly, we have the left value 5, that has size 1 by 1, and we can not rotate it.\nSolution func rotate(_ matrix: inout [[Int]]) { let n = matrix.count var l = 0 var r = n - 1 while l \u0026lt; r { for i in 0 ..\u0026lt; r - l { let top = l let bottom = r let topLeft = matrix[top][l + i] matrix[top][l + i] = matrix[bottom - i][l] matrix[bottom - i][l] = matrix[bottom][r - i] matrix[bottom][r - i] = matrix[top + i][r] matrix[top + i][r] = topLeft } r -= 1 l += 1 } } Explanation Let\u0026rsquo;s look at another example. We are going to start rotating from the outermost square layer. After that, we are going to move inward, and we are going to do rotation inside the matrix. The rotation is going to start from top left and we will go clockwise.\nWhen we did the outermost layer, now we need to do the inside layer. We can treat the inside of the matrix as a subproblem, all we need to do is to shift our pointers by 1. As for in-memory replacement, we are going to keep our value in a temporary variable and replace it with the next value. We can slightly improve our solution with temporary variables by doing it in reverse order. Instead of moving values clockwise, we will do it counter-clockwise. The reason we do this is because we only need one temporary variable, which will make the code a little bit easier.\nTime/Space complexity Time complexity: O(n^2) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-rotate-image/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an \u003ccode\u003en x n\u003c/code\u003e 2D \u003ccode\u003ematrix\u003c/code\u003e representing an image, rotate the image by 90 degrees (clockwise).\u003c/p\u003e\n\u003cp\u003eYou have to rotate the image \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\"\u003ein-place\u003c/a\u003e, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-fafeb\" hidden\u003e\n    \u003clabel for=\"zoomCheck-fafeb\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/mat1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7112f\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7112f\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/mat2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003en == matrix.length == matrix[i].length\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 20\u003c/li\u003e\n\u003cli\u003e-1000 \u0026lt;= matrix[i][j] \u0026lt;= 1000\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we jump to the solution, let\u0026rsquo;s look at how rotation was done to the \u003ccode\u003ematrix = [[1,2,3],[4,5,6],[7,8,9]]\u003c/code\u003e.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-ad954\" hidden\u003e\n    \u003clabel for=\"zoomCheck-ad954\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/48.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Rotate Image"},{"content":"The problem Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.\nExamples Input: intervals = [[0,30],[5,10],[15,20]] Output: 2 Input: intervals = [[7,10],[2,4]] Output: 1 Constraints 1 \u0026lt;= intervals.length \u0026lt;= 10^4 0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^6 Explanation Before jumping to the code, we are going to sort the input because it\u0026rsquo;s not sorted by default.\nSorting Solution func minMeetingRooms(_ intervals: [[Int]]) -\u0026gt; Int { let start = intervals.map({ $0[0] }).sorted() let end = intervals.map({ $0[1] }).sorted() var res = 0 var count = 0 var s = 0 var e = 0 let n = intervals.count while s \u0026lt; n { if start[s] \u0026lt; end[e] { s += 1 count += 1 } else { e += 1 count -= 1 } res = max(res, count) } return res } Explanation We can visualize input with intervals = [[0,30],[5,10],[15,20]] like this:\nIf we go from left to right, we are going to see the first meeting start at time 0. We keep going and the next meeting started at time 5, and it tells us that we have two meetings that have started but no meeting that has ended. For the counting process, we will be creating and maintaining a count property that will count the number of meetings going on.\nAt time 10, we can see that the second meeting has ended, therefore we are going to decrement our count to 1. Now, we are going to look to the next point in order, where another meeting has started at 15, and we will increment our count property, which will be equal to 2. Next, we are going to repeat the same process and take the next point where the meeting has ended at 20. After that, we are going to take our count and decrement it by 1 — now count == 1. Lastly, we are going to go to our last point, which is also an end time. That means another meeting is stopping, so we decrement our count, therefore count == 0. We noticed that the max count that happened was 2, so we are going to return 2 as our result.\nNow let\u0026rsquo;s look at how we are going to sort these intervals and how we are going to iterate over the meetings regardless of whether it\u0026rsquo;s a start time for a meeting or its end time.\nInput intervals = [[0,30],[5,10],[10,15]] looks like this:\nLook at the time where point time equals 10: we have two intervals — one that ends at 10 and another that starts at 10. That means these meetings are not overlapping.\nIf we ever have a tie (two points with the exact same value), we always iterate through the end meeting time before we iterate through the start meeting time.\nWe are going to have two input arrays, start and end. After that, we are going to start this problem off using two pointers:\nWe are going to have one pointer at the beginning of the start array, and another at the beginning of the end array. Between the start value and end value, we are going to peek at the minimum. If the minimum of the two is a start point, then we are going to increment our count by 1 and shift the start pointer to the next value. We will continue doing this until we reach a tie. When we reach the tie, the meeting has to end, so we will shift our end pointer to the next one. If we iterate through an end value, that means the meeting has ended, therefore we are going to decrement our count by 1, count == 1. Now, we are going to compare values 10 and 15, where value 10 is smaller, and we are going to increment our count by 1, count == 2. Now we don\u0026rsquo;t have any start times left, so we are going to iterate through end times. From the solution above, we can see that our max count was equal to 2. Therefore, in the result, we will be returning 2.\nTime/Space Complexity Time complexity: O(n*logn) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-meeting-rooms-ii/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of meeting time intervals \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [starti, endi]\u003c/code\u003e, return the minimum number of conference rooms required.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[0,30],[5,10],[15,20]]\nOutput: 2\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[7,10],[2,4]]\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= intervals.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^6\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore jumping to the code, we are going to sort the input because it\u0026rsquo;s not sorted by default.\u003c/p\u003e\n\u003ch3 id=\"sorting-solution\"\u003eSorting Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eminMeetingRooms\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eintervals\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003estart\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eintervals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"bp\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eend\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eintervals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"bp\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eintervals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation-1\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can visualize input with \u003ccode\u003eintervals = [[0,30],[5,10],[15,20]]\u003c/code\u003e like this:\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-e5947\" hidden\u003e\n    \u003clabel for=\"zoomCheck-e5947\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/253.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Meeting Rooms II"},{"content":"The problem Given an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.\nExamples Input: intervals = [[0,30],[5,10],[15,20]] Output: false Input: intervals = [[7,10],[2,4]] Output: true Constraints 0 \u0026lt;= intervals.length \u0026lt;= 10^4 intervals[i].length == 2 0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^6 Explanation Before we dive into coding, let\u0026rsquo;s look at base cases in which intervals are not overlapping.\nIntervals [0, 8] and [8, 10] are not considered overlapping, so if one interval starts at 8 and the second interval ends at 8, this means that these intervals are not overlapping, and if we encounter similar cases we would return true.\nSorting Solution func canAttendMeetings(_ intervals: [[Int]]) -\u0026gt; Bool { if intervals.isEmpty { return true } let sortedIntervals = intervals.sorted(by: { $0[0] \u0026lt; $1[0] }) let n = sortedIntervals.count for i in 1 ..\u0026lt; n { let i1 = sortedIntervals[i - 1] let i2 = sortedIntervals[i] if i1[1] \u0026gt; i2[0] { return false } } return true } Explanation Now, let\u0026rsquo;s look at another example with intervals = [[0,30],[5,10],[15,20]]\nWe can see that the first meeting starts at 0 and ends at 30, The second interval starts at 5 but it ends at 10, and you may notice that this meeting starts before the first meeting ends, meaning that the first interval and second interval are overlapping and we have to return false. You can see that sorting will be helpful to us to solve this problem. We will be sorting all meetings based on the start time of each meeting.\nThe first part of the algorithm will be sorting The second part will be scanning through the entire array of intervals We are going to look at the first two intervals and compare the end time of the first interval and the start time of the second interval.\nIf the start time of the second interval is before the end time of the first interval, that means they are overlapping. If the second interval starts where the first interval ends, that does not mean that intervals are overlapping. We do not need to compare the first interval and the third interval because we sorted the input, and we know that the second interval does not overlap with the first interval. Therefore, there is no way that the third interval could possibly overlap with the first interval.\nNow when we move to the position of the second interval, we are going to be checking if the second and third intervals are overlapping, and we are going to repeat the process described above again by comparing start and end time of intervals.\nTime/ Space complexity Time complexity: O(n*logn) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-meeting-rooms/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of meeting time \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [starti, endi]\u003c/code\u003e, determine if a person could attend all meetings.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[0,30],[5,10],[15,20]]\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[7,10],[2,4]]\nOutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e0 \u0026lt;= intervals.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003eintervals[i].length == 2\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^6\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we dive into coding, let\u0026rsquo;s look at base cases in which intervals are not overlapping.\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-32479\" hidden\u003e\n    \u003clabel for=\"zoomCheck-32479\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/252.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Meeting Rooms"},{"content":"The problem Given an array of intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\nExamples Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping. Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping. Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don\u0026#39;t need to remove any of the intervals since they\u0026#39;re already non-overlapping. Constraints 1 \u0026lt;= intervals.length \u0026lt;= 10^5 intervals[i].length == 2 -5 * 10^4 \u0026lt;= starti \u0026lt; endi \u0026lt;= 5 * 10^4 Explanation Before we dive into coding, let’s figure out the definition of overlapping intervals for this problem.\nThe intervals with values [1, 2] and [3, 4] are not considered overlapping Next, the intervals with values [1, 3] and [2, 4] are considered overlapping Lastly, the intervals with values [1,2] and [2,3] are not considered overlapping. If they have the same edge point, they are not counted as overlapping. Recursion Solution func eraseOverlapIntervals(_ intervals: [[Int]]) -\u0026gt; Int { var intervals = intervals intervals.sort(by: { $0[0] \u0026lt; $1[0] }) let n = intervals.count func dfs(_ i: Int, _ prev: Int) -\u0026gt; Int { if i == n { return 0 } var res = dfs(i + 1, prev) if prev == -1 || intervals[prev][1] \u0026lt;= intervals[i][0] { res = max(res, 1 + dfs(i + 1, i)) } return res } return n - dfs(0, -1) } Explanation We need to visualize the problem to be able to solve it. Let’s look at the first example with intervals = [[1,2],[2,3],[3,4],[1,3]]\nWe can see that intervals [1,2],[2,3],[3,4] are not overlapping, but when you insert interval [1,3] they become overlapping.\nNow we want to eliminate intervals, and we want to eliminate the minimum number:\nWe can remove only interval [1, 3], but it\u0026rsquo;s not the only way we could do it We could remove intervals [1,2] and [2,3], but that\u0026rsquo;s not what we are looking for The brute force way to solve this problem is to go through every single combination, where we can choose to remove an interval or keep an interval.\nIf we have two choices for every single interval inside a list of intervals, the time complexity to check every single possibility would be O(2^n). That is not very efficient and we can do better.\nTime/ Space complexity Time complexity: O(2^n) Space complexity: O(n) Dynamic Programming Top-Down Solution func eraseOverlapIntervals(_ intervals: [[Int]]) -\u0026gt; Int { var intervals = intervals intervals.sort(by: { $0[1] \u0026lt; $1[1] }) let n = intervals.count var memo: [Int: Int] = [:] func dfs(_ i: Int) -\u0026gt; Int { if memo[i] != nil { return memo[i]! } var res = 1 for j in i + 1 ..\u0026lt; n { if intervals[i][1] \u0026lt;= intervals[j][0] { res = max(res, 1 + dfs(j)) break } } memo[i] = res return res } return n - dfs(0) } Explanation In the previous solution, we learned that we can optimize the recursive solution. We can do it by caching it.\nThe way this works:\nWe would add an additional hash map where we would store index and the number of intervals that we need to remove as value, so this way we would eliminate repeated work and improve our time complexity. We can go even further and get O(n) time complexity.\nTime/ Space complexity Time complexity: O(n^2) Space complexity: O(n) Greedy Sort By Start Solution func eraseOverlapIntervals(_ intervals: [[Int]]) -\u0026gt; Int { let intervals = intervals.sorted(by: { $0[0] \u0026lt; $1[0] }) var res = 0 var prevEnd = intervals[0][1] for interval in intervals.dropFirst() { let start = interval[0] let end = interval[1] if start \u0026gt;= prevEnd { prevEnd = end } else { res += 1 } prevEnd = min(prevEnd, end) } return res } Explanation Before we dive into the solution, we need to remember that the order of intervals that we are given can be random, therefore our first step would be to sort our input by start position.\nAfter that, we are going to iterate through the sorted input and compare adjacent pairs of intervals Next, we would check if intervals are overlapping by comparing the end of the first interval and the start of the second interval\nIf the second interval starts after the first one ends, then they are not overlapping But if the second interval starts before the first one ends, then they are overlapping Lastly, we are going to remove the interval that ends first\nTime/ Space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-non-overlapping-intervals/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [starti, endi]\u003c/code\u003e, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\u003c/p\u003e\n\u003cp\u003eNote that intervals which only touch at a point are non-overlapping. For example, \u003ccode\u003e[1, 2]\u003c/code\u003e and \u003ccode\u003e[2, 3]\u003c/code\u003e are non-overlapping.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don\u0026#39;t need to remove any of the intervals since they\u0026#39;re already non-overlapping.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= intervals.length \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003eintervals[i].length == 2\u003c/li\u003e\n\u003cli\u003e-5 * 10^4 \u0026lt;= starti \u0026lt; endi \u0026lt;= 5 * 10^4\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we dive into coding, let’s figure out the definition of overlapping intervals for this problem.\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3b036\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3b036\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/435.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Non-overlapping Intervals"},{"content":"The problem Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\nExamples Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping. Constraints 1 \u0026lt;= intervals.length \u0026lt;= 10^4 intervals[i].length == 2 0 \u0026lt;= starti \u0026lt;= endi \u0026lt;= 10^4 Explanation Let\u0026rsquo;s look at examples and figure out our base cases for intervals that are considered overlapping.\nIn the first example, we are given intervals = [[1,3],[2,6],[8,10],[15,18]],\nand we can see that the pairs [[1,3],[2,6]] are overlapping.\nIn the second example, they are telling us that intervals = [[1,4],[4,5]] are also considered overlapping.\nSorting Solution func merge(_ intervals: [[Int]]) -\u0026gt; [[Int]] { var intervals = intervals intervals.sort(by: { $0[0] \u0026lt; $1[0] }) var output = [intervals[0]] for interval in intervals.dropFirst() { let start = interval[0] let end = interval[1] var lastEnd = output[output.count - 1][1] if start \u0026lt;= lastEnd { output[output.count - 1][1] = max(lastEnd, end) } else { output.append([start, end]) } } return output } Explanation Now let\u0026rsquo;s say that we were given the first example but not in sorted order: intervals = [[1,3],[8,10],[15,18],[2,6]]\nWhen we draw a number line, we can see that we can take the intervals and sort them based on the start value. That way, we would be able to determine if intervals are overlapping, and if they do, we can merge them into a new interval.\nThe first step in solving this problem is:\nto sort our intervals by start value next, iterate through every single interval in sorted order — we can skip the first value because we added it to our output after that, we are going to compare the lastEnd value with our start value, and if the start value is less than or equal to lastEnd, we will merge intervals by finding the max end value if values are not overlapping, we will be adding the interval to our output Time/ Space complexity Time complexity: O(n * logn) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-merge-intervals/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [starti, endi]\u003c/code\u003e, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= intervals.length \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003eintervals[i].length == 2\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= starti \u0026lt;= endi \u0026lt;= 10^4\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s look at examples and figure out our base cases for intervals that are considered overlapping.\u003c/p\u003e","title":"LeetCode - Blind 75 - Merge Intervals"},{"content":"The problem You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represents the start and the end of the ith interval, and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.\nNote that you don\u0026rsquo;t need to modify intervals in-place. You can make a new array and return it.\nExamples Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. Constraints 0 \u0026lt;= intervals.length \u0026lt;= 10^4 intervals[i].length == 2 0 \u0026lt;= starti \u0026lt;= endi \u0026lt;= 10^5 intervals is sorted by starti in ascending order newInterval.length == 2 0 \u0026lt;= start \u0026lt;= end \u0026lt;= 10^5 Explanation Let’s look at the example with input intervals = [[1,3],[6,9]], newInterval = [2,5].\nWe can see that intervals [1, 3] and [2, 5] overlap with each other, so we are going to merge them. We are going to merge them by taking the minimum of both start values – 1, and the maximum of both end values – 5. Now the new interval will be [1, 5].\nWe also have one last interval [6, 9] that is not overlapping, so we will add that interval without any changes and the result will be [[1,5],[6,9]].\nOne last thing before we jump into coding: in the description, we don’t have an explanation for the case where we have intervals like [1,2] and [2,3].\nIn this case, the intervals are overlapping because the end of the first interval and the start of the second interval are connected. This counts as overlapping, so we need to merge them.\nLet’s go through some simple cases with input intervals = [[1,2],[3,4],[5,6]].\nLet’s imagine we were given newInterval = [-1, 0]. Since the end value of this interval is less than the start value of the first interval, this means that this interval is not going to overlap with the first interval. Therefore, this interval is not going to overlap with any of the upcoming intervals either.\nWhat if the opposite were true? Suppose we were given an interval newInterval = [7, 8] where the start value is greater than the end value of the last interval.\nIn this case, the newInterval won’t overlap with any of the other intervals, so we can return the original list and add newInterval to the end of the list.\nThere also exist a few other possibilities:\nWhen newInterval overlaps with one of the other intervals and we need to combine both intervals It is also possible that newInterval overlaps with multiple intervals—in this case, we need to combine multiple intervals Or it could be that newInterval goes somewhere in between two intervals and does not overlap Greedy Solution func insert(_ intervals: [[Int]], _ newInterval: [Int]) -\u0026gt; [[Int]] { let n = intervals.count var newInterval = newInterval var res: [[Int]] = [] for i in 0 ..\u0026lt; n { if newInterval[1] \u0026lt; intervals[i][0] { res.append(newInterval) return res + intervals[i ..\u0026lt; n] } else if newInterval[0] \u0026gt; intervals[i][1] { res.append(intervals[i]) } else { newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])] } } res.append(newInterval) return res } Explanation If we want to determine where newInterval goes, we have to iterate through the intervals and find an insertion point.\nWe are going to go interval by interval and check if the current interval overlaps with newInterval. If it doesn’t, we add the current interval to our result.\nTo do that, we need to check: If the end value of newInterval is less than the start value of the current interval If the start value of newInterval is greater than the end value of the current interval If neither of these cases is true, this means that newInterval is overlapping and we need to merge them.\nWe are going to merge them by taking the minimum of the start values and the maximum of the end values.\nTime / Space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-insert-interval/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an array of non-overlapping intervals \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [starti, endi]\u003c/code\u003e represents the start and the end of the \u003ccode\u003eith\u003c/code\u003e interval, and \u003ccode\u003eintervals\u003c/code\u003e is sorted in ascending order by \u003ccode\u003estarti\u003c/code\u003e. You are also given an interval \u003ccode\u003enewInterval = [start, end]\u003c/code\u003e that represents the start and end of another interval.\u003c/p\u003e\n\u003cp\u003eInsert \u003ccode\u003enewInterval\u003c/code\u003e into \u003ccode\u003eintervals\u003c/code\u003e such that \u003ccode\u003eintervals\u003c/code\u003e is still sorted in ascending order by \u003ccode\u003estarti\u003c/code\u003e and \u003ccode\u003eintervals\u003c/code\u003e still does not have any overlapping intervals (merge overlapping intervals if necessary).\u003c/p\u003e","title":"LeetCode - Blind 75 - Insert Interval"},{"content":"The problem You are given an integer array nums. You are initially positioned at the array\u0026rsquo;s first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\nExamples Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Constraints 1 \u0026lt;= nums.length \u0026lt;= 10⁴ 0 \u0026lt;= nums[i] \u0026lt;= 10⁵ Explanation From the description of the problem, we learn that we start from the start index, and for every element in the array, the number at the position represents the max jump length that we can perform at every single position.\nBasically, this means for input with nums = [2,3,1,1,4]\nFrom the first position, we can jump of length 2 or we can do a jump with length 1. We don’t have to do the max jump length; we can choose to do a 1 jump. Now we are at the position of 3. Now we can do a jump of length 1, or we can do a jump of length 2, or a jump of length 3, and with length 3 we reach the end, therefore we can return true. Recursion Solution func canJump(_ nums: [Int]) -\u0026gt; Bool { let n = nums.count func dfs(_ i: Int) -\u0026gt; Bool { if i == n - 1 { return true } let end = min(n - 1, i + nums[i]) for j in i + 1 ..\u0026lt; end + 1 { if dfs(j) { return true } } return false } return dfs(0) } Explanation Let’s look at another example with nums=[3,2,1,0,4]\nValues on the edges represent jump length; values below represent indices.\nIf we visualize the example as a decision tree based on indices:\nWe can see that from position 0 we can make three jumps: jump of length 1, 2, and 3. At index 1, we can take 2 jumps: one decision with a jump of length 1, another jump with length 2. At index 2 with value 1, we can take only 1 jump. At index 3, we have a value of 0, which basically means that we can’t take a jump and this path is a dead end for us. This solution is using recursion, and the time complexity will be O(n!), which is very slow. But we don’t actually need to do it because, as you can see, we have a lot of repetitive work and we can optimize it by adding caching to it.\nTime/ Space complexity Time complexity: O(n!) Space complexity: O(n) Dynamic Programming Top-Down Solution func canJump(_ nums: [Int]) -\u0026gt; Bool { let n = nums.count var memo: [Int: Bool] = [:] func dfs(_ i: Int) -\u0026gt; Bool { if memo[i] != nil { return memo[i]! } if i == n - 1 { return true } if nums[i] == 0 { return false } let end = min(n - 1, i + nums[i]) for j in i + 1 ..\u0026lt; end + 1 { if dfs(j) { memo[i] = true return true } } memo[i] = false return false } return dfs(0) } Explanation In the previous solution, we learned that we can use caching to optimize our time complexity. We can do it by adding an additional hash map and using it to store the index that we visited and calculate the value for it.\nIn the image with the example of nums=[3,2,1,0,4], we can see that we have paths that we already visited, such as the path with index 2, and that tells us that with caching, we can, for index 2, return false because we cannot reach the end.\nYou may also notice that none of our paths can reach the end. Therefore, when we try to go down to paths like dp[2], dp[3], dp[1], and dp[0], we will return false.\nAs a result, caching helped us speed up the solution to O(n²) time complexity. But we can optimize it even further with a linear time O(n) solution.\nTime/ Space complexity Time complexity: O(n²) Space complexity: O(n) Greedy Solution func canJump(_ nums: [Int]) -\u0026gt; Bool { let n = nums.count var goal = n - 1 for i in stride(from: n - 1, to: -1 , by: -1) { if i + nums[i] \u0026gt;= goal { goal = i } } return goal == 0 } Explanation From the previous solution, we learned that we can optimize time complexity from O(n²) to O(n). We can do it by using a Greedy algorithm.\nPreviously, we were trying to solve this problem from start and work to the end. Now let’s do it in reverse order: start at the n position and work our way to the beginning.\nLet’s work our way backwards: our goal is to reach index 4 – the last element in the array.\nIf we look at index 3 before our goal, we can see that it has value 1, and we can reach our goal from this index, meaning we can take our goal post and shift it to index 3. Now we are not trying to reach index 4; our goal post is at index 3. Next, we look at the next position in reverse order with index 2 that has value 1, meaning that we can make a jump of length 1 and reach position with index 3, and we can shift our goal post. We will keep doing it as long as we can reach a goal post. Next, we work our way backwards again. Now we are at the position with index 1 and value 3. We can make a jump of length 3 or less, and we can reach our goal post and shift it. Lastly, we are at the position with index 0 with value of 2, so we can take 2 or 1 jumps and reach our goal post. Therefore, we update our goal post and return true, because from the starting position all the way to the end we were able to reach the last position. Time/ Space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-jump-game/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e. You are initially positioned at the array\u0026rsquo;s first index, and each element in the array represents your maximum jump length at that position.\u003c/p\u003e\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if you can reach the last index, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 10⁴\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= nums[i] \u0026lt;= 10⁵\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eFrom the description of the problem, we learn that we start from the start index, and for \u003cstrong\u003eevery element in the array\u003c/strong\u003e, the number at the position represents the \u003cstrong\u003emax jump length that we can perform at every single position\u003c/strong\u003e.\u003cbr\u003e\nBasically, this means for input with \u003ccode\u003enums = [2,3,1,1,4]\u003c/code\u003e\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-57ddf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-57ddf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/55.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Jump Game"},{"content":"The problem Given an integer array nums, find the subarray with the largest sum, and return its sum.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExamples Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6. Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum 1. Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23. Constraints 1 \u0026lt;= nums.length \u0026lt;= 10⁵ -10⁴ \u0026lt;= nums[i] \u0026lt;= 10⁴ Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\nExplanation We can solve this problem in a brute force way by computing every single subarray for every single value. That algorithm will take O(n³) time complexity. For example, with input nums = [-2,1,-3,4,-1,2,1,-5,4], visual representation will look like this:\nBrute Force (Optimized) Solution func maxSubArray(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var res = nums[0] for i in 0 ..\u0026lt; n { var curr = 0 for j in i ..\u0026lt; n { curr += nums[j] res = max(res, curr) } } return res } Explanation We can slightly optimize the brute force solution with O(n³) time.\nLet’s look at how we can do it:\nWe are going to start from index 0 and iterate over the entire array, Inside this loop we will have another loop and a property that will keep track of the current sum curr, And we will update it after each iteration of the loop. This solution will take O(n²) time complexity, but we can do better.\nNow the question that we need to ask ourselves is: do we need to start at every single value and compute every single subarray, or can we avoid repetitive work?\nTime/ Space complexity Time complexity: O(n²) Space complexity: O(1) Kadane’s Algorithm Solution func maxSubArray(_ nums: [Int]) -\u0026gt; Int { var maxSum = nums[0] var currSum = 0 for n in nums { if currSum \u0026lt; 0 { currSum = 0 } currSum += n maxSum = max(maxSum, currSum) } return maxSum } Explanation In the previous solution, we learned that we can optimize the brute force solution with O(n²) to linear time of O(n) by eliminating repetitive work.\nLet’s look at the example with input nums = [-2,1,-3,4,-1,2,1,-5,4]\nWe start at a value with the negative number -2 and if we sum it with the next value of 1, we will receive a negative value of -1. So we can conclude that we can basically ignore the negative prefix value because it is not going to help us find the result, so we are not going to consider it.\nNext, we move to the value of 1 and try to find the max subarray with the value of -3, but we can see that when we sum them we receive a negative -2 value, so this means that we can skip those values and move to the next.\nNow, we move to the value of 4 and sum it with the negative value of -1, that will result in 3. After that, we continue without skipping because our sum resulted in a positive value.\nNext, we use our current sum and add the positive value of 2 to it, so the result will be 5.\nNext, we add 1 to our current sum of 5, that results in 6.\nNext, we add negative -5 to our sum, that results in positive 1.\nLastly, we add 4 to our sum, and now our result equals 5.\nThis algorithm takes linear time, where we go through the array once, removing the negative prefix as we compute the total sum.\nTime/ Space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-maximum-subarray/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, find the subarray with the largest sum, and return its sum.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA subarray is a contiguous non-empty sequence of elements within an array.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [-2,1,-3,4,-1,2,1,-5,4]  \nOutput: 6  \nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1]  \nOutput: 1  \nExplanation: The subarray [1] has the largest sum 1.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [5,4,-1,7,8]  \nOutput: 23  \nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 10⁵\u003c/li\u003e\n\u003cli\u003e-10⁴ \u0026lt;= nums[i] \u0026lt;= 10⁴\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\u003c/p\u003e","title":"LeetCode - Blind 75 - Maximum Subarray"},{"content":"The problem Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nFor example, ”ace” is a subsequence of ”abcde”. A common subsequence of two strings is a subsequence that is common to both strings.\nExamples Input: text1 = \u0026#34;abcde\u0026#34;, text2 = \u0026#34;ace\u0026#34; Output: 3 Explanation: The longest common subsequence is \u0026#34;ace\u0026#34; and its length is 3. Input: text1 = \u0026#34;abc\u0026#34;, text2 = \u0026#34;abc\u0026#34; Output: 3 Explanation: The longest common subsequence is \u0026#34;abc\u0026#34; and its length is 3. Input: text1 = \u0026#34;abc\u0026#34;, text2 = \u0026#34;def\u0026#34; Output: 0 Explanation: There is no such common subsequence, so the result is 0. Constraints 1 \u0026lt;= text1.length, text2.length \u0026lt;= 1000 text1 and text2 consist of only lowercase English characters. Explanation Before we jump to coding, let\u0026rsquo;s look at visual representation with some examples to better understand the problem.\nAn example with input text1 = \u0026quot;abcde\u0026quot;, text2 = \u0026quot;ace\u0026quot;\nWe can see that we have two equal characters a at the beginning of both strings. This means that if both characters match each other, then we can break it into subproblems. This also means that now we are looking into a subproblem of the remainder of both strings plus 1 because we know that the longest subsequence at least is going to be 1 since we found matching pairs of characters.\nLet\u0026rsquo;s look at an example if the first characters were different: input text1 = “bbcde\u0026quot;, text2 = \u0026quot;ace\u0026quot;\nWe can\u0026rsquo;t add 1 and find the longest subsequence because the first characters are different, but it\u0026rsquo;s possible that the longest subsequence can be between bbcde and ce or it could be between bcde and ace.\nBasically, what we find out based on comparing the first characters — whether they are equal or not — is that we can break the problem into subproblems and solve them.\nRecursion Solution func longestCommonSubsequence(_ text1: String, _ text2: String) -\u0026gt; Int { let text1Array = Array(text1) let text2Array = Array(text2) let text1Count = text1.count let text2Count = text2.count func dfs(_ i: Int, _ j: Int) -\u0026gt; Int { if i == text1Count || j == text2Count { return 0 } if text1Array[i] == text2Array[j] { return 1 + dfs(i + 1, j + 1) } return max(dfs(i + 1, j), dfs(i, j + 1)) } return dfs(0, 0) } Explanation One way to solve this problem is by using the depth-first search algorithm.\nWe will need to take care of a few base cases:\nwhen we reach the end of one of the texts when we find matching characters In the result, we will be returning the max of two values.\nIt is not a very efficient solution because it will take O(2^(m+n)) time complexity, but we can optimize it.\nTime/ Space complexity Time complexity: O(2^(m+n)) Space complexity: O(m+n) where m is the length of string text1 and n is the length of string text2 Dynamic Programming Top-Down Solution func longestCommonSubsequence(_ text1: String, _ text2: String) -\u0026gt; Int { let text1Array = Array(text1) let text2Array = Array(text2) let text1Count = text1.count let text2Count = text2.count var memo: [IndexHelper: Int] = [:] func dfs(_ i: Int, _ j: Int) -\u0026gt; Int { if i == text1Count || j == text2Count { return 0 } if memo[IndexHelper(i: i, j: j)] != nil { return memo[IndexHelper(i: i, j: j)]! } if text1Array[i] == text2Array[j] { memo[IndexHelper(i: i, j: j)] = 1 + dfs(i + 1, j + 1) } else { memo[IndexHelper(i: i, j: j)] = max(dfs(i + 1, j), dfs(i, j + 1)) } return memo[IndexHelper(i: i, j: j)]! } return dfs(0, 0) } struct IndexHelper: Hashable { let i: Int let j: Int } Explanation We learned from the previous solution that we can optimize time complexity. We can do it by caching. Caching will help us reduce time complexity from O(2^(m+n)) to O(m*n).\nBase cases and algorithm stay the same; all that we needed to do is to add a hash map where we can store and retrieve stored results.\nTime/ Space complexity Time complexity: O(m*n) Space complexity: O(m*n) where m is the length of string text1 and n is the length of string text2 Dynamic Programming Bottom-Up Solution func longestCommonSubsequence(_ text1: String, _ text2: String) -\u0026gt; Int { let text1Array = Array(text1) let text2Array = Array(text2) let text1Count = text1.count let text2Count = text2.count var dp: [[Int]] = Array(repeating: Array(repeating: 0, count: text2Count + 1), count: text1Count + 1) for i in stride(from: text1Count - 1, to: -1, by: -1) { for j in stride(from: text2Count - 1, to: -1, by: -1) { if text1Array[i] == text2Array[j] { dp[i][j] = 1 + dp[i + 1][j + 1] } else { dp[i][j] = max(dp[i][j + 1], dp[i + 1][j]) } } } return dp[0][0] } Explanation Another way to solve this problem is by using the dynamic programming bottom-up approach.\nLet\u0026rsquo;s visualize input with text1 = \u0026quot;abcde\u0026quot;, text2 = \u0026quot;ace\u0026quot;\nWe have a 2D matrix that we are going to use as a representation of our text1 and text2.\nWe start by comparing values at indices 0, 0, and we can see that we have a match a == a, and we do not need to check it anymore After that we are going diagonally and compare c == b, they are not equal, and we cannot go diagonally. Since these two characters are not equal, we need to check two different subproblems, and we have two decisions — go right or go down If we go down, we can see that characters c == c and we can go diagonally because we want to look at the last two substrings When we compare d == e we see that they are not equal, then we can’t go diagonally and we need to go to the right and down to find whatever max is and put it in the cell We see that if we go to the right, we are going to be out of bounds, therefore the longest subsequence between a string and out-of-bounds value is going to be 0 The right out-of-bounds column would be filled with 0s. Similarly, the bottom rows also will be filled with 0s When we continue looking from d and e position, we see that we can’t go to the right because we will get 0, and this is not our max value, let’s go down When we go down, we find that e == e and we can look diagonally and put 1 to our row Since we looked through all possible combinations and reached the end of the strings, we can now backtrack along the path that we came from and find the solution.\nWe had 1 at position e and e At position d and e, we went down because d and e characters did not match, so we are going to get value 1 from e and e position and put it into the position of d and e Now we are going back to c and c diagonally, we are doing it because characters c and c match, so we are going to get value of 1 from position d and e, and put it to position c and c and add additional 1 to it, so now the value at position c and c equals 2 From position c and c we are going up and put 2 to b and c row because characters did not match Lastly, we are going back to position a and a diagonally because characters are matching each other, we pass value 2 to it from position b and c, and add additional value of 1, so result at position a and a will be 3, meaning that the longest common subsequence is equal to 3. You can see that we started from the bottom and worked our way up, that’s why this solution is called bottom-up.\nTime/ Space complexity Time complexity: O(m*n) Space complexity: O(m*n) where m is the length of string text1 and n is the length of string text2 Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-longest-common-subsequence/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven two strings \u003ccode\u003etext1\u003c/code\u003e and \u003ccode\u003etext2\u003c/code\u003e, return the length of their longest common subsequence. If there is no common subsequence, return \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, \u003ccode\u003e”ace”\u003c/code\u003e is a subsequence of \u003ccode\u003e”abcde”\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA common subsequence of two strings is a subsequence that is common to both strings.\u003c/p\u003e","title":"LeetCode - Blind 75 - Longest Common Subsequence"},{"content":"The problem There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 10^9.\nExamples Input: m = 3, n = 7 Output: 28 Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -\u0026gt; Down -\u0026gt; Down 2. Down -\u0026gt; Down -\u0026gt; Right 3. Down -\u0026gt; Right -\u0026gt; Down Constraints 1 \u0026lt;= m, n \u0026lt;= 100 Recursion Solution func uniquePaths(_ m: Int, _ n: Int) -\u0026gt; Int { func dfs(_ i: Int, _ j: Int) -\u0026gt; Int { if i == (m - 1) \u0026amp;\u0026amp; j == (n - 1) { return 1 } if i \u0026gt;= m || j \u0026gt;= n { return 0 } return dfs(i, j + 1) + dfs(i + 1, j) } return dfs(0, 0) } Explanation We can solve this problem in a brute force way by using recursion.\nFrom the description of the problem, we learn that we have two choices: we can go right or we can go down, and we are going to repeat this.\nIt is not a very efficient solution, and it will take O(2^(m+n)) time because we do a lot of repetitive work, but we can use cache to optimize the time complexity and avoid repetitive work.\nTime/Space complexity Time complexity: O(2^(m+n)) Space complexity: O(m+n) where m is the number of rows and n is the number of columns Depth Dirst Search Top-Down Solution func uniquePaths(_ m: Int, _ n: Int) -\u0026gt; Int { var memo: [[Int]] = Array(repeating: Array(repeating: -1, count: n), count: m) func dfs(_ i: Int, _ j: Int) -\u0026gt; Int { if i == (m - 1) \u0026amp;\u0026amp; j == (n - 1) { return 1 } if i \u0026gt;= m || j \u0026gt;= n { return 0 } if memo[i][j] != -1 { return memo[i][j] } memo[i][j] = dfs(i, j + 1) + dfs(i + 1, j) return memo[i][j] } return dfs(0, 0) } Explanation We can optimize our brute force solution by adding caching to it. We are going to do it by calculating the result from each position and adding them together.\nBut first, we need to figure out our base cases.\nWe will define our destination row with a value of 1. We will also define our out-of-bounds rows with a value of 0. The value that we can place in the cell will be calculated by the sum of the right value and the bottom value, and we will repeat this process. As a result, caching helped us optimize our time complexity. But we can go even further and optimize space complexity.\nTime/Space complexity Time complexity: O(m*n) Space complexity: O(m*n) Dynamic Programming Bottom-Up (Space Optimized) solution func uniquePaths(_ m: Int, _ n: Int) -\u0026gt; Int { var row = Array(repeating: 1, count: n) for i in 0 ..\u0026lt; m - 1 { var newRow = Array(repeating: 1, count: n) for j in stride(from: n - 2, to: -1, by: -1) { newRow[j] = newRow[j + 1] + row[j] } row = newRow } return row[0] } Explanation Another way to solve this problem is by using a dynamic programming bottom-up approach.\nWe start from our destination and we go backwards to our start point, calculating the value for each cell.\nWe can do that by calculating the sum of the right value and the bottom value, and we repeat this process until we end up at the start position with our result.\nTime/Space complexity Time complexity: O(m*n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-unique-paths/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eThere is a robot on an \u003ccode\u003em x n\u003c/code\u003e grid. The robot is initially located at the top-left corner (i.e., \u003ccode\u003egrid[0][0]\u003c/code\u003e). The robot tries to move to the bottom-right corner (i.e., \u003ccode\u003egrid[m - 1][n - 1]\u003c/code\u003e). The robot can only move either down or right at any point in time.\u003c/p\u003e\n\u003cp\u003eGiven the two integers \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\u003c/p\u003e","title":"LeetCode - Blind 75 - Unique Paths"},{"content":"The problem Given an integer array nums, return the length of the longest strictly increasing subsequence.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExamples Input: nums = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Input: nums = [0,1,0,3,2,3] Output: 4 Input: nums = [7,7,7,7,7,7,7] Output: 1 Constraints 1 \u0026lt;= nums.length \u0026lt;= 2500 -10⁴ \u0026lt;= nums[i] \u0026lt;= 10⁴ Follow-up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?\nRecursion solution func lengthOfLIS(_ nums: [Int]) -\u0026gt; Int { let n = nums.count func dfs(_ i: Int, _ j: Int) -\u0026gt; Int { if i == n { return 0 } var LIS = dfs(i + 1, j) // not include if j == -1 || nums[j] \u0026lt; nums[i] { LIS = max(LIS, 1 + dfs(i + 1, i)) // include } return LIS } return dfs(0, -1) } Explanation The brute-force way to solve this problem is by using recursion.\nWe need to determine whether to include a value or not.\nFor each value, we have two choices: we can include it in our subsequence, or we don’t include it. We do this for every single value, and the time complexity for this solution will be O(2ⁿ). This is not a very efficient algorithm, but we can take the brute-force solution and modify it to get a better solution.\nTime/Space Complexity Time complexity: O(2ⁿ) Space complexity: O(n) Dynamic programming top-down solution func lengthOfLIS(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var memo: [[Int]] = Array(repeating: Array(repeating: -1, count: n + 1), count: n) func dfs(_ i: Int, _ j: Int) -\u0026gt; Int { if i == n { return 0 } if memo[i][j + 1] != -1 { return memo[i][j + 1] } var LIS = dfs(i + 1, j) // not include if j == -1 || nums[j] \u0026lt; nums[i] { LIS = max(LIS, 1 + dfs(i + 1, i)) // include } memo[i][j + 1] = LIS return LIS } return dfs(0, -1) } Explanation We can optimize our brute-force solution by using caching, which will help improve our time complexity.\nLet\u0026rsquo;s look at an example with input [1, 2, 4, 3]\nWe have four decisions: we can start at index 0, 1, 2, or 3. We also know the values at these indices and can find initial subsequences.\nSo we can go down from value [1] and continue subsequences.\nNow we can say we used index 0, and we can choose from indices 1, 2, and 3. All values at these indices satisfy the increasing order, so we can continue our decision tree. For index 1, we can choose values from indices 2 and 3. If we try to go down from index 2, we see that we can\u0026rsquo;t add a value to our subsequence because it is no longer increasing. We mark this as reaching the limit. We also cannot continue the path from index 3 because no values come after it, so we reach the limit again and cannot increase it anymore. Now let\u0026rsquo;s see how it looks after adding caching:\nIf we try to continue creating a subsequence from index 3, we see that we cannot because it is the last index and no more elements come after it. So LIS[3] = 1, and we do not need to repeat this work. The same applies to index 2, where LIS[2] = 1, because we cannot add a next value (3 \u0026lt; 4). When we move to index 1, we do not need to calculate it again because we already did when calculating index 0. So LIS[1] = 2, and we do not need to go down this path again as it would be repeated work. When our depth-first search reaches the root, we see that the longest subsequence will be LIS[0] = 3.\nThis solution improves the time complexity from O(2ⁿ) to O(n²), but it increases space complexity to O(n²). We can further optimize space complexity.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(n²) Dynamic programming bottom-up solution func lengthOfLIS(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var lis = Array(repeating: 1, count: n) for i in stride(from: n - 1, to: -1, by: -1) { for j in i + 1 ..\u0026lt; n { if nums[i] \u0026lt; nums[j] { lis[i] = max(lis[i], 1 + lis[j]) } } } return lis.max()! } Explanation From the previous solution, we learned that we can optimize space complexity using a bottom-up dynamic programming approach.\nIn this approach, using the example [1, 2, 4, 3], we start at index 3 and work backwards to index 0.\nWe start at index 3 and find the longest increasing subsequence for this index. Since no values come after index 3, this is our base case, so LIS[3] = 1. The longest increasing subsequence for index 2 could be just 1, or it could be 1 + LIS[3]. However, we can only do 1 + LIS[3] if nums[2] \u0026lt; nums[3]. In our case, this is false because 4 \u0026gt; 3, so LIS[2] = 1. When we move to index 1, we have a choice of value 1. We also have a choice of 1 + LIS[2] because nums[1] \u0026lt; nums[2], and 1 + LIS[3] because nums[1] \u0026lt; nums[3]. Now, to find the longest increasing subsequence starting from index 0, we use all calculated values from previous steps and add them together. Since all values greater than the value at index 0 are in increasing order, LIS[0] = 3. This is a much better solution in terms of space complexity.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-longest-increasing-subsequence/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return the length of the longest strictly increasing subsequence.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [0,1,0,3,2,3]\nOutput: 4\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [7,7,7,7,7,7,7]\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 2500\u003c/li\u003e\n\u003cli\u003e-10⁴ \u0026lt;= nums[i] \u0026lt;= 10⁴\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow-up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?\u003c/p\u003e","title":"LeetCode - Blind 75 - Longest Increasing Subsequence"},{"content":"The problem Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\nExamples Input: s = \u0026#34;leetcode\u0026#34;, wordDict = [\u0026#34;leet\u0026#34;,\u0026#34;code\u0026#34;] Output: true Explanation: Return true because \u0026#34;leetcode\u0026#34; can be segmented as \u0026#34;leet code\u0026#34;. Input: s = \u0026#34;applepenapple\u0026#34;, wordDict = [\u0026#34;apple\u0026#34;,\u0026#34;pen\u0026#34;] Output: true Explanation: Return true because \u0026#34;applepenapple\u0026#34; can be segmented as \u0026#34;apple pen apple\u0026#34;. Note that you are allowed to reuse a dictionary word. Input: s = \u0026#34;catsandog\u0026#34;, wordDict = [\u0026#34;cats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;sand\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;cat\u0026#34;] Output: false Constraints 1 \u0026lt;= s.length \u0026lt;= 300 1 \u0026lt;= wordDict.length \u0026lt;= 1000 1 \u0026lt;= wordDict[i].length \u0026lt;= 20 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique. Recursion solution func wordBreak(_ s: String, _ wordDict: [String]) -\u0026gt; Bool { let sCount = s.count let sArray = Array(s) func dfs(_ i: Int) -\u0026gt; Bool { if i == sCount { return true } for w in wordDict { let wCount = w.count if ((i + wCount) \u0026lt;= sCount \u0026amp;\u0026amp; String(sArray[i ..\u0026lt; i + wCount]) == w ) { if dfs(i + wCount) { return true } } } return false } return dfs(0) } Explanation There are multiple ways to solve this problem. For example, we can check every character in input s and compare it with characters in wordDict, but this approach is inefficient from a time complexity perspective. Instead:\nwe can take an entire word from wordDict, find its length, get a substring with this length from input s, and compare it. This approach is much more efficient because the max size of wordDict is smaller than the max size of input s.\nLet\u0026rsquo;s start by visualizing our problem using a decision tree with input s = “neetcode”, wordDict = [\u0026quot;neet”, “leet”, “code”].\nWe are going to keep track of index i. Our decision tree will have three decisions: \u0026ldquo;neet\u0026rdquo;, \u0026ldquo;leet\u0026rdquo;, \u0026ldquo;code\u0026rdquo;.\nWe check the first 4 characters in s = “neetcode” and compare them. If they match “neet”, “leet”, or “code”, we proceed; otherwise, we stop that path. \u0026ldquo;neet\u0026rdquo; does match, so we create three more decisions, one for each word in wordDict. When we move to the “neet” word, our i pointer becomes 4. After that, we move our pointer and repeat the previous step. If “code” matches one of our options, we update our i pointer by adding 4, making i = 8. Since this is the end of the string, we return true. This is not a very efficient solution because it takes a lot of time, but we can optimize it using caching.\nTime/Space Complexity Time complexity: O(t * m^n) Space complexity: O(n) where n is the length of s, m is the number of words in wordDict, and t is the maximum length of any word in wordDict. Dynamic Programming Top-Down Solution func wordBreak(_ s: String, _ wordDict: [String]) -\u0026gt; Bool { let sCount = s.count let sArray = Array(s) var memo: [Int: Bool] = [sCount : true] func dfs(_ i: Int) -\u0026gt; Bool { if memo[i] != nil { return memo[i]! } for w in wordDict { let wCount = w.count if ((i + wCount) \u0026lt;= sCount \u0026amp;\u0026amp; String(sArray[i ..\u0026lt; i + wCount]) == w ) { if dfs(i + wCount) { memo[i] = true return true } } } memo[i] = false return false } return dfs(0) } Explanation From the previous solution, we learned that using recursion without caching results in a slow algorithm because the decision tree can grow exponentially depending on wordDict input size and the length of s. To avoid repetitive work at the same index i, we use a hash map to store the result. If we ever reach the same index i again, we return the cached result immediately.\nTime/Space Complexity Time complexity: O(n * m * t) Space complexity: O(n) where n is the length of s, m is the number of words in wordDict, and t is the maximum length of any word in wordDict. Dynamic Programming Bottom-Up Solution func wordBreak(_ s: String, _ wordDict: [String]) -\u0026gt; Bool { let sCount = s.count let sArray = Array(s) var dp = Array(repeating: false, count: sCount + 1) dp[sCount] = true for i in stride(from: sCount - 1, to: -1 , by: -1) { for w in wordDict { let wCount = w.count if ((i + wCount) \u0026lt;= sCount \u0026amp;\u0026amp; String(sArray[i ..\u0026lt; i + wCount]) == w) { dp[i] = dp[i + wCount] } if dp[i] { break } } } return dp[0] } Explanation We discovered that our base case will be dp[8], because our input s = “neetcode” has a length of 8. When we reach the last index, we return true.\nNow we apply a bottom-up approach.\nWe iterate through every index in reverse order:\nAt dp[7], dp[6], and dp[5], we get false since there are not enough characters after these indices to form a valid word from wordDict. At dp[4], we set dp[4] = true because it matches \u0026ldquo;code\u0026rdquo;. At dp[3], dp[2], and dp[1], we get false because no words in wordDict start with these characters. Finally, at dp[0], we match \u0026ldquo;neet\u0026rdquo; from wordDict. Since we previously computed dp[4] = true, we set dp[0] = true. Time/Space Complexity Time complexity: O(n * m * t) Space complexity: O(n) where n is the length of s, m is the number of words in wordDict, and t is the maximum length of any word in wordDict. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-word-break/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e and a dictionary of strings \u003ccode\u003ewordDict\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003es\u003c/code\u003e can be segmented into a space-separated sequence of one or more dictionary words.\u003c/p\u003e\n\u003cp\u003eNote that the same word in the dictionary may be reused multiple times in the segmentation.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;leetcode\u0026#34;, wordDict = [\u0026#34;leet\u0026#34;,\u0026#34;code\u0026#34;]\nOutput: true\nExplanation: Return true because \u0026#34;leetcode\u0026#34; can be segmented as \u0026#34;leet code\u0026#34;.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;applepenapple\u0026#34;, wordDict = [\u0026#34;apple\u0026#34;,\u0026#34;pen\u0026#34;]\nOutput: true\nExplanation: Return true because \u0026#34;applepenapple\u0026#34; can be segmented as \u0026#34;apple pen apple\u0026#34;.\nNote that you are allowed to reuse a dictionary word.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;catsandog\u0026#34;, wordDict = [\u0026#34;cats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;sand\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;cat\u0026#34;]\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 300\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= wordDict.length \u0026lt;= 1000\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= wordDict[i].length \u0026lt;= 20\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ewordDict[i]\u003c/code\u003e consist of only lowercase English letters.\u003c/li\u003e\n\u003cli\u003eAll the strings of \u003ccode\u003ewordDict\u003c/code\u003e are unique.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recursion-solution\"\u003eRecursion solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ewordBreak\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ewordDict\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esCount\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esArray\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esCount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ewordDict\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ewCount\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ewCount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003esCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ewCount\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ewCount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eThere are multiple ways to solve this problem. For example, we can check every character in input \u003ccode\u003es\u003c/code\u003e and compare it with characters in \u003ccode\u003ewordDict\u003c/code\u003e, but this approach is inefficient from a time complexity perspective. Instead:\u003c/p\u003e","title":"LeetCode - Blind 75 - Word Break"},{"content":"The problem Given an integer array nums, find a subarray that has the largest product and return the product.\nA subarray is a contiguous, non-empty sequence of elements within an array.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nExamples Input: nums = [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Input: nums = [-2,0,-1] Output: 0 Explanation: The result cannot be 2 because [-2,-1] is not a subarray. Constraints 1 \u0026lt;= nums.length \u0026lt;= 2 * 10⁴ -10 \u0026lt;= nums[i] \u0026lt;= 10 The product of any subarray of nums is guaranteed to fit in a 32-bit integer. Brute force solution func maxProduct(_ nums: [Int]) -\u0026gt; Int { var res = nums[0] let n = nums.count for i in 0 ..\u0026lt; n { var curr = nums[i] res = max(res, curr) for j in i + 1 ..\u0026lt; n { curr *= nums[j] res = max(res, curr) } } return res } Explanation The brute-force way to solve this problem is to try every single subarray and calculate the product for each. This is not very efficient, and the time complexity will be O(n²).\nWe can solve this problem in a more optimal way.\nTime/space complexity Time complexity: O(n²) Space complexity: O(1) Optimized solution func maxProduct(_ nums: [Int]) -\u0026gt; Int { var res = nums[0] var currMin = 1 var currMax = 1 for n in nums { let tmpMax = n * currMax currMax = max(n * currMax, n * currMin, n) currMin = min(tmpMax, n * currMin, n) res = max(res, currMax) } return res } Explanation Let’s look at an example where the input is [1, 2, 3].\nIf all numbers are positive, our product will always be increasing. In this case, we can find the result easily by multiplying all of them to get the maximum product.\nNow, let’s consider a scenario where we have all negative numbers: [-1, -2, -3].\nWe can see that:\nMultiplying the first two elements -1 and -2 results in 2. Multiplying all elements results in -6. We also have another subarray that gives a positive number: the last two elements -2 and -3, which result in 6. So, even though we need to find the maximum product subarray, we also need to keep track of the minimum value as well.\nTo find the maximum product subarray for the entire input, it helps to solve the subproblem of the first two elements first and then use that result to compute the overall solution.\nWe also need to track the minimum subarray product, which in the case of the first two elements is -2. So, we keep track of both the positive and negative values.\nWhen we move to -3, we use the previously calculated values to get a new max (6) and a new min (-6).\nEven if we had an additional positive 4 in our input [-1, -2, -3, 4], we would take the maximum value at that point (6) and multiply it by 4.\nWe must also consider edge cases involving 0. If we have an input like [-1, -2, -3, 0, 3, 5], we need to reset our product when encountering 0 because multiplying any number by 0 results in 0. To avoid this issue, we reset the product to 1 when encountering a 0.\nTime/space complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-maximum-product-subarray/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, find a subarray that has the largest product and return the product.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA subarray is a contiguous, non-empty sequence of elements within an array.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThe test cases are generated so that the answer will fit in a 32-bit integer.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [2,3,-2,4]  \nOutput: 6  \nExplanation: [2,3] has the largest product 6.  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [-2,0,-1]  \nOutput: 0  \nExplanation: The result cannot be 2 because [-2,-1] is not a subarray.  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 2 * 10⁴\u003c/li\u003e\n\u003cli\u003e-10 \u0026lt;= nums[i] \u0026lt;= 10\u003c/li\u003e\n\u003cli\u003eThe product of any subarray of \u003ccode\u003enums\u003c/code\u003e is guaranteed to fit in a 32-bit integer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute force solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emaxProduct\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e*=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eThe brute-force way to solve this problem is to try every single subarray and calculate the product for each. This is not very efficient, and the time complexity will be O(n²).\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-e16e7\" hidden\u003e\n    \u003clabel for=\"zoomCheck-e16e7\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/p-152.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003cbr\u003e\nWe can solve this problem in a more optimal way.\u003c/p\u003e","title":"LeetCode - Blind 75 - Maximum Product Subarray"},{"content":"The problem You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\nExamples Input: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Input: coins = [2], amount = 3 Output: -1 Input: coins = [1], amount = 0 Output: 0 Constraints 1 \u0026lt;= coins.length \u0026lt;= 12 1 \u0026lt;= coins[i] \u0026lt;= 2³¹ - 1 0 \u0026lt;= amount \u0026lt;= 10⁴ Dynamic programming top-down solution func coinChange(_ coins: [Int], _ amount: Int) -\u0026gt; Int { var memo: [Int: Int] = [:] let int1e9 = Int(1e9) func dfs(_ amount: Int) -\u0026gt; Int { if amount == 0 { return 0 } if let val = memo[amount] { return val } var res = int1e9 for coin in coins { if amount - coin \u0026gt;= 0 { res = min(res, 1 + dfs(amount - coin)) } } memo[amount] = res return res } let minCoins = dfs(amount) if minCoins \u0026gt;= int1e9 { return -1 } else { return minCoins } } Explanation One of the ways that we can solve this problem is by using a depth-first search algorithm with memoization to optimize the overall time complexity.\nFor example, if we have input [1,3,4,5] and amount = 7, this means that in our decision tree, we have four possible choices.\nWe can choose 1, 3, 4, or 5, and The remainder amount will be 6, 4, 3, and 2 respectively. If we continue going down the path of 5 and choose 2, we still have an unlimited quantity of coins. We can choose 1, 3, 4, or 5.\nIf we choose coin 1, we will have a remainder amount of 1. If we choose coin 3, we get a negative -1, which tells us that 5 + 3 cannot be our amount, and we don\u0026rsquo;t need to continue searching that path. Now, if we choose coin 1, we can also choose 3, 4, 5, but we see that it won’t work because we will end up with negative values.\nIf we choose 1, we finally get to 0, meaning we took 5, then 1, then 1. Counting the coins used, we see that we needed 3 coins. This means we found one possible way to sum up to amount = 7, and we have a working algorithm that provides a solution.\nFrom the above, we learn that we need to take care of two base cases:\nWhen the amount reaches 0, and When the amount is less than 0. We can also see that we can break down the problem into subproblems, and these subproblems repeat themselves.\nFor example, if we have an amount of 1, we don’t need to compute it because we already know that we only need a single coin 1 to reduce it to 0. Since that subproblem repeats, we can store its result instead of recomputing it.\nThis solution is called the dynamic programming top-down approach with memoization.\nTime/space complexity Time complexity: O(n) Space complexity: O(n) Dynamic programming bottom-up solution func coinChange(_ coins: [Int], _ amount: Int) -\u0026gt; Int { var dp = Array(repeating: amount + 1, count: amount + 1) dp[0] = 0 for a in 1 ..\u0026lt; amount + 1 { for c in coins { if a - c \u0026gt;= 0 { dp[a] = min(dp[a], 1 + dp[a - c]) } } } if dp[amount] != amount + 1 { return dp[amount] } else { return -1 } } Explanation We can also solve this problem with a dynamic programming bottom-up algorithm. Instead of solving the original problem with amount = 7, we solve it in reverse order.\nWe start with the smallest amount, 0.\nWe want to know the minimum number of coins required to sum to 0, which we call dp[0]. We know that it takes 0 coins.\nWhen we want to know the minimum number of coins needed to sum up to 1, we can take only 1 coin. Then, we repeat that process.\nFor dp[2], we take 1 + dp[1], resulting in dp[2] = 2. We repeat this process all the way to 7.\nThe computed version of all values will look like this:\nTo compute dp[7], we take 1 + dp[6], which results in 3, but this is not the minimal solution.\nIf we take coin 3, we need 1 + dp[4] = 2, because amount 7 - 3 = 4.\nWe need to compute all our values from input = [1, 3, 4, 5]. We have already computed values 1 and 3, so now we compute the rest. If we take coin 4, the result of 1 + dp[3] will be 2. If we take coin 5, the result of 1 + dp[2] will be 3. Lastly, we find the minimum of the computed values, so the result is 2.\nTime/space complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-coin-change/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003ecoins\u003c/code\u003e representing coins of different denominations and an integer \u003ccode\u003eamount\u003c/code\u003e representing a total amount of money.\u003c/p\u003e\n\u003cp\u003eReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou may assume that you have an infinite number of each kind of coin.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: coins = [2], amount = 3\nOutput: -1\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: coins = [1], amount = 0\nOutput: 0\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= coins.length \u0026lt;= 12\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= coins[i] \u0026lt;= 2³¹ - 1\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= amount \u0026lt;= 10⁴\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"dynamic-programming-top-down-solution\"\u003eDynamic programming top-down solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ecoinChange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ecoins\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[:]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eint1e9\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eint1e9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ecoin\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ecoins\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecoin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecoin\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eminCoins\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eminCoins\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eint1e9\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eminCoins\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eOne of the ways that we can solve this problem is by using a depth-first search algorithm with memoization to optimize the overall time complexity.\u003c/p\u003e","title":"LeetCode - Blind 75 - Coin Change"},{"content":"The Problem You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\n\u0026quot;1\u0026quot; → 'A' \u0026quot;2\u0026quot; → 'B' … \u0026quot;25\u0026quot; → 'Y' \u0026quot;26\u0026quot; → 'Z' However, while decoding the message, you realize that there are many different ways to decode it because some codes are contained within others (e.g., \u0026quot;2\u0026quot; and \u0026quot;5\u0026quot; vs. \u0026quot;25\u0026quot;).\nFor example, \u0026quot;11106\u0026quot; can be decoded into:\n\u0026quot;AAJF\u0026quot; with the grouping (1, 1, 10, 6) \u0026quot;KJF\u0026quot; with the grouping (11, 10, 6) The grouping (1, 11, 06) is invalid because \u0026quot;06\u0026quot; is not a valid code (only \u0026quot;6\u0026quot; is valid). Note: There may be strings that are impossible to decode.\nGiven a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.\nThe test cases are generated so that the answer fits in a 32-bit integer.\nExamples Input: s = \u0026#34;12\u0026#34; Output: 2 Explanation: \u0026#34;12\u0026#34; could be decoded as \u0026#34;AB\u0026#34; (1 2) or \u0026#34;L\u0026#34; (12). Input: s = \u0026#34;226\u0026#34; Output: 3 Explanation: \u0026#34;226\u0026#34; could be decoded as \u0026#34;BZ\u0026#34; (2 26), \u0026#34;VF\u0026#34; (22 6), or \u0026#34;BBF\u0026#34; (2 2 6). Input: s = \u0026#34;06\u0026#34; Output: 0 Explanation: \u0026#34;06\u0026#34; cannot be mapped to \u0026#34;F\u0026#34; because of the leading zero (\u0026#34;6\u0026#34; is different from \u0026#34;06\u0026#34;). In this case, the string is not a valid encoding, so return 0. Constraints 1 \u0026lt;= s.length \u0026lt;= 100 s contains only digits and may contain leading zeros. Depth-First Search Solution func numDecodings(_ s: String) -\u0026gt; Int { let n = s.count let sArray = Array(s) var dp: [Int: Int] = [n: 1] func dfs(_ i: Int) -\u0026gt; Int { if let cachedResult = dp[i] { return cachedResult } if sArray[i] == \u0026#34;0\u0026#34; { return 0 } var res = dfs(i + 1) if i + 1 \u0026lt; n \u0026amp;\u0026amp; (sArray[i] == \u0026#34;1\u0026#34; || (sArray[i] == \u0026#34;2\u0026#34; \u0026amp;\u0026amp; \u0026#34;0123456\u0026#34;.contains(sArray[i + 1]))) { res += dfs(i + 2) } dp[i] = res return res } return dfs(0) } Explanation From the problem description, we learn that each character can be decoded to a specific letter.\nFrom the first example, we see that \u0026quot;12\u0026quot; can be decoded as \u0026quot;AB\u0026quot; because \u0026quot;1\u0026quot; maps to \u0026quot;A\u0026quot; and \u0026quot;2\u0026quot; maps to \u0026quot;B\u0026quot;, but it can also be decoded as \u0026quot;L\u0026quot;. As a result, we return 2 as the output.\nLooking at the example above, we see that the complexity of this problem comes from double digits. Single digits from 1 to 9 can be easily mapped, but when we have double digits, we must make a decision between two possible interpretations. So, we will use a decision tree to determine all possible decodings from the input.\nThe only issue arises with edge cases. For example, when the input is \u0026quot;06\u0026quot;, \u0026quot;0\u0026quot; does not map to any letter. If a string starts with \u0026quot;0\u0026quot;, it is invalid and should return 0 because it cannot be decoded in any way.\nSimilarly, when we have an input like \u0026quot;27\u0026quot;, we cannot include it in the two-character mapping since we only allow numbers \u0026lt;= 26 (as the alphabet has only 26 letters).\nLet’s analyze an example with input \u0026quot;121\u0026quot; and try to solve it using a brute-force approach:\nStarting from the beginning:\nWe can take \u0026quot;1\u0026quot; by itself. We can also take the first two characters \u0026quot;12\u0026quot;. From position \u0026quot;1\u0026quot;, we can take \u0026quot;2\u0026quot; or \u0026quot;21\u0026quot;. When we reach \u0026quot;21\u0026quot;, we can’t make further decisions since we\u0026rsquo;ve reached the end of the string. From \u0026quot;2\u0026quot;, we can take \u0026quot;1\u0026quot;, and we reach the end. If we start from \u0026quot;12\u0026quot;, we are left with one character \u0026quot;1\u0026quot;. Thus, there are three different ways to solve this case.\nWe will use Depth-First Search (DFS) and store results in a hash map to reduce the overall time complexity.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Dynamic Programming Solution func numDecodings(_ s: String) -\u0026gt; Int { let n = s.count let sArray = Array(s) var dp: [Int: Int] = [n: 1] for i in stride(from: n - 1, through: 0, by: -1) { if sArray[i] == \u0026#34;0\u0026#34; { dp[i] = 0 } else { dp[i] = dp[i + 1] } if i + 1 \u0026lt; n \u0026amp;\u0026amp; (sArray[i] == \u0026#34;1\u0026#34; || (sArray[i] == \u0026#34;2\u0026#34; \u0026amp;\u0026amp; \u0026#34;0123456\u0026#34;.contains(sArray[i + 1]))) { dp[i]! += dp[i + 2]! } } return dp[0]! } Explanation In the previous solution, we used recursion and additional memory to solve the problem, but we can actually optimize it using a true dynamic programming approach.\nWe split the problem into smaller subproblems and find a solution iteratively.\nFor example, with input \u0026quot;121\u0026quot;:\nWe take the first \u0026quot;1\u0026quot; and ask how many ways we can decode the remaining \u0026quot;21\u0026quot;. If we take \u0026quot;12\u0026quot;, we then ask how many ways we can decode \u0026quot;1\u0026quot;. Each subproblem corresponds to some portion of the string.\nThis solution takes O(n) space, but we can optimize further and solve it in O(1) space by removing the hash map and using two variables instead.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Dynamic Programming (Space-Optimized) Solution func numDecodings(_ s: String) -\u0026gt; Int { let n = s.count let sArray = Array(s) var dp = 0 var dp2 = 0 var dp1 = 1 for i in stride(from: n - 1, to: -1 , by: -1) { if sArray[i] == \u0026#34;0\u0026#34; { dp = 0 } else { dp = dp1 } if (i + 1 \u0026lt; n \u0026amp;\u0026amp; (sArray[i] == \u0026#34;1\u0026#34; || sArray[i] == \u0026#34;2\u0026#34; \u0026amp;\u0026amp; \u0026#34;0123456\u0026#34;.contains(sArray[i + 1]) ) ) { dp += dp2 } let tmpDp = dp let tmpDp1 = dp1 dp = 0 dp1 = tmpDp dp2 = tmpDp1 } return dp1 } Explanation When decoding an entire string, we:\nConsider \u0026quot;1\u0026quot; alone and shift the pointer to \u0026quot;21\u0026quot; to solve that subproblem. Consider \u0026quot;12\u0026quot; together and solve the subproblem \u0026quot;1\u0026quot;. To compute dp[i], we only need dp[i + 1] and dp[i + 2], so instead of storing all values, we use just two variables.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-decode-ways/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eYou have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026quot;1\u0026quot;\u003c/code\u003e → \u003ccode\u003e'A'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026quot;2\u0026quot;\u003c/code\u003e → \u003ccode\u003e'B'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e…\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026quot;25\u0026quot;\u003c/code\u003e → \u003ccode\u003e'Y'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026quot;26\u0026quot;\u003c/code\u003e → \u003ccode\u003e'Z'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, while decoding the message, you realize that there are many different ways to decode it because some codes are contained within others (e.g., \u003ccode\u003e\u0026quot;2\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;5\u0026quot;\u003c/code\u003e vs. \u003ccode\u003e\u0026quot;25\u0026quot;\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eFor example, \u003ccode\u003e\u0026quot;11106\u0026quot;\u003c/code\u003e can be decoded into:\u003c/p\u003e","title":"LeetCode - Blind 75 - Decode Ways"},{"content":"The Problem Given a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string.\nExamples Input: s = \u0026#34;abc\u0026#34; Output: 3 Explanation: Three palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;. Input: s = \u0026#34;aaa\u0026#34; Output: 6 Explanation: Six palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aaa\u0026#34;. Constraints 1 \u0026lt;= s.length \u0026lt;= 1000 s consists of lowercase English letters. Brute Force Solution func countSubstrings(_ s: String) -\u0026gt; Int { let n = s.count let sArray = Array(s) var res = 0 for i in 0 ..\u0026lt; n { for j in i ..\u0026lt; n { var l = i var r = j while l \u0026lt; r \u0026amp;\u0026amp; sArray[l] == sArray[r] { l += 1 r -= 1 } res += (l \u0026gt;= r) ? 1 : 0 } } return res } Explanation We can solve this problem by understanding how a brute-force approach works and then optimizing it.\nLet\u0026rsquo;s say we are given a string s = \u0026quot;aaab\u0026quot;. If we start brute-forcing it, we need to go through every single substring starting from the first position, and it will look like this:\nIn total, there will be n^2 substrings, and for each substring, we need to determine if it is a palindrome. This check takes O(n), because we use two pointers to compare characters.\nThus, the overall time complexity will be O(n³).\nWe can improve time complexity by using a dynamic programming algorithm.\nTime/Space Complexity Time complexity: O(n³) Space complexity: O(1) Dynamic Programming Solution func countSubstrings(_ s: String) -\u0026gt; Int { let n = s.count let sArray = Array(s) var res = 0 var dp = Array(repeating: Array(repeating: false, count: n), count: n) for i in stride(from: n - 1, to: -1, by: -1) { for j in i ..\u0026lt; n { if sArray[i] == sArray[j] \u0026amp;\u0026amp; (j - i \u0026lt;= 2 || dp[i + 1][j - 1]) { dp[i][j] = true res += 1 } } } return res } Explanation We can optimize the brute-force solution using a dynamic programming approach, but this requires additional memory.\nWe use a dp 2D array to keep track of palindromic substrings. res is a variable to keep count of the number of palindromic substrings. We iterate through the string in reverse order and use an inner loop to iterate from i to the end.\nNext, we check if the characters are equal and either:\nThe substring is of length ≤ 2, or The inner substring is already a palindrome (checked using dp[i + 1][j - 1]). When we find a palindrome, we update res. Finally, we return res.\nWe can further reduce space complexity by solving this problem using the two-pointers technique.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(n²) Two Pointers Solution func countSubstrings(_ s: String) -\u0026gt; Int { let n = s.count let sArray = Array(s) var res = 0 for i in 0 ..\u0026lt; n { // odd-length palindromes var l = i var r = i while l \u0026gt;= 0 \u0026amp;\u0026amp; r \u0026lt; n \u0026amp;\u0026amp; sArray[l] == sArray[r] { res += 1 l -= 1 r += 1 } // even-length palindromes l = i r = i + 1 while l \u0026gt;= 0 \u0026amp;\u0026amp; r \u0026lt; n \u0026amp;\u0026amp; sArray[l] == sArray[r] { res += 1 l -= 1 r += 1 } } return res } Explanation We can optimize the brute-force solution by solving it in a different way.\nInstead of checking every substring, we expand outward from each character, treating it as the center of a palindrome.\nWe initialize two pointers (l and r) at the same position and expand outward. If characters match, we count that substring as a palindrome. We repeat this for both odd-length (single center) and even-length (two centers) palindromes. At every step, we expand l to the left and r to the right, counting palindromic substrings until we go out of bounds.\nBy using this two-pointers approach, we avoid repeated work, reducing overall time complexity and space complexity.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-palindromic-substrings/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, return the number of palindromic substrings in it.\u003c/p\u003e\n\u003cp\u003eA string is a \u003cstrong\u003epalindrome\u003c/strong\u003e when it reads the same backward as forward.\u003c/p\u003e\n\u003cp\u003eA \u003cstrong\u003esubstring\u003c/strong\u003e is a contiguous sequence of characters within the string.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;abc\u0026#34;\nOutput: 3\nExplanation: Three palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;aaa\u0026#34;\nOutput: 6\nExplanation: Six palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aaa\u0026#34;.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 1000\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ecountSubstrings\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esArray\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003el\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003er\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can solve this problem by understanding how a brute-force approach works and then optimizing it.\u003c/p\u003e","title":"LeetCode - Blind 75 - Palindromic Substrings"},{"content":"The Problem Given a string s, return the longest palindromic substring in s.\nA string is palindromic if it reads the same forward and backward.\nExamples Input: s = \u0026#34;babad\u0026#34; Output: \u0026#34;bab\u0026#34; Explanation: \u0026#34;aba\u0026#34; is also a valid answer. Input: s = \u0026#34;cbbd\u0026#34; Output: \u0026#34;bb\u0026#34; Constraints 1 \u0026lt;= s.length \u0026lt;= 1000 s consists of only digits and English letters. Brute Force Solution func longestPalindrome(_ s: String) -\u0026gt; String { let sArray = Array(s) var res = \u0026#34;\u0026#34; var resLen = 0 let n = s.count for i in 0 ..\u0026lt; n { for j in i ..\u0026lt; n { var l = i var r = j while l \u0026lt; r \u0026amp;\u0026amp; sArray[l] == sArray[r] { l += 1 r -= 1 } if l \u0026gt;= r \u0026amp;\u0026amp; resLen \u0026lt; (j - i + 1) { res = String(sArray[i ..\u0026lt; j + 1]) resLen = j - i + 1 } } } return res } Explanation In the first example, we are given the input \u0026quot;babad\u0026quot;. Let’s visualize it and try to find the longest palindromic substring.\nAs you can see, we have two different palindromic substrings: \u0026quot;bab\u0026quot; and \u0026quot;aba\u0026quot;, so we could return either of these.\nThe brute force solution to this problem involves checking every single substring, verifying if it\u0026rsquo;s a palindrome, and finding the longest one.\nThis solution is not very efficient because we need to scan through the entire string and check every substring. As a result, the time complexity is O(n * n^2) -\u0026gt; O(n^3).\nTime/Space Complexity Time complexity: O(n³) Space complexity: O(1) Dynamic Programming Solution func longestPalindrome(_ s: String) -\u0026gt; String { var resIdx = 0 var resLen = 0 let n = s.count let sArray = Array(s) var dp: [[Bool]] = Array(repeating: Array(repeating: false, count: n), count: n) for i in stride(from: n - 1, to: -1, by: -1) { for j in i ..\u0026lt; n { if sArray[i] == sArray[j] \u0026amp;\u0026amp; (j - i \u0026lt;= 2 || dp[i + 1][j - 1]) { dp[i][j] = true if resLen \u0026lt; (j - i + 1) { resIdx = i resLen = j - i + 1 } } } } return String(sArray[resIdx ..\u0026lt; resIdx + resLen]) } Explanation Another way to solve this problem is by using a dynamic programming algorithm.\nWe create resIdx to store the starting index of the result. resLen stores the length of the result. dp is a 2D array to keep track of palindromic substrings. After that, we iterate through the string in reverse and use an inner loop to iterate from i to the end.\nNext, we check if the characters are equal and either:\nThe substring is shorter than or equal to length 3, or The inner substring is already a palindrome. When we find a palindrome, we check if it\u0026rsquo;s longer than the current result. If so, we update our pointers.\nFinally, we return the result substring using the calculated pointers.\nThis is not a very efficient solution in terms of space complexity. We can improve it using the two-pointer technique.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(n²) Two-Pointer Solution func longestPalindrome(_ s: String) -\u0026gt; String { var resIdx = 0 var resLen = 0 let n = s.count let sArray = Array(s) for i in 0 ..\u0026lt; n { // Odd length var l = i var r = i while l \u0026gt;= 0 \u0026amp;\u0026amp; r \u0026lt; n \u0026amp;\u0026amp; sArray[l] == sArray[r] { if (r - l + 1) \u0026gt; resLen { resIdx = l resLen = r - l + 1 } l -= 1 r += 1 } // Even length l = i r = i + 1 while l \u0026gt;= 0 \u0026amp;\u0026amp; r \u0026lt; n \u0026amp;\u0026amp; sArray[l] == sArray[r] { if (r - l + 1) \u0026gt; resLen { resIdx = l resLen = r - l + 1 } l -= 1 r += 1 } } return String(sArray[resIdx ..\u0026lt; resIdx + resLen]) } Explanation Finally, we can solve this problem in a space-optimized way using the two-pointer technique.\nLet\u0026rsquo;s visualize how we can check if a substring is a palindrome using the example \u0026quot;bab\u0026quot;:\nWe can check if it\u0026rsquo;s a palindrome by starting from the outside and comparing the characters. As long as they are equal, we continue until we reach the middle, confirming it is a palindrome. Another way:\nWe can start in the middle, expand outward, and check if it’s a palindrome that way. You can see that the second method is more efficient, so we will use this approach.\nFor each character, we consider it as the center and expand outward. Since we take each character (n) and expand outward (n), the overall time complexity is O(n²).\nFinally, we need to handle one edge case: checking for palindromes of even length.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-longest-palindromic-substring/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, return the longest palindromic substring in \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA string is palindromic if it reads the same forward and backward.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;babad\u0026#34;\nOutput: \u0026#34;bab\u0026#34;\nExplanation: \u0026#34;aba\u0026#34; is also a valid answer.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;cbbd\u0026#34;\nOutput: \u0026#34;bb\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 1000\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of only digits and English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003elongestPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esArray\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eresLen\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003el\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003er\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eresLen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eresLen\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eIn the first example, we are given the input \u003ccode\u003e\u0026quot;babad\u0026quot;\u003c/code\u003e. Let’s visualize it and try to find the longest palindromic substring.\u003c/p\u003e","title":"LeetCode - Blind 75 - Longest Palindromic Substring"},{"content":"The problem You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses in this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses are broken into on the same night.\nGiven an integer array nums representing the amount of money in each house, return the maximum amount of money you can rob tonight without alerting the police.\nExamples Input: nums = [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2) because they are adjacent houses. Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Input: nums = [1,2,3] Output: 3 Constraints 1 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 1000 Depth-first search (memoization) solution func rob(_ nums: [Int]) -\u0026gt; Int { let n = nums.count if n == 1 { return nums[0] } var memo: [Index: Int] = [:] func dfs(_ i: Int, _ flag: Bool) -\u0026gt; Int { if i \u0026gt;= n || (flag \u0026amp;\u0026amp; i == n - 1) { return 0 } if memo[Index(i, flag)] != nil { return memo[Index(i, flag)]! } memo[Index(i, flag)] = max(dfs(i + 1, flag), nums[i] + dfs(i + 2, flag || i == 0)) return memo[Index(i, flag)]! } return max(dfs(0, true), dfs(1, false)) } struct Index: Hashable { let i: Int let flag: Bool init(_ i: Int, _ flag: Bool) { self.i = i self.flag = flag } } Explanation This problem is very similar to the first House Robber problem. The main difference is that the last house is connected to the first.\nWe can reuse the solution from the first House Robber problem.\nLet\u0026rsquo;s take a closer look at both of these problems.\nIn the first House Robber problem:\nWe can find the max amount we can rob until the second house; the total will be 2. Next, we can find the max amount we can rob until the third house; the total will be 3. Lastly, when looking at the entire array, we can rob house three, skip house two, and rob house one, giving a total of 4. When looking at the second House Robber problem, we see that we need to make some adjustments to reuse the solution from the first problem because the first and last houses are connected.\nWe can reuse the solution from the first problem by robbing the entire array except for the last value. We can also run the reused solution on the entire array except for the first value.\nOne way to solve this problem is by using the DFS algorithm with memoization. We can reuse the algorithm from the first problem by adjusting it slightly. We will add an additional flag and a base case to detect a cycle between the last and first houses.\nThis solution does not follow the dynamic programming category; it\u0026rsquo;s a more brute-force way of solving this type of problem. We can rewrite it using true dynamic programming.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Dynamic programming solution func rob(_ nums: [Int]) -\u0026gt; Int { let n = nums.count if n == 1 { return nums[0] } return max(helper(Array(nums[1...])), helper(Array(nums[0..\u0026lt;n - 1]))) } func helper(_ nums: [Int]) -\u0026gt; Int { let n = nums.count if n == 0 { return 0 } if n == 1 { return nums[0] } var dp = Array(repeating: 0, count: n) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in 2 ..\u0026lt; n { dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]) } return dp.last! } Explanation Another way to solve this problem is by using the dynamic programming algorithm.\nWe will need a helper function that we can reuse from the first House Robber problem. We will call it on two subarrays:\nThe first subarray excludes the first house. The second subarray excludes the last house. In the end, we will find the max result.\nThis solution takes O(n) space, but we can optimize memory by replacing the dp array with two properties.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Dynamic programming (space optimized) solution func rob(_ nums: [Int]) -\u0026gt; Int { let n = nums.count return max(nums[0], helper(Array(nums[1...])), helper(Array(nums[0..\u0026lt;n - 1]))) } func helper(_ nums: [Int]) -\u0026gt; Int { var rob1 = 0 var rob2 = 0 for n in nums { let newRob = max(rob1 + n, rob2) rob1 = rob2 rob2 = newRob } return rob2 } Explanation Lastly, we can solve this problem using a space-optimized dynamic programming algorithm.\nBasically, we maintain two properties that store the max amount that can be robbed from the previous two houses.\nWe iterate over every house in the input array and compute the max that can be robbed up to that point by choosing between robbing house one and skipping house two, or skipping rob1 and including rob2. We then update our properties. As a result, rob2 will contain the maximum amount that can be robbed. We also need to handle a few edge cases:\nWe need to skip the first house. We also need to skip the last house. The last edge case occurs when the input array contains only one element, so we need to include the first element to avoid a result of 0. Time/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-house-robber-ii/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses in this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses are broken into on the same night.\u003c/p\u003e","title":"LeetCode - Blind 75 - House Robber II"},{"content":"The Problem You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. The only constraint stopping you from robbing each of them is that adjacent houses have security systems connected, and they will automatically contact the police if two adjacent houses are broken into on the same night.\nGiven an integer array nums representing the amount of money in each house, return the maximum amount of money you can rob tonight without alerting the police.\nExamples Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Constraints 1 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 400 Depth-First Search (Memoization) Solution func rob(_ nums: [Int]) -\u0026gt; Int { let n = nums.count var memo: [Int: Int] = [:] func dfs(_ i: Int) -\u0026gt; Int { if i \u0026gt;= n { return 0 } if let cached = memo[i] { return cached } memo[i] = max(dfs(i + 1), nums[i] + dfs(i + 2)) return memo[i]! } return dfs(0) } Explanation From the problem description, we learn that we are given an array where each element represents a house, and they are adjacent to each other. We also learn that we can\u0026rsquo;t rob every house because there is a restriction: we can only rob houses that are not adjacent to each other.\nThis problem belongs to the dynamic programming category. Let\u0026rsquo;s draw a decision tree using the example nums = [1,2,3,1].\nWe start at 1. We can\u0026rsquo;t rob 2 because it\u0026rsquo;s adjacent to 1, so we need to decide whether to rob 3 or 1. We choose to rob houses 1 and 3, giving us a total of 4.\nIf we decide to rob house 2, we can only rob house 4, resulting in a total of 3, which is not the optimal solution since we already found a greater total of 4.\nThis is a brute-force approach. Imagine if we had more numbers—our decision tree would grow exponentially, making it very complex. We can improve this by identifying subproblems.\nLet\u0026rsquo;s analyze the subproblem:\nWe have two choices to maximize our total robbery amount:\nRob the first house, then find the maximum from the remaining houses. Skip the first house and find the maximum in the subarray excluding the first value. In our first decision, we rob the first value, so we skip index 1 and rob the remaining array from index 2 to n. In code, this looks like rob = arr[0] + rob[2:n].\nIf we do not rob the first house, we solve the subproblem by starting from house 1 and continuing until the end of the array.\nEach robbery decision can be broken into subproblems:\nIf we rob the first house, we get a total of 1. Next, we decide whether to rob house 2, which has a larger total of 2. Then, we decide whether to rob house 3 (which includes robbing house 1) or just rob house 2. The maximum choice is robbing house 3 and house 1, giving a total of 4. Lastly, we decide between robbing house 4 and house 1, or robbing house 4 and house 2. The best choice is robbing house 4 and house 2, totaling 3. Time and Space Complexity Time Complexity: O(n) Space Complexity: O(n) Dynamic Programming Solution func rob(_ nums: [Int]) -\u0026gt; Int { let n = nums.count if n == 1 { return nums[0] } var dp = Array(repeating: 0, count: n) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in 2 ..\u0026lt; n { dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]) } return dp.last! } Explanation We can also solve this problem using a dynamic programming approach. The main idea remains the same as explained above, but instead of recursion, we use an array and iteration.\nThis approach takes O(n) space, but we can optimize it further to O(1) space by using two variables instead of an additional array.\nTime and Space Complexity Time Complexity: O(n) Space Complexity: O(n) Dynamic Programming (Space Optimized) Solution func rob(_ nums: [Int]) -\u0026gt; Int { var rob1 = 0 var rob2 = 0 for n in nums { let temp = max(n + rob1, rob2) rob1 = rob2 rob2 = temp } return rob2 } Explanation We don\u0026rsquo;t need an additional array to store values because we only need to track the last two computed results.\nThis works because we either decide to rob the fourth house and the first and second house (excluding 3), totaling 2,\nor we skip robbing the fourth house and rob the first, second, and third houses, totaling 4.\nWe\u0026rsquo;ve learned that we only need to maintain the last two max values we can rob. Instead of using an array, we use two variables and iterate through nums, computing the maximum at each step:\nn + rob1 represents robbing the current house (with a gap from the previous one). rob2 represents skipping the current house and keeping the previous max. We update the variables accordingly. Time and Space Complexity Time Complexity: O(n) Space Complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-house-robber/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. The only constraint stopping you from robbing each of them is that adjacent houses have security systems connected, and they will automatically contact the police if two adjacent houses are broken into on the same night.\u003c/p\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e representing the amount of money in each house, return the maximum amount of money you can rob tonight without alerting the police.\u003c/p\u003e","title":"LeetCode - Blind 75 - House Robber"},{"content":"The problem You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExamples Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Input: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step Constraints 1 \u0026lt;= n \u0026lt;= 45 Brute Force Solution func climbStairs(_ n: Int) -\u0026gt; Int { func dfs(_ i: Int) -\u0026gt; Int { if i \u0026gt;= n { return i == n ? 1 : 0 } return dfs(i + 1) + dfs(i + 2) } return dfs(0) } Explanation Let\u0026rsquo;s visualize and look at the first example Input: n = 2,\nYou can see that we can take two single steps or we can take one double step at once and find out that we have two different ways to solve this problem.\nLet\u0026rsquo;s look at another example Input: n = 3\nYou can see that we can find the solution by taking 1 step and 2 steps, 2 steps and 1 step, or taking 1 single step three times.\nFrom the visualization above, you can see that it’s hard to visualize examples like a bar graph. A better way to do it is by visualizing it as a decision tree.\nFor example, Input: n = 5\nOne way to solve this problem is by using a depth-first search algorithm and recursively finding all possible solutions. However, it could be problematic because it uses O(2^n) time complexity, which could be very slow and even exceed all available memory due to recursion stack calls.\nTime/Space Complexity Time complexity: O(2^n) Space complexity: O(n) Dynamic Programming (Bottom-Up) Solution func climbStairs(_ n: Int) -\u0026gt; Int { if n \u0026lt;= 2 { return n } var dp = Array(repeating: 0, count: n + 1) dp[1] = 1 dp[2] = 2 for i in 3 ..\u0026lt; n + 1 { dp[i] = dp[i - 1] + dp[i - 2] } return dp[n] } Explanation Another way we can solve this problem is by using true dynamic programming.\nAs you can see, starting from 0, the result depends on subproblem 1, subproblem 1 depends on subproblem 2, and so on, until it finally depends on our base case 5. Why don’t we start from the bottom, solve our base case, and work our way up to the original problem at 0? (This is called the bottom-up dynamic programming approach.)\nWe will be storing our result in an array called dp. We are going to have positions in dp from position 0 all the way up to n.\nInitially, at the base case of 5, we can take only one step. Now, when we solve 5, we can solve 4 because subproblem 4 depends on subproblem 5. From 4, we can take one step, which leads to our result, or we can take two steps, which leads us out of bounds. As a result, we have only one way to solve subproblem 4. Then we want to know how many ways from 3 we can reach 5. The subproblem 3 depends on two subproblems that come after it: 4 and 5. So, we can take one step or two steps. As a result, to solve subproblem 3, we take the next two values from dp and add them together. We continue the same process for positions 2, 1, and 0. The complexity of the dynamic programming solution is much better than the recursive solution, taking O(n) time and O(n) space. However, we can optimize it even further to O(n) time and O(1) space.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Dynamic Programming (Space Optimized) Solution func climbStairs(_ n: Int) -\u0026gt; Int { var one = 1 var two = 1 for i in 0 ..\u0026lt; n - 1 { let tmp = one one = one + two two = tmp } return one } Explanation From the picture above, you can notice that each value in the dp array depends on the two values that come after it. For example, 8 depends on 5 and 3, etc.\nAs a result, we don’t need to store the entire array. Instead, we can use two different variables.\nLet’s initialize one and two properties to represent steps and help us compute the next value. Once we compute the next value, we shift one and two variables and keep doing it until we get to the result at 0.\nIf we initialize one and two properties with the value 1, we need to compute n-1 values and return the result stored in one.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-climbing-stairs/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are climbing a staircase. It takes \u003ccode\u003en\u003c/code\u003e steps to reach the top.\u003c/p\u003e\n\u003cp\u003eEach time you can either climb \u003ccode\u003e1\u003c/code\u003e or \u003ccode\u003e2\u003c/code\u003e steps. In how many distinct ways can you climb to the top?\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 45\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eclimbStairs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s visualize and look at the first example \u003ccode\u003eInput: n = 2\u003c/code\u003e,\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7694a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7694a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/p-70.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003cbr\u003e\nYou can see that we can take two single steps or we can take one double step at once and find out that we have two different ways to solve this problem.\u003c/p\u003e","title":"LeetCode - Blind 75 - Climbing Stairs"},{"content":"The Problem There is a new alien language that uses the English alphabet. However, the order of the letters is unknown to you.\nYou are given a list of strings words from the alien language\u0026rsquo;s dictionary. It is claimed that the strings in words are sorted lexicographically by the rules of this new language.\nA string a is lexicographically smaller than a string b if, in the first position where a and b differ, string a has a letter that appears earlier in the alien language than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the shorter string is the lexicographically smaller one.\nIf this claim is incorrect and the given arrangement of strings in words cannot correspond to any order of letters, return \u0026quot;\u0026quot;.\nOtherwise, return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language\u0026rsquo;s rules. If there are multiple solutions, return any of them.\nExamples Input: words = [\u0026#34;wrt\u0026#34;,\u0026#34;wrf\u0026#34;,\u0026#34;er\u0026#34;,\u0026#34;ett\u0026#34;,\u0026#34;rftt\u0026#34;] Output: \u0026#34;wertf\u0026#34; Input: words = [\u0026#34;z\u0026#34;,\u0026#34;x\u0026#34;] Output: \u0026#34;zx\u0026#34; Input: words = [\u0026#34;z\u0026#34;,\u0026#34;x\u0026#34;,\u0026#34;z\u0026#34;] Output: \u0026#34;\u0026#34; Explanation: The order is invalid, so return \u0026#34;\u0026#34;. Constraints 1 \u0026lt;= words.length \u0026lt;= 100 1 \u0026lt;= words[i].length \u0026lt;= 100 words[i] consists of only lowercase English letters. Depth-First Search Solution func alienOrder(_ words: [String]) -\u0026gt; String { var adj: [Character: Set\u0026lt;Character\u0026gt;] = [:] for w in words { for c in w { adj[c] = [] } } for i in 0 ..\u0026lt; words.count - 1 { let w1 = Array(words[i]) let w2 = Array(words[i + 1]) let minLen = min(w1.count, w2.count) if w1.count \u0026gt; w2.count \u0026amp;\u0026amp; String(w1.prefix(minLen)) == String(w2.prefix(minLen)) { return \u0026#34;\u0026#34; } for j in 0 ..\u0026lt; minLen { if w1[j] != w2[j] { adj[w1[j], default: []].insert(w2[j]) break } } } var visit: [Character: Bool] = [:] var res: [Character] = [] func dfs(_ c: Character) -\u0026gt; Bool { if visit[c] != nil { return visit[c]! } visit[c] = true for nei in adj[c]! { if dfs(nei) { return true } } visit[c] = false res.append(c) return false } for c in adj.keys { if dfs(c) { return \u0026#34;\u0026#34; } } return String(res.reversed()) } Explanation From the description, we learn that we need to figure out the ordering of the alien alphabet. We know that the English language has the ordering abc…z with 26 characters, but in this problem, they state that we have a different ordering of these characters, and our goal is to find out this ordering.\nTo determine the ordering, we will compare each character in adjacent words. If a character in the second word comes before the corresponding character in the first word, we will update the ordering. For example, given the words [\u0026quot;apple\u0026quot;, \u0026quot;ape\u0026quot;], we realize that \u0026quot;ape\u0026quot; should come before \u0026quot;apple\u0026quot;.\nLet\u0026rsquo;s visualize the first example given in the problem:\nInput: words = [\u0026quot;wrt\u0026quot;,\u0026quot;wrf\u0026quot;,\u0026quot;er\u0026quot;,\u0026quot;ett\u0026quot;,\u0026quot;rftt\u0026quot;]\nWe can see that we can use these characters and their relative order to build a graph. Now, we can traverse the graph.\nWe also need to take care of corner cases such as cycles in the graph or the presence of multiple separate graphs.\nIf we detect a cycle in the graph, we return \u0026quot;\u0026quot;. If we have multiple separate graphs, we use postorder DFS to avoid incorrect ordering and merge separate graphs into a single ordering. To do this, we use a visit dictionary to track visited nodes and detect cycles.\nTime/Space Complexity Time complexity: O(N + V + E) Space complexity: O(V + E) Where V is the number of unique characters, E is the number of edges, and N is the sum of the lengths of all strings. Topological Sort (Kahn’s Algorithm) Solution func alienOrder(_ words: [String]) -\u0026gt; String { var adj: [Character: Set\u0026lt;Character\u0026gt;] = [:] var indegree: [Character: Int] = [:] for w in words { for c in w { adj[c] = [] indegree[c] = 0 } } for i in 0..\u0026lt;words.count - 1 { let w1 = Array(words[i]) let w2 = Array(words[i + 1]) let minLen = min(w1.count, w2.count) if w1.count \u0026gt; w2.count \u0026amp;\u0026amp; w1.prefix(minLen) == w2.prefix(minLen) { return \u0026#34;\u0026#34; } for j in 0..\u0026lt;minLen { if w1[j] != w2[j] { if !adj[w1[j]]!.contains(w2[j]) { adj[w1[j]]!.insert(w2[j]) indegree[w2[j], default: 0] += 1 } break } } } var q: [Character] = [] for (char, degree) in indegree { if degree == 0 { q.append(char) } } var res: [Character] = [] while !q.isEmpty { let char = q.removeFirst() res.append(char) if let neighbors = adj[char] { for neighbor in neighbors { indegree[neighbor, default: 0] -= 1 if indegree[neighbor] == 0 { q.append(neighbor) } } } } return res.count == indegree.count ? String(res) : \u0026#34;\u0026#34; } Explanation We can also solve this problem using Topological Sort (Kahn’s Algorithm). The difference between topological sort and depth-first search is that topological sort takes a directed graph and returns an array of nodes where each node appears before all the nodes it points to.\nThe ordering of the nodes in the array is called topological ordering.\nFor example:\nSince node 1 points to nodes 2 and 3, node 1 appears before them in the ordering. And since nodes 2 and 3 both point to node 4, they appear before it in the ordering.\nSo [1, 2, 3, 4, 5] would be a topological ordering of the graph.\nCan a graph have more than one topological ordering? Yes! In the example above, [1, 3, 2, 4, 5] is also a valid ordering.\nTime/Space Complexity Time complexity: O(N + V + E) Space complexity: O(V + E) Where V is the number of unique characters, E is the number of edges, and N is the sum of the lengths of all strings. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-alien-dictionary/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eThere is a new alien language that uses the English alphabet. However, the order of the letters is unknown to you.\u003c/p\u003e\n\u003cp\u003eYou are given a list of strings \u003ccode\u003ewords\u003c/code\u003e from the alien language\u0026rsquo;s dictionary. It is claimed that the strings in \u003ccode\u003ewords\u003c/code\u003e are sorted lexicographically by the rules of this new language.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA string \u003ccode\u003ea\u003c/code\u003e is lexicographically smaller than a string \u003ccode\u003eb\u003c/code\u003e if, in the first position where \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e differ, string \u003ccode\u003ea\u003c/code\u003e has a letter that appears earlier in the alien language than the corresponding letter in \u003ccode\u003eb\u003c/code\u003e. If the first \u003ccode\u003emin(a.length, b.length)\u003c/code\u003e characters do not differ, then the shorter string is the lexicographically smaller one.\u003c/p\u003e","title":"LeetCode - Blind 75 - Alien Dictionary"},{"content":"The Problem You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.\nReturn the number of connected components in the graph.\nExamples Input: n = 5, edges = [[0,1],[1,2],[3,4]] Output: 2 Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]] Output: 1 Constraints 1 \u0026lt;= n \u0026lt;= 2000 1 \u0026lt;= edges.length \u0026lt;= 5000 edges[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; n ai != bi There are no repeated edges. Depth-First Search Solution func countComponents(_ n: Int, _ edges: [[Int]]) -\u0026gt; Int { var adj: [Int: [Int]] = [:] for i in 0 ..\u0026lt; n { adj[i] = [] } var visit = Array(repeating: false, count: n) for value in edges { let u = value[0] let v = value[1] adj[u]!.append(v) adj[v]!.append(u) } func dfs(_ node: Int) { for nei in adj[node]! { if !visit[nei] { visit[nei] = true dfs(nei) } } } var res = 0 for node in 0 ..\u0026lt; n { if !visit[node] { visit[node] = true dfs(node) res += 1 } } return res } Explanation From the description, we learn that we need to find the number of connected components in a graph. Let\u0026rsquo;s clarify what a connected component means:\nIf we are given two nodes, for example, 3 and 4, without edges, then we just return the number of nodes given. In this case, we have two nodes, so we return 2 because: One node by itself counts as a connected component. To solve this problem, we are going to:\nCreate an adjacency list. Traverse every single node using the DFS algorithm. Mark nodes as visited. Count the number of connected components by the number of DFS calls. Time/Space Complexity Time complexity: O(V + E) Space complexity: O(V + E) Where V is the number of vertices and E is the number of edges. Union-Find Solution final class DSU { private var parent: [Int] private var rank: [Int] init(_ n: Int) { self.parent = Array(0 ..\u0026lt; n) self.rank = Array(repeating: 1, count: n) } func find(_ node: Int) -\u0026gt; Int { var cur = node while cur != self.parent[cur] { self.parent[cur] = self.parent[self.parent[cur]] cur = self.parent[cur] } return cur } func union(_ u: Int, _ v: Int) -\u0026gt; Bool { var pu = self.find(u) var pv = self.find(v) if pu == pv { return false } if self.rank[pv] \u0026gt; self.rank[pu] { let tmp = pu pu = pv pv = tmp } self.parent[pv] = pu self.rank[pu] += self.rank[pv] return true } } func countComponents(_ n: Int, _ edges: [[Int]]) -\u0026gt; Int { let dsu = DSU(n) var res = n for value in edges { let u = value[0] let v = value[1] if dsu.union(u, v) { res -= 1 } } return res } Explanation We can also solve this problem using the Union-Find algorithm. This algorithm was literally designed for problems like this—it helps find connected components and identify disjoint sets.\nWe maintain two arrays:\nparent, where each node initially points to itself. For example, [0,1,2,3,4] means each node is its own parent. rank, which helps track the size of each connected component. Union-Find works like a forest of trees. Initially, we have n trees (one for each node). As we traverse through each edge, we:\nConnect the nodes (merge them). Decrease the number of connected components by 1. We add one small optimization by maintaining the rank, which helps keep track of the size of connected components. As we continue connecting nodes, we always attach a smaller tree to the root of a larger tree to minimize tree height.\nFor example, if we connect [1,2], we make 0 the root and add 2 as a child of 0. This means the rank of 0 increases to 3, and the parent array changes from [0,1,2,3,4] to [0,0,0,3,4].\nOnce we process edges [3,4], the rank of 3 increases to 2, and the parent array updates to [0,0,0,3,3]. Each time we perform a union operation, we decrement the number of connected components by 1.\nIf we encounter an edge like [0,2], we immediately return before making changes because they already share the same parent.\nTime/Space Complexity Time complexity: O(V + (E * α(V))) Space complexity: O(V) Where V is the number of vertices, E is the number of edges, and α(V) is the inverse Ackermann function (which is nearly constant in practical use). Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-number-of-connected-components-in-an-undirected-graph/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eYou have a graph of \u003ccode\u003en\u003c/code\u003e nodes. You are given an integer \u003ccode\u003en\u003c/code\u003e and an array \u003ccode\u003eedges\u003c/code\u003e where \u003ccode\u003eedges[i] = [ai, bi]\u003c/code\u003e indicates that there is an edge between \u003ccode\u003eai\u003c/code\u003e and \u003ccode\u003ebi\u003c/code\u003e in the graph.\u003c/p\u003e\n\u003cp\u003eReturn the number of connected components in the graph.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-cfc99\" hidden\u003e\n    \u003clabel for=\"zoomCheck-cfc99\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/conn1-graph.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 5, edges = [[0,1],[1,2],[3,4]]\nOutput: 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-e2547\" hidden\u003e\n    \u003clabel for=\"zoomCheck-e2547\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/conn2-graph.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= 2000\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= edges.length \u0026lt;= 5000\u003c/li\u003e\n\u003cli\u003eedges[i].length == 2\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= ai, bi \u0026lt; n\u003c/li\u003e\n\u003cli\u003eai != bi\u003c/li\u003e\n\u003cli\u003eThere are no repeated edges.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"depth-first-search-solution\"\u003eDepth-First Search Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ecountComponents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eadj\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[:]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eadj\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003evisit\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepeating\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eedges\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eu\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ev\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eadj\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eadj\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003enei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eadj\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eFrom the description, we learn that we need to find the number of connected components in a graph. Let\u0026rsquo;s clarify what a connected component means:\u003c/p\u003e","title":"LeetCode - Blind 75 - Number of Connected Components in an Undirected Graph"},{"content":"The problem You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.\nReturn true if the edges of the given graph make up a valid tree, and false otherwise.\nExamples Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]] Output: true Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]] Output: false Constraints 1 \u0026lt;= n \u0026lt;= 2000 0 \u0026lt;= edges.length \u0026lt;= 5000 edges[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; n ai != bi There are no self-loops or repeated edges. Depth First Search Solution func validTree(_ n: Int, _ edges: [[Int]]) -\u0026gt; Bool { if n == 0 { return true } var adj: [Int: [Int]] = [:] for i in 0 ..\u0026lt; n { adj[i] = [] } for value in edges { let u = value[0] let v = value[1] adj[u]!.append(v) adj[v]!.append(u) } var visit: Set\u0026lt;Int\u0026gt; = [] func dfs(_ i: Int, _ prev: Int) -\u0026gt; Bool { if visit.contains(i) { return false } visit.insert(i) for j in adj[i]! { if j == prev { continue } if !dfs(j, i) { return false } } return true } return dfs(0, -1) \u0026amp;\u0026amp; n == visit.count } Explanation From reading the description, we learn that we need to validate a graph tree and check if it is valid. However, the description does not define what a valid tree is. Let\u0026rsquo;s start there.\nA valid tree cannot have loops (cycles), for example:\nA tree needs to be connected; if it is not, it is an invalid tree, for example:\nAn empty graph counts as a valid tree. We take the input nodes and edges and check if they are connected and if they do not form a loop (cycle). To do that, we need to create an adjacency list for every single input node.\nWe use the DFS algorithm and visit the neighbors of every single node recursively. If no cycle is detected and the length of the visit set equals n, this means the graph is a valid tree, and we return true; otherwise, we return false. To avoid false positive results when backtracking, we add a prev property that tracks the previous value, compares it to the current index, and skips it if they are equal.\nTime/Space Complexity Time complexity: O(V + E) Space complexity: O(V + E) Where V is the number of vertices and E is the number of edges. Breadth First Search Solution func validTree(_ n: Int, _ edges: [[Int]]) -\u0026gt; Bool { if n == 0 { return true } var adj: [Int: [Int]] = [:] for i in 0 ..\u0026lt; n { adj[i] = [] } for value in edges { let u = value[0] let v = value[1] adj[u]!.append(v) adj[v]!.append(u) } var visit: Set\u0026lt;Int\u0026gt; = [] var q: [(Int, Int)] = [(0, -1)] visit.insert(0) while !q.isEmpty { let value = q.removeFirst() let node = value.0 let parent = value.1 for nei in adj[node]! { if nei == parent { continue } if visit.contains(nei) { return false } visit.insert(nei) q.append((nei, node)) } } return visit.count == n } Explanation We can also solve this problem using the Breadth First Search algorithm. Instead of recursion, we use iteration. The logic behind the solution remains the same: we create an adjacency list, iterate over every single node and its neighbors, and update our visit set.\nTime/Space Complexity Time complexity: O(V + E) Space complexity: O(V + E) Where V is the number of vertices and E is the number of edges. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-graph-valid-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou have a graph of \u003ccode\u003en\u003c/code\u003e nodes labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e. You are given an integer \u003ccode\u003en\u003c/code\u003e and a list of \u003ccode\u003eedges\u003c/code\u003e where \u003ccode\u003eedges[i] = [ai, bi]\u003c/code\u003e indicates that there is an undirected edge between nodes \u003ccode\u003eai\u003c/code\u003e and \u003ccode\u003ebi\u003c/code\u003e in the graph.\u003c/p\u003e\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if the edges of the given graph make up a valid tree, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-846c4\" hidden\u003e\n    \u003clabel for=\"zoomCheck-846c4\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/tree1-graph.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]\nOutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7f3ac\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7f3ac\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/tree2-graph.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Graph Valid Tree"},{"content":"The problem There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nFor example, the pair [0, 1] indicates that to take course 0, you have to first take course 1. Return true if you can finish all courses. Otherwise, return false.\nExamples Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1, you should have finished course 0. So it is possible. Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1, you should have finished course 0, and to take course 0, you should also have finished course 1. So it is impossible. Constraints 1 \u0026lt;= numCourses \u0026lt;= 2000 0 \u0026lt;= prerequisites.length \u0026lt;= 5000 prerequisites[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; numCourses All the pairs prerequisites[i] are unique. Depth First Search solution func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -\u0026gt; Bool { var preMap: [Int: [Int]] = [:] for i in 0 ..\u0026lt; numCourses { preMap[i] = [] } for prerequisite in prerequisites { let crs = prerequisite[0] let pre = prerequisite[1] preMap[crs]!.append(pre) } var visit: Set\u0026lt;Int\u0026gt; = [] func dfs(_ crs: Int) -\u0026gt; Bool { if visit.contains(crs) { return false } if preMap[crs] == [] { return true } visit.insert(crs) for pre in preMap[crs]! { if !dfs(pre) { return false } } visit.remove(crs) preMap[crs] = [] return true } for crs in 0 ..\u0026lt; numCourses { if !dfs(crs) { return false } } return true } Explanation If we look at the example in the description and try to visualize it 0 -\u0026gt; 1, we can see that we can represent the connection between nodes as an edge and recognize that this is a graph problem.\nIn the example with input numCourses = 2, prerequisites = [[1,0]], we can represent it as 0 \u0026lt;- 1. This means that if we want to take course 1, we need to finish course 0.\nNow, let\u0026rsquo;s look at an example that is impossible to complete:\nInput: numCourses = 2, prerequisites = [[1,0], [0,1]].\nThe first pair means that to finish course 1, we need to finish course 0 (0 -\u0026gt; 1).\nThe second pair means that to finish course 0, we need to finish course 1 first (0 \u0026lt;- 1).\nAs you can see in the picture, we found a cycle, and neither of the courses is possible to finish.\nLet’s look at another example with input:\nnumCourses = 5, prerequisites = [[0,1], [0,2], [1,3], [1,4], [3,4]].\nWe can use an adjacency list to represent courses with a list of all their prerequisites and repeat this for every course using the DFS algorithm.\nIf the list of prerequisites is empty, it means that it is possible to finish this course. In our case, this applies to 4 and 2.\nRecursively, we will end up going back from 4 to 3, and since we were able to complete prerequisite 4, this means that we can complete prerequisite 3.\nIf this is the case, we can now remove prerequisite 3 and continue DFS by going back to 1, etc.\nTime/space complexity Time complexity: O(V + E) Space complexity: O(V + E) Where V is the number of courses and E is the number of prerequisites Topological Sort (Kahn\u0026rsquo;s Algorithm) solution func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -\u0026gt; Bool { var indegree = Array(repeating: 0, count: numCourses) var adj: [Int: [Int]] = [:] for i in 0 ..\u0026lt; numCourses { adj[i] = [] } for value in prerequisites { let src = value[0] let dst = value[1] indegree[dst] += 1 adj[src]!.append(dst) } var q: [Int] = [] for n in 0 ..\u0026lt; numCourses { if indegree[n] == 0 { q.append(n) } } var finish = 0 while !q.isEmpty { let node = q.removeFirst() finish += 1 for nei in adj[node]! { indegree[nei] -= 1 if indegree[nei] == 0 { q.append(nei) } } } return finish == numCourses } Explanation We can solve this problem in another way by using Topological Sort (Kahn\u0026rsquo;s Algorithm).\nKahn’s algorithm helps us solve course scheduling puzzles.\nFrom the problem description, we find that we need to figure out the order in which we can take courses, considering which ones depend on others.\nKahn’s algorithm checks if we can create a workable schedule without any cycles (like taking a course that requires another that you haven’t taken yet). It also arranges courses in the right order.\nTime/space complexity Time complexity: O(V + E) Space complexity: O(V + E) Where V is the number of courses and E is the number of prerequisites Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-course-schedule/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eThere are a total of \u003ccode\u003enumCourses\u003c/code\u003e courses you have to take, labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003enumCourses - 1\u003c/code\u003e. You are given an array \u003ccode\u003eprerequisites\u003c/code\u003e where \u003ccode\u003eprerequisites[i] = [ai, bi]\u003c/code\u003e indicates that you must take course \u003ccode\u003ebi\u003c/code\u003e first if you want to take course \u003ccode\u003eai\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, the pair \u003ccode\u003e[0, 1]\u003c/code\u003e indicates that to take course \u003ccode\u003e0\u003c/code\u003e, you have to first take course \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if you can finish all courses. Otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e","title":"LeetCode - Blind 75 - Course Schedule"},{"content":"The problem There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island\u0026rsquo;s left and top edges, and the Atlantic Ocean touches the island\u0026rsquo;s right and bottom edges.\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\nThe island receives a lot of rain, and the rainwater can flow to neighboring cells directly north, south, east, and west if the neighboring cell\u0026rsquo;s height is less than or equal to the current cell\u0026rsquo;s height. Water can flow from any cell adjacent to an ocean into the ocean.\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rainwater can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\nExamples Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below: [0,4]: [0,4] -\u0026gt; Pacific Ocean [0,4] -\u0026gt; Atlantic Ocean [1,3]: [1,3] -\u0026gt; [0,3] -\u0026gt; Pacific Ocean [1,3] -\u0026gt; [1,4] -\u0026gt; Atlantic Ocean [1,4]: [1,4] -\u0026gt; [1,3] -\u0026gt; [0,3] -\u0026gt; Pacific Ocean [1,4] -\u0026gt; Atlantic Ocean [2,2]: [2,2] -\u0026gt; [1,2] -\u0026gt; [0,2] -\u0026gt; Pacific Ocean [2,2] -\u0026gt; [2,3] -\u0026gt; [2,4] -\u0026gt; Atlantic Ocean [3,0]: [3,0] -\u0026gt; Pacific Ocean [3,0] -\u0026gt; [4,0] -\u0026gt; Atlantic Ocean [3,1]: [3,1] -\u0026gt; [3,0] -\u0026gt; Pacific Ocean [3,1] -\u0026gt; [4,1] -\u0026gt; Atlantic Ocean [4,0]: [4,0] -\u0026gt; Pacific Ocean [4,0] -\u0026gt; Atlantic Ocean Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans. Input: heights = [[1]] Output: [[0,0]] Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans. Constraints m == heights.length n == heights[r].length 1 \u0026lt;= m, n \u0026lt;= 200 0 \u0026lt;= heights[r][c] \u0026lt;= 10^5 Depth-First Search (DFS) Solution func pacificAtlantic(_ heights: [[Int]]) -\u0026gt; [[Int]] { let ROWS = heights.count let COLS = heights[0].count var pacific: Set\u0026lt;[Int]\u0026gt; = [] var atlantic: Set\u0026lt;[Int]\u0026gt; = [] func dfs( _ r: Int, _ c: Int, _ visit: inout Set\u0026lt;[Int]\u0026gt;, _ prevHeight: Int ) { if (visit.contains([r, c]) || r \u0026lt; 0 || c \u0026lt; 0 || r \u0026gt;= ROWS || c \u0026gt;= COLS || heights[r][c] \u0026lt; prevHeight ) { return } visit.insert([r, c]) dfs(r + 1, c, \u0026amp;visit, heights[r][c]) dfs(r - 1, c, \u0026amp;visit, heights[r][c]) dfs(r, c + 1, \u0026amp;visit, heights[r][c]) dfs(r, c - 1, \u0026amp;visit, heights[r][c]) } for c in 0 ..\u0026lt; COLS { dfs(0, c, \u0026amp;pacific, heights[0][c]) dfs(ROWS - 1, c, \u0026amp;atlantic, heights[ROWS - 1][c]) } for r in 0 ..\u0026lt; ROWS { dfs(r, 0, \u0026amp;pacific, heights[r][0]) dfs(r, COLS - 1, \u0026amp;atlantic, heights[r, COLS - 1]) } var res: [[Int]] = [] for r in 0 ..\u0026lt; ROWS { for c in 0 ..\u0026lt; COLS { if pacific.contains([r, c]) \u0026amp;\u0026amp; atlantic.contains([r, c]) { res.append([r, c]) } } } return res } Explanation From the description of the problem, we learned that we need to find the cells that can reach both the Atlantic and Pacific Oceans. This can happen only if an adjacent cell has a lower or equal value than the current cell. The water can flow in four directions (above, left, right, and below).\nFor example, with input:\nheights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n5 \u0026gt; 3, 5 \u0026gt; 1, and 5 \u0026gt; 4 The 3 to the right of 5 has a neighbor of 1 and follows the condition 3 \u0026gt; 1, meaning we can reach the Atlantic Ocean. The 4 to the left of 5 has a neighbor of 2, and also follows the condition 4 \u0026gt; 2, meaning we can reach the Pacific Ocean. As a result, we include the position of 5 in our result. One way to solve this problem is to find every cell that borders the Pacific Ocean (everything in the first row and first column). Similarly, we do the same for the Atlantic Ocean (everything in the last row and last column). We use graph traversal with DFS to find which positions can reach both oceans.\nThe first thing we do is iterate through the first row (Pacific) and run DFS to find all nodes that can reach the Pacific Ocean. We do the same for the bottom row (Atlantic). We maintain these values in a set to avoid duplicates.\nTime/Space Complexity Time Complexity: O(m * n) Space Complexity: O(m * n) Where m is the number of rows, and n is the number of columns. Breadth-First Search (BFS) Solution func pacificAtlantic(_ heights: [[Int]]) -\u0026gt; [[Int]] { let ROWS = heights.count let COLS = heights[0].count let directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] var pac = Array(repeating: Array(repeating: false, count: COLS), count: ROWS) var atl = Array(repeating: Array(repeating: false, count: COLS), count: ROWS) func bfs(_ sources: [(Int, Int)], _ ocean: inout [[Bool]]) { var q = sources while !q.isEmpty { let (r, c) = q.removeFirst() ocean[r][c] = true for (dr, dc) in directions { let nr = r + dr let nc = c + dc if nr \u0026gt;= 0, nr \u0026lt; ROWS, nc \u0026gt;= 0, nc \u0026lt; COLS, !ocean[nr][nc], heights[nr][nc] \u0026gt;= heights[r][c] { q.append((nr, nc)) } } } } } Explanation We can also solve this problem using BFS instead of DFS. The logic stays the same, but we use an iterative approach instead of recursion.\nTime/Space Complexity remains O(m * n).\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-pacific-atlantic-water-flow/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eThere is an \u003ccode\u003em x n\u003c/code\u003e rectangular island that borders both the \u003cstrong\u003ePacific Ocean\u003c/strong\u003e and \u003cstrong\u003eAtlantic Ocean\u003c/strong\u003e. The \u003cstrong\u003ePacific Ocean\u003c/strong\u003e touches the island\u0026rsquo;s left and top edges, and the \u003cstrong\u003eAtlantic Ocean\u003c/strong\u003e touches the island\u0026rsquo;s right and bottom edges.\u003c/p\u003e\n\u003cp\u003eThe island is partitioned into a grid of square cells. You are given an \u003ccode\u003em x n\u003c/code\u003e integer matrix \u003ccode\u003eheights\u003c/code\u003e where \u003ccode\u003eheights[r][c]\u003c/code\u003e represents the \u003cstrong\u003eheight above sea level\u003c/strong\u003e of the cell at coordinate \u003ccode\u003e(r, c)\u003c/code\u003e.\u003c/p\u003e","title":"LeetCode - Blind 75 - Pacific Atlantic Water Flow"},{"content":"The Problem Given a reference to a node in a connected undirected graph, return a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors:\nclass Node { public int val; public List\u0026lt;Node\u0026gt; neighbors; } Test Case Format For simplicity, each node\u0026rsquo;s value is the same as the node\u0026rsquo;s index (1-indexed). For example, the first node has val == 1, the second node has val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\nExamples Example 1 Input: adjList = [[2,4],[1,3],[2,4],[1,3]] Output: [[2,4],[1,3],[2,4],[1,3]] Explanation: There are 4 nodes in the graph. 1st node (val = 1)\u0026#39;s neighbors are the 2nd node (val = 2) and the 4th node (val = 4). 2nd node (val = 2)\u0026#39;s neighbors are the 1st node (val = 1) and the 3rd node (val = 3). 3rd node (val = 3)\u0026#39;s neighbors are the 2nd node (val = 2) and the 4th node (val = 4). 4th node (val = 4)\u0026#39;s neighbors are the 1st node (val = 1) and the 3rd node (val = 3). Example 2 Input: adjList = [[]] Output: [[]] Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1, and it does not have any neighbors. Example 3 Input: adjList = [] Output: [] Explanation: This is an empty graph; it does not have any nodes. Constraints The number of nodes in the graph is in the range [0, 100]. 1 \u0026lt;= Node.val \u0026lt;= 100 Node.val is unique for each node. There are no repeated edges and no self-loops in the graph. The graph is connected, and all nodes can be visited starting from the given node. Depth-First Search Solution func cloneGraph(_ node: Node?) -\u0026gt; Node? { guard let node = node else { return nil } var oldToNew: [Node: Node] = [:] func dfs(_ node: Node) -\u0026gt; Node { if oldToNew[node] != nil { return oldToNew[node]! } let copy = Node(node.val) oldToNew[node] = copy for nei in node.neighbors { copy.neighbors.append(dfs(nei!)) } return copy } return dfs(node) } Explanation We can solve this problem using a hashmap and the depth-first search (backtracking) algorithm. The approach involves:\nVisiting the first node, creating its clone, checking its neighbors, creating their clones, and connecting them accordingly. Continuing this process recursively. For example, with input adjList = [[2,4],[1,3],[2,4],[1,3]], we:\nVisit node 1, create its clone, check its neighbors (node 2), create its clone, and connect nodes 1 and 2. Repeat this process for nodes 2 -\u0026gt; 4, 4 -\u0026gt; 3, and 3 -\u0026gt; 1. Time/Space Complexity Time Complexity: O(V + E) Space Complexity: O(V) Where V is the number of vertices and E is the number of edges. Breadth-First Search Solution func cloneGraph(_ node: Node?) -\u0026gt; Node? { guard let node = node else { return nil } var oldToNew: [Node: Node] = [:] oldToNew[node] = Node(node.val) var q: [Node] = [node] while !q.isEmpty { let curr = q.removeFirst() for nei in curr.neighbors { if oldToNew[nei!] == nil { oldToNew[nei!] = Node(nei!.val) q.append(nei!) } oldToNew[curr]?.neighbors.append(oldToNew[nei!]) } } return oldToNew[node] } Explanation We can also solve this problem using the breadth-first search algorithm. The approach involves:\nCreating a clone of node and adding it to a hashmap before starting iteration. Iterating through each neighbor, creating clones, and adding them to the hashmap. Time/Space Complexity Time Complexity: O(V + E) Space Complexity: O(V) Where V is the number of vertices and E is the number of edges. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-clone-graph/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven a reference to a node in a \u003ca href=\"https://en.wikipedia.org/wiki/Connectivity_%28graph_theory%29#Connected_graph\"\u003econnected\u003c/a\u003e undirected graph, return a \u003ca href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\"\u003edeep copy\u003c/a\u003e (clone) of the graph.\u003c/p\u003e\n\u003cp\u003eEach node in the graph contains a value (\u003ccode\u003eint\u003c/code\u003e) and a list (\u003ccode\u003eList[Node]\u003c/code\u003e) of its neighbors:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eneighbors\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"test-case-format\"\u003eTest Case Format\u003c/h4\u003e\n\u003cp\u003eFor simplicity, each node\u0026rsquo;s value is the same as the node\u0026rsquo;s index (1-indexed). For example, the first node has \u003ccode\u003eval == 1\u003c/code\u003e, the second node has \u003ccode\u003eval == 2\u003c/code\u003e, and so on. The graph is represented in the test case using an adjacency list.\u003c/p\u003e","title":"LeetCode - Blind 75 - Clone Graph"},{"content":"The Problem Given an m x n 2D binary grid grid, which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.\nExamples Input: grid = [ [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;] ] Output: 1 Input: grid = [ [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;], [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;] ] Output: 3 Constraints m == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 300 grid[i][j] is '0' or '1'. Depth-First Search Solution func numIslands(_ grid: [[Character]]) -\u0026gt; Int { var grid = grid let ROWS = grid.count let COLS = grid[0].count let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]] var islands = 0 func dfs(_ r: Int, _ c: Int) { if (r \u0026lt; 0 || c \u0026lt; 0 || r \u0026gt;= ROWS || c \u0026gt;= COLS || grid[r][c] == \u0026#34;0\u0026#34; ) { return } grid[r][c] = \u0026#34;0\u0026#34; for direction in directions { let dr = direction[0] let dc = direction[1] dfs(r + dr, c + dc) } } for r in 0 ..\u0026lt; ROWS { for c in 0 ..\u0026lt; COLS { if grid[r][c] == \u0026#34;1\u0026#34; { dfs(r, c) islands += 1 } } } return islands } Explanation From the description of the problem, we can see that we have islands formed by connecting adjacent land horizontally or vertically. If we draw a visual representation, we can find islands that are connected vertically or horizontally and surrounded by water.\nWhen the problem has adjacent elements, this means that it is a graph problem, and we have two common ways to solve it: using DFS or BFS algorithms.\nTo do that, we need to visit neighboring cells and check if they are part of the island (have \u0026quot;1\u0026quot;).\nThe function dfs will help us check for an out-of-bounds case and if we have already visited this cell. After that, we will mark the current cell as \u0026quot;0\u0026quot;, meaning that we have visited this cell, and recursively call dfs to search neighbors in four directions.\nTime/Space Complexity Time complexity: O(m*n) Space complexity: O(m*n) Where m is the number of rows and n is the number of columns in the grid. Breadth-First Search Solution func numIslands(_ grid: [[Character]]) -\u0026gt; Int { let ROWS = grid.count let COLS = grid[0].count var visit: Set\u0026lt;[Int]\u0026gt; = [] var islands = 0 func bfs(_ r: Int, _ c: Int) { var q: [[Int]] = [] visit.insert([r, c]) q.append([r, c]) while !q.isEmpty { let val = q.removeFirst() let row = val[0] let col = val[1] let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]] for direction in directions { let r = row + direction[0] let c = col + direction[1] if ((0 ..\u0026lt; ROWS).contains(r) \u0026amp;\u0026amp; (0 ..\u0026lt; COLS).contains(c) \u0026amp;\u0026amp; grid[r][c] == \u0026#34;1\u0026#34; \u0026amp;\u0026amp; !visit.contains([r, c]) ) { q.append([r, c]) visit.insert([r, c]) } } } } for r in 0 ..\u0026lt; ROWS { for c in 0 ..\u0026lt; COLS { if grid[r][c] == \u0026#34;1\u0026#34; \u0026amp;\u0026amp; !visit.contains([r, c]) { bfs(r, c) islands += 1 } } } return islands } Explanation We can solve this problem using the BFS algorithm. The idea behind it is that we add an additional visit set and move layer by layer, starting from position (0,0).\nThe BFS algorithm is slightly different from DFS because it is iterative and uses a queue data structure. However, the logic remains the same: we visit neighboring cells in four directions only if\nwe are not out of bounds the cell is equal to \u0026quot;1\u0026quot; and we have not visited the cell before. Time/Space Complexity Time complexity: O(m*n) Space complexity: O(m*n) Where m is the number of rows and n is the number of columns in the grid. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-number-of-islands/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e 2D binary grid \u003ccode\u003egrid\u003c/code\u003e, which represents a map of \u003ccode\u003e'1'\u003c/code\u003es (land) and \u003ccode\u003e'0'\u003c/code\u003es (water), return the number of islands.\u003c/p\u003e\n\u003cp\u003eAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: grid = [\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;]\n]\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: grid = [\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],\n  [\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;]\n]\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003em == grid.length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003en == grid[i].length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= m, n \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e is \u003ccode\u003e'0'\u003c/code\u003e or \u003ccode\u003e'1'\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"depth-first-search-solution\"\u003eDepth-First Search Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003enumIslands\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"p\"\u003e]])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003egrid\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eROWS\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eCOLS\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edirections\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eislands\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eROWS\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eCOLS\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003edirection\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003edirections\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edirection\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edirection\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eROWS\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eCOLS\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eislands\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eislands\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eFrom the description of the problem, we can see that we have \u003ccode\u003eislands\u003c/code\u003e formed by connecting adjacent land horizontally or vertically. If we draw a visual representation, we can find islands that are connected vertically or horizontally and surrounded by water.\u003c/p\u003e","title":"LeetCode - Blind 75 - Number of Islands"},{"content":"The Problem Given an m x n board of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\nExamples Input: board = [[\u0026#34;o\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;n\u0026#34;],[\u0026#34;e\u0026#34;,\u0026#34;t\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;e\u0026#34;],[\u0026#34;i\u0026#34;,\u0026#34;h\u0026#34;,\u0026#34;k\u0026#34;,\u0026#34;r\u0026#34;],[\u0026#34;i\u0026#34;,\u0026#34;f\u0026#34;,\u0026#34;l\u0026#34;,\u0026#34;v\u0026#34;]], words = [\u0026#34;oath\u0026#34;,\u0026#34;pea\u0026#34;,\u0026#34;eat\u0026#34;,\u0026#34;rain\u0026#34;] Output: [\u0026#34;eat\u0026#34;,\u0026#34;oath\u0026#34;] Input: board = [[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;]], words = [\u0026#34;abcb\u0026#34;] Output: [] Constraints m == board.length n == board[i].length 1 \u0026lt;= m, n \u0026lt;= 12 board[i][j] is a lowercase English letter. 1 \u0026lt;= words.length \u0026lt;= 3 * 10^4 1 \u0026lt;= words[i].length \u0026lt;= 10 words[i] consists of lowercase English letters. All the strings in words are unique. Brute Force Solution func findWords(_ board: [[Character]], _ words: [String]) -\u0026gt; [String] { var board = board let ROWS = board.count let COLS = board[0].count var res: [String] = [] func backtrack(_ r: Int, _ c: Int, _ word: [Character], _ i: Int) -\u0026gt; Bool { if i == word.count { return true } if (r \u0026lt; 0 || c \u0026lt; 0 || r \u0026gt;= ROWS || c \u0026gt;= COLS || board[r][c] != word[i] ) { return false } let tmp = board[r][c] board[r][c] = \u0026#34;*\u0026#34; let res = (backtrack(r + 1, c, word, i + 1) || backtrack(r - 1, c, word, i + 1) || backtrack(r, c + 1, word, i + 1) || backtrack(r, c - 1, word, i + 1)) board[r][c] = tmp return res } for word in words { let wordArray = Array(word) var flag = false for r in 0 ..\u0026lt; ROWS { if flag { break } for c in 0 ..\u0026lt; COLS { if board[r][c] != wordArray[0] { continue } if backtrack(r, c, wordArray, 0) { res.append(word) flag = true break } } } } return res } Explanation We can solve this problem using a brute-force approach with a backtracking (depth-first search) algorithm. This algorithm allows us to visit neighboring cells.\nAccording to the problem description, we need to construct words from characters available on the board that match the input words.\nThe brute-force approach involves visiting each cell on the board and backtracking in four directions to try to construct possible words until we reach the bottom of the grid.\nHowever, this is not an efficient solution and will take O(m * n * 4^t + s). We can optimize this solution by using a Trie (Prefix Tree).\nTime/Space Complexity Time complexity: O(m * n * 4^t + s) Space complexity: O(t) where m is the number of rows, n is the number of columns, t is the maximum length of any word in the words array, and s is the sum of the lengths of all words. Trie (Prefix Tree) Solution final class TrieNode { var children: [Character: TrieNode] var endOfWord: Bool init() { self.children = [:] self.endOfWord = false } func addWord(_ word: String) { var curr = self for c in word { if curr.children[c] == nil { curr.children[c] = TrieNode() } curr = curr.children[c]! } curr.endOfWord = true } } func findWords(_ board: [[Character]], _ words: [String]) -\u0026gt; [String] { var root = TrieNode() for w in words { root.addWord(w) } let ROWS = board.count let COLS = board[0].count var res: Set\u0026lt;String\u0026gt; = [] var visit: Set\u0026lt;[Int]\u0026gt; = [] func dfs(_ r: Int, _ c: Int, _ node: TrieNode?, _ word: String) { var word = word if (r \u0026lt; 0 || c \u0026lt; 0 || r \u0026gt;= ROWS || c \u0026gt;= COLS || visit.contains([r, c]) || node?.children[board[r][c]] == nil ) { return } visit.insert([r, c]) let node = node?.children[board[r][c]] word += String(board[r][c]) if node!.endOfWord { res.insert(word) } dfs(r + 1, c, node, word) dfs(r - 1, c, node, word) dfs(r, c + 1, node, word) dfs(r, c - 1, node, word) visit.remove([r, c]) } for r in 0 ..\u0026lt; ROWS { for c in 0 ..\u0026lt; COLS { dfs(r, c, root, \u0026#34;\u0026#34;) } } return Array(res) } Explanation We can optimize the brute-force solution using a Trie (Prefix Tree) data structure. To do this, we need a TrieNode class with an addWord helper method. For the findWords function, we need an additional depth-first search (backtracking) algorithm. The TrieNode will help us store words, while DFS will help us search for words on the board in four directions.\nIn a Prefix Tree, every single character is a node. We insert all input words into the Prefix Tree. For example, with words = [\u0026quot;app\u0026quot;, \u0026quot;ape\u0026quot;, \u0026quot;ace\u0026quot;]:\nAfter constructing the tree, we search for prefixes. If a prefix exists, we continue searching until we find a word or reach a base case. As a result, we find two words [\u0026quot;ape\u0026quot;, \u0026quot;ace\u0026quot;] that can be built using the given board.\nTime/Space Complexity Time complexity: O(m * n * 4 * 3^(t-1) + s) Space complexity: O(s) where m is the number of rows, n is the number of columns, t is the maximum length of any word in words, and s is the sum of the lengths of all words. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-word-search-ii/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e \u003ccode\u003eboard\u003c/code\u003e of characters and a list of strings \u003ccode\u003ewords\u003c/code\u003e, return all words on the board.\u003c/p\u003e\n\u003cp\u003eEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-4b0a8\" hidden\u003e\n    \u003clabel for=\"zoomCheck-4b0a8\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/search1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: board = [[\u0026#34;o\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;n\u0026#34;],[\u0026#34;e\u0026#34;,\u0026#34;t\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;e\u0026#34;],[\u0026#34;i\u0026#34;,\u0026#34;h\u0026#34;,\u0026#34;k\u0026#34;,\u0026#34;r\u0026#34;],[\u0026#34;i\u0026#34;,\u0026#34;f\u0026#34;,\u0026#34;l\u0026#34;,\u0026#34;v\u0026#34;]], words = [\u0026#34;oath\u0026#34;,\u0026#34;pea\u0026#34;,\u0026#34;eat\u0026#34;,\u0026#34;rain\u0026#34;]\nOutput: [\u0026#34;eat\u0026#34;,\u0026#34;oath\u0026#34;]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7f901\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7f901\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/search2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Word Search II"},{"content":"The problem Design a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\nWordDictionary() Initializes the object. void addWord(word) Adds word to the data structure; it can be matched later. bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots ('.'), where dots can be matched with any letter. Examples Input [\u0026#34;WordDictionary\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;] [[],[\u0026#34;bad\u0026#34;],[\u0026#34;dad\u0026#34;],[\u0026#34;mad\u0026#34;],[\u0026#34;pad\u0026#34;],[\u0026#34;bad\u0026#34;],[\u0026#34;.ad\u0026#34;],[\u0026#34;b..\u0026#34;]] Output [null,null,null,null,false,true,true,true] Explanation WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\u0026#34;bad\u0026#34;); wordDictionary.addWord(\u0026#34;dad\u0026#34;); wordDictionary.addWord(\u0026#34;mad\u0026#34;); wordDictionary.search(\u0026#34;pad\u0026#34;); // return False wordDictionary.search(\u0026#34;bad\u0026#34;); // return True wordDictionary.search(\u0026#34;.ad\u0026#34;); // return True wordDictionary.search(\u0026#34;b..\u0026#34;); // return True Constraints 1 \u0026lt;= word.length \u0026lt;= 25 word in addWord consists of lowercase English letters. word in search consists of '.' or lowercase English letters. There will be at most 2 dots in word for search queries. At most 10^4 calls will be made to addWord and search. Brute force solution class WordDictionary { private var store: [String] init() { self.store = [] } func addWord(_ word: String) { self.store.append(word) } func search(_ word: String) -\u0026gt; Bool { let wordArray = Array(word) let wordCount = wordArray.count for w in self.store { let wArray = Array(w) let wCount = wArray.count if wCount != wordCount { continue } var i = 0 while i \u0026lt; wCount { if wArray[i] == wordArray[i] || wordArray[i] == \u0026#34;.\u0026#34; { i += 1 } else { break } if i == wCount { return true } } } return false } } Explanation We can solve this problem in a brute-force way by using an array.\nIt is not the most efficient solution because the search operation will take O(m * n) time. We can optimize it by using a Trie (Prefix Tree) data structure.\nFor the addWord method, we will use the append operation, which takes O(1) time. For search, we need a little more effort because we cannot only search for a specific word, but the input may contain dots ('.'), which can be matched with any letter. For example, if we have input [\u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;] and we are looking for “.d”, we will iterate through each element in store and compare it with the input word character by character, also checking if a character can be .. Time/space complexity Time complexity: O(1) for addWord, and O(m * n) for search. Space complexity: O(m * n),\nwhere m is the number of words added to the array and n is the length of the word. Trie (Prefix Tree) solution final class TrieNode { var children: [Character: TrieNode?] var endOfWord: Bool init() { self.children = [:] self.endOfWord = false } } class WordDictionary { private let root: TrieNode init() { self.root = TrieNode() } func addWord(_ word: String) { var curr = self.root for c in word { if curr.children[c] == nil { curr.children[c] = TrieNode() } curr = curr.children[c]!! } curr.endOfWord = true } func search(_ word: String) -\u0026gt; Bool { func dfs(_ j: Int, _ node: TrieNode) -\u0026gt; Bool { var curr = node let wordArray = Array(word) let wordCount = wordArray.count for i in j ..\u0026lt; wordCount { let c = wordArray[i] if c == \u0026#34;.\u0026#34; { for child in curr.children.values { if let childNode = child, dfs(i + 1, childNode) { return true } } return false } else { if curr.children[c] == nil { return false } curr = curr.children[c]!! } } return curr.endOfWord } return dfs(0, self.root) } } Explanation We can solve this problem in a more optimal way by using a Trie (Prefix Tree) data structure. It will help us decrease the time complexity for search from O(m * n) to O(n).\nTo do that, we need an additional class TrieNode that will store children nodes by character and an endOfWord property that will tell us when a sequence of characters forms a complete word.\nFor addWord, we iterate through all characters in the input word and mark it as the endOfWord. For search, we need to add a depth-first search (DFS) helper (backtracking). This allows us to search for a match in every node when we have . in the input because . matches any character.\nFor example, when we search for .ad and we have [\u0026quot;bad\u0026quot;, \u0026quot;dad\u0026quot;, \u0026quot;mad\u0026quot;] as added words, we return true in all these cases because .ad matches all of them. This solution is more efficient because when we find a match, we return true and stop iterating, using recursion (DFS).\nTime/space complexity Time complexity: O(n) for addWord and search. Space complexity: O(t + n),\nwhere n is the length of the word and t is the total number of TrieNodes created in the Trie. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-design-add-and-search-words-data-structure/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eDesign a data structure that supports adding new words and finding if a string matches any previously added string.\u003c/p\u003e\n\u003cp\u003eImplement the \u003ccode\u003eWordDictionary\u003c/code\u003e class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eWordDictionary()\u003c/code\u003e Initializes the object.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid addWord(word)\u003c/code\u003e Adds \u003ccode\u003eword\u003c/code\u003e to the data structure; it can be matched later.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebool search(word)\u003c/code\u003e Returns \u003ccode\u003etrue\u003c/code\u003e if there is any string in the data structure that matches \u003ccode\u003eword\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e otherwise. \u003ccode\u003eword\u003c/code\u003e may contain dots (\u003ccode\u003e'.'\u003c/code\u003e), where dots can be matched with any letter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput  \n[\u0026#34;WordDictionary\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;]  \n[[],[\u0026#34;bad\u0026#34;],[\u0026#34;dad\u0026#34;],[\u0026#34;mad\u0026#34;],[\u0026#34;pad\u0026#34;],[\u0026#34;bad\u0026#34;],[\u0026#34;.ad\u0026#34;],[\u0026#34;b..\u0026#34;]]  \nOutput  \n[null,null,null,null,false,true,true,true]  \n\nExplanation  \nWordDictionary wordDictionary = new WordDictionary();  \nwordDictionary.addWord(\u0026#34;bad\u0026#34;);  \nwordDictionary.addWord(\u0026#34;dad\u0026#34;);  \nwordDictionary.addWord(\u0026#34;mad\u0026#34;);  \nwordDictionary.search(\u0026#34;pad\u0026#34;); // return False  \nwordDictionary.search(\u0026#34;bad\u0026#34;); // return True  \nwordDictionary.search(\u0026#34;.ad\u0026#34;); // return True  \nwordDictionary.search(\u0026#34;b..\u0026#34;); // return True  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= word.length \u0026lt;= 25\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e in \u003ccode\u003eaddWord\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e in \u003ccode\u003esearch\u003c/code\u003e consists of \u003ccode\u003e'.'\u003c/code\u003e or lowercase English letters.\u003c/li\u003e\n\u003cli\u003eThere will be at most 2 dots in \u003ccode\u003eword\u003c/code\u003e for \u003ccode\u003esearch\u003c/code\u003e queries.\u003c/li\u003e\n\u003cli\u003eAt most \u003ccode\u003e10^4\u003c/code\u003e calls will be made to \u003ccode\u003eaddWord\u003c/code\u003e and \u003ccode\u003esearch\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute force solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eWordDictionary\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003estore\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eaddWord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ewordArray\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ewordCount\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewordArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ewArray\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ewCount\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ewCount\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ewordCount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ewCount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ewArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ewordArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ewordArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ewCount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can solve this problem in a brute-force way by using an array.\u003cbr\u003e\nIt is not the most efficient solution because the \u003ccode\u003esearch\u003c/code\u003e operation will take O(m * n) time. We can optimize it by using a Trie (Prefix Tree) data structure.\u003c/p\u003e","title":"LeetCode - Blind 75 - Design Add and Search Words Data Structure"},{"content":"The problem A trie (pronounced as \u0026ldquo;try\u0026rdquo;) or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\nTrie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise. Examples Input [\u0026#34;Trie\u0026#34;, \u0026#34;insert\u0026#34;, \u0026#34;search\u0026#34;, \u0026#34;search\u0026#34;, \u0026#34;startsWith\u0026#34;, \u0026#34;insert\u0026#34;, \u0026#34;search\u0026#34;] [[], [\u0026#34;apple\u0026#34;], [\u0026#34;apple\u0026#34;], [\u0026#34;app\u0026#34;], [\u0026#34;app\u0026#34;], [\u0026#34;app\u0026#34;], [\u0026#34;app\u0026#34;]] Output [null, null, true, false, true, null, true] Explanation Trie trie = new Trie(); trie.insert(\u0026#34;apple\u0026#34;); trie.search(\u0026#34;apple\u0026#34;); // return True trie.search(\u0026#34;app\u0026#34;); // return False trie.startsWith(\u0026#34;app\u0026#34;); // return True trie.insert(\u0026#34;app\u0026#34;); trie.search(\u0026#34;app\u0026#34;); // return True Constraints 1 \u0026lt;= word.length, prefix.length \u0026lt;= 2000 word and prefix consist only of lowercase English letters. At most 3 * 10⁴ calls in total will be made to insert, search, and startsWith. Prefix Tree Array solution final class TrieNode { var children: [TrieNode?] var endOfWord: Bool init() { self.children = Array(repeating: nil, count: 26) self.endOfWord = false } } class Trie { private let root: TrieNode private let aAsciiValue: Int = Int(Character(\u0026#34;a\u0026#34;).asciiValue!) init() { self.root = TrieNode() } func insert(_ word: String) { var curr = self.root for c in word { let i = Int(c.asciiValue!) - aAsciiValue if curr.children[i] == nil { curr.children[i] = TrieNode() } curr = curr.children[i]! } curr.endOfWord = true } func search(_ word: String) -\u0026gt; Bool { var curr = self.root for c in word { let i = Int(c.asciiValue!) - aAsciiValue if curr.children[i] == nil { return false } curr = curr.children[i]! } return curr.endOfWord } func startsWith(_ prefix: String) -\u0026gt; Bool { var curr = self.root for c in prefix { let i = Int(c.asciiValue!) - aAsciiValue if curr.children[i] == nil { return false } curr = curr.children[i]! } return true } } Explanation Before we start implementing Trie, let\u0026rsquo;s take a look at what we are going to do.\nWe are going to create a node and insert it as a child of the previous character for every character of the word and mark it as the end of the word. To do that, we need an additional class TrieNode that will help us keep track of children nodes and endOfWord. When we want to search for a word, we need to iterate through the word character by character and check if it exists as a child and if it is marked as endOfWord. For example, with insert = \u0026quot;apple\u0026quot; and search = \u0026quot;apple\u0026quot;, the algorithm will return true because this word has the same characters and is marked as endOfWord. However, if we try insert = \u0026quot;apple\u0026quot; and search = \u0026quot;app\u0026quot;, the algorithm will return false even though the first three characters are the same. It does so because \u0026quot;app\u0026quot; is not marked as endOfWord. When we want to search for a word that startsWith a prefix, we need to iterate through the word character by character but without checking for endOfWord because we just need to find the prefix. For example, with insert = \u0026quot;apple\u0026quot; and searching for a word that startsWith = \u0026quot;app\u0026quot;, the algorithm will return true because this word has the same first three characters as the word \u0026quot;apple\u0026quot;. Time/Space Complexity Time complexity: O(n) for each method call Space complexity: O(t) where n is the length of the string and t is the total number of TrieNode objects created in the Trie. Prefix Tree HashMap solution final class TrieNode { var children: [Character: TrieNode?] var endOfWord: Bool init() { self.children = [:] self.endOfWord = false } } class Trie { private let root: TrieNode init() { self.root = TrieNode() } func insert(_ word: String) { var curr = self.root for c in word { if curr.children[c] == nil { curr.children[c] = TrieNode() } curr = curr.children[c]!! } curr.endOfWord = true } func search(_ word: String) -\u0026gt; Bool { var curr = self.root for c in word { if curr.children[c] == nil { return false } curr = curr.children[c]!! } return curr.endOfWord } func startsWith(_ prefix: String) -\u0026gt; Bool { var curr = self.root for c in prefix { if curr.children[c] == nil { return false } curr = curr.children[c]!! } return true } } Explanation We can also solve this problem by using a HashMap for TrieNode instead of an array as we did above. This will result in less code and will be easier to read. The algorithm behind the solution stays the same, as do the time and space complexity.\nTime/Space Complexity Time complexity: O(n) for each method call Space complexity: O(t) where n is the length of the string and t is the total number of TrieNode objects created in the Trie. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-implement-trie-prefix-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Trie\"\u003etrie\u003c/a\u003e (pronounced as \u0026ldquo;try\u0026rdquo;) or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eImplement the \u003ccode\u003eTrie\u003c/code\u003e class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTrie()\u003c/code\u003e Initializes the trie object.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid insert(String word)\u003c/code\u003e Inserts the string \u003ccode\u003eword\u003c/code\u003e into the trie.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eboolean search(String word)\u003c/code\u003e Returns \u003ccode\u003etrue\u003c/code\u003e if the string \u003ccode\u003eword\u003c/code\u003e is in the trie (i.e., was inserted before), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eboolean startsWith(String prefix)\u003c/code\u003e Returns \u003ccode\u003etrue\u003c/code\u003e if there is a previously inserted string \u003ccode\u003eword\u003c/code\u003e that has the \u003ccode\u003eprefix\u003c/code\u003e prefix, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput  \n[\u0026#34;Trie\u0026#34;, \u0026#34;insert\u0026#34;, \u0026#34;search\u0026#34;, \u0026#34;search\u0026#34;, \u0026#34;startsWith\u0026#34;, \u0026#34;insert\u0026#34;, \u0026#34;search\u0026#34;]  \n[[], [\u0026#34;apple\u0026#34;], [\u0026#34;apple\u0026#34;], [\u0026#34;app\u0026#34;], [\u0026#34;app\u0026#34;], [\u0026#34;app\u0026#34;], [\u0026#34;app\u0026#34;]]  \nOutput  \n[null, null, true, false, true, null, true]  \n\nExplanation  \nTrie trie = new Trie();  \ntrie.insert(\u0026#34;apple\u0026#34;);  \ntrie.search(\u0026#34;apple\u0026#34;);   // return True  \ntrie.search(\u0026#34;app\u0026#34;);     // return False  \ntrie.startsWith(\u0026#34;app\u0026#34;); // return True  \ntrie.insert(\u0026#34;app\u0026#34;);  \ntrie.search(\u0026#34;app\u0026#34;);     // return True  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= word.length, prefix.length \u0026lt;= 2000\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eword\u003c/code\u003e and \u003ccode\u003eprefix\u003c/code\u003e consist only of lowercase English letters.\u003c/li\u003e\n\u003cli\u003eAt most 3 * 10⁴ calls in total will be made to \u003ccode\u003einsert\u003c/code\u003e, \u003ccode\u003esearch\u003c/code\u003e, and \u003ccode\u003estartsWith\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"prefix-tree-array-solution\"\u003ePrefix Tree Array solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTrieNode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTrieNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eendOfWord\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepeating\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eendOfWord\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTrie\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTrieNode\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eaAsciiValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003easciiValue\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTrieNode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easciiValue\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eaAsciiValue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTrieNode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eendOfWord\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easciiValue\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eaAsciiValue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eendOfWord\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003estartsWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eprefix\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"kr\"\u003eprefix\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easciiValue\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eaAsciiValue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore we start implementing \u003ccode\u003eTrie\u003c/code\u003e, let\u0026rsquo;s take a look at what we are going to do.\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-5ac1b\" hidden\u003e\n    \u003clabel for=\"zoomCheck-5ac1b\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/p-208.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Implement Trie (Prefix Tree)"},{"content":"The Problem Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\nExamples Input: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCCED\u0026#34; Output: true Input: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;SEE\u0026#34; Output: true Input: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCB\u0026#34; Output: false Constraints m == board.length n == board[i].length 1 \u0026lt;= m, n \u0026lt;= 6 1 \u0026lt;= word.length \u0026lt;= 15 board and word consist of only lowercase and uppercase English letters. Follow-up: Could you use search pruning to make your solution faster with a larger board?\nBacktracking Hash Set Solution func exist(_ board: [[Character]], _ word: String) -\u0026gt; Bool { let ROWS = board.count let COLS = board[0].count let word = Array(word) let wordCount = word.count var path: Set\u0026lt;[Int]\u0026gt; = [] func dfs(_ row: Int, _ col: Int, _ i: Int) -\u0026gt; Bool { if i == wordCount { return true } if (row \u0026lt; 0 || col \u0026lt; 0 || row \u0026gt;= ROWS || col \u0026gt;= COLS || word[i] != board[row][col] || path.contains([row, col])) { return false } path.insert([row, col]) let res = (dfs(row + 1, col, i + 1) || dfs(row - 1, col, i + 1) || dfs(row, col + 1, i + 1) || dfs(row, col - 1, i + 1)) path.remove([row, col]) return res } for r in 0..\u0026lt;ROWS { for c in 0..\u0026lt;COLS { if dfs(r, c, 0) { return true } } } return false } Explanation When a problem mentions a grid, matrix, or graph, it usually means that we need a backtracking algorithm because we can explore four different directions (top, left, right, down) to find neighboring cells.\nWe start from 0,0 (row and column) and try to move in different directions if possible. To do that, we use depth-first search (DFS) with a few base cases:\nIf i equals wordCount, we found the word. If the algorithm goes out of bounds of the board, return false. We insert our path, move recursively in four directions, and return the result. Time / Space Complexity Time Complexity: O(m * 4^n) Space Complexity: O(n) Where m is the number of cells in the board and n is the length of the word. Backtracking Optimized Solution func exist(_ board: [[Character]], _ word: String) -\u0026gt; Bool { let ROWS = board.count let COLS = board[0].count var board = board let wordArray = Array(word) let wordArrayCount = wordArray.count func dfs(_ r: Int, _ c: Int, _ i: Int) -\u0026gt; Bool { if i == wordArrayCount { return true } if r \u0026lt; 0 || c \u0026lt; 0 || r \u0026gt;= ROWS || c \u0026gt;= COLS || board[r][c] != wordArray[i] || board[r][c] == \u0026#34;#\u0026#34; { return false } let temp = board[r][c] board[r][c] = \u0026#34;#\u0026#34; let res = dfs(r + 1, c, i + 1) || dfs(r - 1, c, i + 1) || dfs(r, c + 1, i + 1) || dfs(r, c - 1, i + 1) board[r][c] = temp return res } for r in 0..\u0026lt;ROWS { for c in 0..\u0026lt;COLS { if dfs(r, c, 0) { return true } } } return false } Explanation We can optimize memory in the initial solution by removing the hash set and using input modification instead. We mark the value of the current cell with a # symbol so that we know it has been visited. The rest of the algorithm stays the same.\nTime / Space Complexity Time Complexity: O(m * 4^n) Space Complexity: O(n) Where m is the number of cells in the board and n is the length of the word. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-word-search/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e grid of characters \u003ccode\u003eboard\u003c/code\u003e and a string \u003ccode\u003eword\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003eword\u003c/code\u003e exists in the grid.\u003c/p\u003e\n\u003cp\u003eThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-5c4f6\" hidden\u003e\n    \u003clabel for=\"zoomCheck-5c4f6\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/word2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCCED\u0026#34;  \nOutput: true  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-aa26b\" hidden\u003e\n    \u003clabel for=\"zoomCheck-aa26b\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/word-1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;SEE\u0026#34;  \nOutput: true  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-147e3\" hidden\u003e\n    \u003clabel for=\"zoomCheck-147e3\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/word3.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Word Search"},{"content":"The Problem Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nThe frequency of an element x is the number of times it occurs in the array.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 for the given input.\nExamples Input: candidates = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations. Input: candidates = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]] Input: candidates = [2], target = 1 Output: [] Constraints 1 \u0026lt;= candidates.length \u0026lt;= 30 2 \u0026lt;= candidates[i] \u0026lt;= 40 All elements of candidates are distinct. 1 \u0026lt;= target \u0026lt;= 40 Backtracking Solution func combinationSum(_ candidates: [Int], _ target: Int) -\u0026gt; [[Int]] { let n = candidates.count var res: [[Int]] = [] var curr: [Int] = [] func dfs(_ i: Int, _ total: Int) { if total == target { res.append(curr) return } if i \u0026gt;= n || total \u0026gt; target { return } curr.append(candidates[i]) dfs(i, total + candidates[i]) curr.removeLast() dfs(i + 1, total) } dfs(0, 0) return res } Explanation When a problem requires finding unique combinations of elements, it usually means the solution involves a backtracking algorithm. Before diving into the code, the best way to understand the problem is to draw the decision tree.\nFor example, with the input [2,3,6,7] and target = 7, we cannot continue with 7 because adding it to any other value in the array would exceed the target.\nOne of the requirements is that we cannot have duplicate values. To enforce this, we construct a decision tree where:\nOne branch includes all possible occurrences of 2. The other branch skips 2 to avoid duplicates. We achieve this by adding and removing elements from the array and using recursion.\nTime/Space Complexity Time Complexity: O(2^{t/m}) Space Complexity: O(t/m) Where t is the given target and m is the minimum value in candidates. Optimal Backtracking Solution func combinationSum(_ candidates: [Int], _ target: Int) -\u0026gt; [[Int]] { var candidates = candidates let n = candidates.count var res: [[Int]] = [] var curr: [Int] = [] candidates.sort() func dfs(_ i: Int, _ total: Int) { if total == target { res.append(curr) return } for j in i ..\u0026lt; n { if total + candidates[j] \u0026gt; target { return } curr.append(candidates[j]) dfs(j, total + candidates[j]) curr.removeLast() } } dfs(0, 0) return res } Explanation We can slightly optimize the first solution by sorting the elements.\nThis allows us to find results faster if we have a small target value. We reduce the recursion call stack by adding an additional iteration. Time/Space Complexity Time Complexity: O(2^{t/m}) Space Complexity: O(t/m) Where t is the given target and m is the minimum value in candidates. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-combination-sum/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of \u003cstrong\u003edistinct\u003c/strong\u003e integers \u003ccode\u003ecandidates\u003c/code\u003e and a target integer \u003ccode\u003etarget\u003c/code\u003e, return a list of all \u003cstrong\u003eunique combinations\u003c/strong\u003e of \u003ccode\u003ecandidates\u003c/code\u003e where the chosen numbers sum to \u003ccode\u003etarget\u003c/code\u003e. You may return the combinations in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003esame\u003c/strong\u003e number may be chosen from \u003ccode\u003ecandidates\u003c/code\u003e an \u003cstrong\u003eunlimited\u003c/strong\u003e number of times. Two combinations are unique if the \u003cstrong\u003efrequency\u003c/strong\u003e of at least one of the chosen numbers is different.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003cstrong\u003efrequency\u003c/strong\u003e of an element \u003ccode\u003ex\u003c/code\u003e is the number of times it occurs in the array.\u003c/p\u003e","title":"LeetCode - Blind 75 - Combination Sum"},{"content":"The Problem The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\nFor example, for arr = [2,3,4], the median is 3. For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5. Implement the MedianFinder class:\nMedianFinder() initializes the MedianFinder object. void addNum(int num) adds the integer num from the data stream to the data structure. double findMedian() returns the median of all elements so far. Answers within 10⁻⁵ of the actual answer will be accepted. Examples Input [\u0026#34;MedianFinder\u0026#34;, \u0026#34;addNum\u0026#34;, \u0026#34;addNum\u0026#34;, \u0026#34;findMedian\u0026#34;, \u0026#34;addNum\u0026#34;, \u0026#34;findMedian\u0026#34;] [[], [1], [2], [], [3], []] Output [null, null, null, 1.5, null, 2.0] Explanation MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // arr = [1] medianFinder.addNum(2); // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) medianFinder.addNum(3); // arr = [1, 2, 3] medianFinder.findMedian(); // return 2.0 Constraints -10⁵ \u0026lt;= num \u0026lt;= 10⁵ There will be at least one element in the data structure before calling findMedian(). At most 5 * 10⁴ calls will be made to addNum and findMedian(). Follow-up: If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution? If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution? Sorting Solution class MedianFinder { private var data: [Int] init() { self.data = [] } func addNum(_ num: Int) { data.append(num) } func findMedian() -\u0026gt; Double { data.sort() let n = data.count if (n \u0026amp; 1) != 0 { return Double(data[n / 2]) } else { return (Double(data[n / 2]) + Double(data[n / 2 - 1])) / 2 } } } Explanation One approach to solving this problem is to apply a built-in sorting algorithm. To find the result, we use an array to collect all numbers added using the addNum method.\nBefore finding the median, we should sort the array first because the main requirement for calculating the median is an ordered list. After sorting, we check whether the length of data is odd or even and calculate the median accordingly.\nThis solution is not very efficient and takes O(m * n log n) time because we are using a built-in sorting algorithm. We can find a solution that is much faster.\nTime/Space Complexity Time Complexity: O(m) for addNum, O(m * n log n)forfindMedian` Space Complexity: O(n) Where m is the number of function calls and n is the length of the array. Heap Solution class MedianFinder { private var small: Heap\u0026lt;Int\u0026gt; private var large: Heap\u0026lt;Int\u0026gt; init() { self.small = Heap\u0026lt;Int\u0026gt;(sort: \u0026gt;) // Max-Heap self.large = Heap\u0026lt;Int\u0026gt;(sort: \u0026lt;) // Min-Heap } func addNum(_ num: Int) { if !large.isEmpty \u0026amp;\u0026amp; num \u0026gt; large.min! { large.insert(num) } else { small.insert(num) } let smallCount = small.count let largeCount = large.count if smallCount \u0026gt; largeCount + 1 { let val = small.popMax()! large.insert(val) } if largeCount \u0026gt; smallCount + 1 { let val = large.popMin()! small.insert(val) } } func findMedian() -\u0026gt; Double { let smallCount = small.count let largeCount = large.count if smallCount \u0026gt; largeCount { return Double(small.max!) } if largeCount \u0026gt; smallCount { return Double(large.min!) } return Double(small.max! + large.min!) / 2 } } Explanation A more optimal way to solve this problem is by using Min-Heap and Max-Heap. We use additional collections from the Apple Swift package that provide a built-in Heap data structure. A heap can behave as either a Min-Heap or a Max-Heap.\nThe Heap solution is more efficient because it can insert elements in O(log n) time and find the min or max in O(1) time.\nTo solve this problem, we need two heaps:\nSmall Heap (Max-Heap) Large Heap (Min-Heap) We insert elements into one of the heaps, and if the condition small heap size ≤ large heap size is not satisfied, we move elements accordingly.\nFor example:\nsmall = [2, 7], large = [3] We find the max in small and remove it. We add it to large, so now small = [2], large = [3, 7]. Another condition:\nIf small heap size is less than large heap size: We find the min in large, remove it, and add it to small. Example: small = [2], large = [3, 7, 4] → small = [2, 3], large = [7, 4]. We calculate the median by finding the max value in small and min value in large.\nTime/Space Complexity Time Complexity: O(m * log n) for addNum, O(m) for findMedian Space Complexity: O(n) Where m is the number of function calls and n is the length of the array. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-find-median-from-data-stream/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003cstrong\u003emedian\u003c/strong\u003e is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, for \u003ccode\u003earr = [2,3,4]\u003c/code\u003e, the median is \u003ccode\u003e3\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor example, for \u003ccode\u003earr = [2,3]\u003c/code\u003e, the median is \u003ccode\u003e(2 + 3) / 2 = 2.5\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplement the \u003ccode\u003eMedianFinder\u003c/code\u003e class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMedianFinder()\u003c/code\u003e initializes the \u003ccode\u003eMedianFinder\u003c/code\u003e object.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid addNum(int num)\u003c/code\u003e adds the integer \u003ccode\u003enum\u003c/code\u003e from the data stream to the data structure.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edouble findMedian()\u003c/code\u003e returns the median of all elements so far. Answers within \u003ccode\u003e10⁻⁵\u003c/code\u003e of the actual answer will be accepted.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;MedianFinder\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;addNum\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;addNum\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;findMedian\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;addNum\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;findMedian\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[[],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eExplanation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eMedianFinder\u003c/span\u003e \u003cspan class=\"n\"\u003emedianFinder\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eMedianFinder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emedianFinder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddNum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// arr = [1]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emedianFinder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddNum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// arr = [1, 2]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emedianFinder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// return 1.5 (i.e., (1 + 2) / 2)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emedianFinder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddNum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// arr = [1, 2, 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emedianFinder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// return 2.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-10⁵ \u0026lt;= num \u0026lt;= 10⁵\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThere will be at least one element in the data structure before calling \u003ccode\u003efindMedian()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAt most \u003ccode\u003e5 * 10⁴\u003c/code\u003e calls will be made to \u003ccode\u003eaddNum\u003c/code\u003e and \u003ccode\u003efindMedian()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"follow-up\"\u003eFollow-up:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eIf all integer numbers from the stream are in the range \u003ccode\u003e[0, 100]\u003c/code\u003e, how would you optimize your solution?\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003e99%\u003c/code\u003e of all integer numbers from the stream are in the range \u003ccode\u003e[0, 100]\u003c/code\u003e, how would you optimize your solution?\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"sorting-solution\"\u003eSorting Solution\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMedianFinder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eaddNum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eOne approach to solving this problem is to apply a built-in sorting algorithm. To find the result, we use an array to collect all numbers added using the \u003ccode\u003eaddNum\u003c/code\u003e method.\u003c/p\u003e","title":"LeetCode - Blind 75 - Find Median from Data Stream"},{"content":"The Problem Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\nExamples Input: root = [1,2,3,null,null,4,5] Output: [1,2,3,null,null,4,5] Input: root = [] Output: [] Constraints The number of nodes in the tree is in the range [0, 10⁴]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 Depth-First Search Solution func serialize(_ root: TreeNode?) -\u0026gt; String { var res: [String] = [] func dfs(_ root: TreeNode?) { guard let root = root else { res.append(\u0026#34;nil\u0026#34;) return } res.append(String(root.val)) dfs(root.left) dfs(root.right) } dfs(root) return res.joined(separator: \u0026#34;,\u0026#34;) } func deserialize(_ data: String) -\u0026gt; TreeNode? { var values = data.components(separatedBy: \u0026#34;,\u0026#34;) var i = 0 func dfs() -\u0026gt; TreeNode? { if values[i] == \u0026#34;nil\u0026#34; { i += 1 return nil } let node = TreeNode(Int(values[i])!) i += 1 node.left = dfs() node.right = dfs() return node } return dfs() } Explanation The first step to solving this problem is serialize a node to a string: to do that, we need to find every value in the root node and decide how to represent null values. We will use \u0026quot;nil\u0026quot; for null, as this is the default behavior in Swift. To find the values, we use a depth-first search (DFS) algorithm, adding found values to an array. After DFS completes, we join the values with a comma separator.\nThe second step is to deserialize the data. To do this, we split the input string using the same comma separator we used when serializing the node. We use a DFS algorithm to reconstruct the tree, with one base case to verify if the value is \u0026quot;nil\u0026quot;.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Breadth-First Search Solution func serialize(_ root: TreeNode?) -\u0026gt; String { if root == nil { return \u0026#34;nil\u0026#34; } var res: [String] = [] var queue: [TreeNode?] = [root] while !queue.isEmpty { let node = queue.removeFirst() if node == nil { res.append(\u0026#34;nil\u0026#34;) } else { res.append(String(node!.val)) queue.append(node!.left) queue.append(node!.right) } } return res.joined(separator: \u0026#34;,\u0026#34;) } func deserialize(_ data: String) -\u0026gt; TreeNode? { var values = data.components(separatedBy: \u0026#34;,\u0026#34;) if values[0] == \u0026#34;nil\u0026#34; { return nil } let root = TreeNode(Int(values[0])!) var queue: [TreeNode?] = [root] var idx = 1 while !queue.isEmpty { let node = queue.removeFirst() if values[idx] != \u0026#34;nil\u0026#34; { node?.left = TreeNode(Int(values[idx])!) queue.append(node?.left) } idx += 1 if values[idx] != \u0026#34;nil\u0026#34; { node?.right = TreeNode(Int(values[idx])!) queue.append(node?.right) } idx += 1 } return root } Explanation Another way to solve this problem is by using a breadth-first search (BFS) algorithm. The string representation for null and the separator remain the same; we only change the underlying mechanism to traverse nodes when we serialize and find values to create new nodes when we deserialize the string.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-serialize-and-deserialize-binary-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\u003c/p\u003e","title":"LeetCode - Blind 75 - Serialize and Deserialize Binary Tree"},{"content":"The Problem A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node\u0026rsquo;s values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\nExamples Input: root = [1,2,3] Output: 6 Explanation: The optimal path is 2 -\u0026gt; 1 -\u0026gt; 3 with a path sum of 2 + 1 + 3 = 6. Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The optimal path is 15 -\u0026gt; 20 -\u0026gt; 7 with a path sum of 15 + 20 + 7 = 42. Constraints The number of nodes in the tree is in the range [1, 3 * 10⁴]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 Depth-First Search Solution func maxPathSum(_ root: TreeNode?) -\u0026gt; Int { var res = Int.min func dfs(_ root: TreeNode?) { guard let root = root else { return } let left = getMax(root.left) let right = getMax(root.right) res = max(res, root.val + left + right) dfs(root.left) dfs(root.right) } dfs(root) return res } func getMax(_ root: TreeNode?) -\u0026gt; Int { guard let root = root else { return 0 } let left = getMax(root.left) let right = getMax(root.right) let path = root.val + max(left, right) return max(0, path) } Explanation We can solve this problem using the DFS algorithm and an additional helper function needed to determine the path sum.\nTo do that, we start from the root and move to the left subtree to find the max path. For example, with root = [1,2,null,null,3,4,5], we move from root 1 to the left 2. Since the left subtree only has one value, our max path equals 2.\nAfter that, we go to the right subtree, which looks like [3,4,5]. Now, we calculate the max path for the left and right subtrees; it will be 4 and 5, respectively.\nFinally, we go back up to the root and calculate our result.\nThis is not a very efficient solution as it takes O(n²) time.\nTime/Space Complexity Time Complexity: O(n²) Space Complexity: O(n) Optimized DFS Solution func maxPathSum(_ root: TreeNode?) -\u0026gt; Int { var res: Int = root!.val func dfs(_ root: TreeNode?) -\u0026gt; Int { guard let root = root else { return 0 } var leftMax = dfs(root.left) var rightMax = dfs(root.right) leftMax = max(leftMax, 0) rightMax = max(rightMax, 0) res = max(res, root.val + leftMax + rightMax) return root.val + max(leftMax, rightMax) } dfs(root) return res } Explanation We can optimize the brute force DFS solution by eliminating the unnecessary recursion of the getMax helper function. All we need is to replace the getMax function with the built-in max function and return root.val + max(leftMax, rightMax). The rest remains the same.\nTime/Space Complexity Time Complexity: O(n) Space Complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-binary-tree-maximum-path-sum/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe path sum of a path is the sum of the node\u0026rsquo;s values in the path.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, return the maximum path sum of any non-empty path.\u003c/p\u003e","title":"LeetCode - Blind 75 - Binary Tree Maximum Path Sum"},{"content":"The Problem Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\nExamples Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] Input: preorder = [-1], inorder = [-1] Output: [-1] Constraints 1 \u0026lt;= preorder.length \u0026lt;= 3000 inorder.length == preorder.length -3000 \u0026lt;= preorder[i], inorder[i] \u0026lt;= 3000 preorder and inorder consist of unique values. Each value of inorder also appears in preorder. preorder is guaranteed to be the preorder traversal of the tree. inorder is guaranteed to be the inorder traversal of the tree. Depth First Search Solution func buildTree(_ preorder: [Int], _ inorder: [Int]) -\u0026gt; TreeNode? { if preorder.isEmpty || inorder.isEmpty { return nil } let rootVal = preorder[0] let root = TreeNode(rootVal) guard let mid = inorder.firstIndex(of: rootVal) else { return nil } if mid \u0026gt; 0 { root.left = buildTree(Array(preorder[1...mid]), Array(inorder[0..\u0026lt;mid])) } if mid \u0026lt; inorder.count - 1 { root.right = buildTree(Array(preorder[mid + 1..\u0026lt;preorder.count]), Array(inorder[mid + 1..\u0026lt;inorder.count])) } return root } Explanation We can solve this problem by understanding how preorder and inorder traversal work.\nPreorder Traversal:\nFor preorder traversal, we start from the root, then move to the left subtree, and after that to the right subtree. For example, with the input preorder = [3,9,20,15,7], the root is always the first element in the array (in this case, 3). Knowing this, we can recursively reconstruct the left and right subtrees.\nInorder Traversal:\nInorder traversal starts with the left subtree first, then moves to the root, and after that to the right subtree. For example, with the input inorder = [9,3,15,20,7], every value to the left of the root belongs to the left subtree, and every value to the right of the root belongs to the right subtree.\nUsing this information, we can find the root and then partition the arrays into subarrays to reconstruct the tree.\nThis is not a very efficient solution and takes O(n^2) time and space, but we can optimize it.\nTime/Space Complexity Time complexity: O(n^2) Space complexity: O(n^2) DFS Optimal Solution func buildTree(_ preorder: [Int], _ inorder: [Int]) -\u0026gt; TreeNode? { var indices: [Int: Int] = [:] for (i, v) in inorder.enumerated() { indices.updateValue(i, forKey: v) } var preIdx = 0 func dfs(_ l: Int, _ r: Int) -\u0026gt; TreeNode? { if l \u0026gt; r { return nil } let rootVal = preorder[preIdx] preIdx += 1 let root = TreeNode(rootVal) let mid = indices[rootVal]! root.left = dfs(l, mid - 1) root.right = dfs(mid + 1, r) return root } return dfs(0, inorder.count - 1) } Explanation We can solve this problem in a more optimal way by using the DFS algorithm and a hashmap. The logic behind the solution stays the same: we find the root value from the preorder array, then find the mid index in the inorder array, and build the tree using recursion.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-construct-binary-tree-from-preorder-and-inorder-traversal/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven two integer arrays \u003ccode\u003epreorder\u003c/code\u003e and \u003ccode\u003einorder\u003c/code\u003e where \u003ccode\u003epreorder\u003c/code\u003e is the preorder traversal of a binary tree and \u003ccode\u003einorder\u003c/code\u003e is the inorder traversal of the same tree, construct and return the binary tree.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-21dff\" hidden\u003e\n    \u003clabel for=\"zoomCheck-21dff\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/tree.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= preorder.length \u0026lt;= 3000\u003c/li\u003e\n\u003cli\u003einorder.length == preorder.length\u003c/li\u003e\n\u003cli\u003e-3000 \u0026lt;= preorder[i], inorder[i] \u0026lt;= 3000\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epreorder\u003c/code\u003e and \u003ccode\u003einorder\u003c/code\u003e consist of unique values.\u003c/li\u003e\n\u003cli\u003eEach value of \u003ccode\u003einorder\u003c/code\u003e also appears in \u003ccode\u003epreorder\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epreorder\u003c/code\u003e is guaranteed to be the preorder traversal of the tree.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einorder\u003c/code\u003e is guaranteed to be the inorder traversal of the tree.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"depth-first-search-solution\"\u003eDepth First Search Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuildTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erootVal\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erootVal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emid\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirstIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eof\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003erootVal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuildTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e]),\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mf\"\u003e0.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuildTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e]),\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can solve this problem by understanding how preorder and inorder traversal work.\u003c/p\u003e","title":"LeetCode - Blind 75 - Construct Binary Tree from Preorder and Inorder Traversal"},{"content":"The Problem Given the root of a binary search tree and an integer k, return the kth smallest value (1-indexed) among all the values of the nodes in the tree.\nExamples Input: root = [3,1,4,null,2], k = 1 Output: 1 Input: root = [5,3,6,2,4,null,null,1], k = 3 Output: 3 Constraints The number of nodes in the tree is n. 1 \u0026lt;= k \u0026lt;= n \u0026lt;= 10⁴ 0 \u0026lt;= Node.val \u0026lt;= 10⁴ Follow-up: If the BST is modified often (i.e., we can perform insert and delete operations) and you need to find the kth smallest element frequently, how would you optimize?\nDepth-First Search Solution func kthSmallest(_ root: TreeNode?, _ k: Int) -\u0026gt; Int { var arr: [Int] = [] func dfs(_ node: TreeNode?) { if node == nil { return } dfs(node!.left) arr.append(node!.val) dfs(node!.right) } dfs(root) return arr[k - 1] } Explanation When it comes to searching in trees, it usually means we can use the Depth-First Search (DFS) algorithm. In this problem, we can use inorder traversal.\nInorder traversal visits the left subtree first, then the parent node, and finally all nodes in the right subtree. Knowing this, we can use it to our advantage to solve this problem efficiently.\nIn our case, for the root = [3,1,4,null,2], k = 1, the arr will look like [1, 2, 3, 4], and the result will be 1.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Iterative DFS Solution func kthSmallest(_ root: TreeNode?, _ k: Int) -\u0026gt; Int { var stack: [TreeNode] = [] var curr = root var visitedCount = 0 while !stack.isEmpty || curr != nil { while curr != nil { stack.append(curr!) curr = curr!.left } curr = stack.removeLast() visitedCount += 1 if visitedCount == k { return curr!.val } curr = curr!.right } return -1 // This line should ideally never be reached due to constraints. } Explanation We can solve this problem using another approach: iterative DFS. This involves maintaining a stack to handle left subtree nodes first, then checking the parent node, and finally moving to the right subtree.\nThe space complexity is the same as the recursive inorder DFS solution due to the additional stack data structure.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-kth-smallest-element-in-a-bst/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary search tree and an integer \u003ccode\u003ek\u003c/code\u003e, return the \u003ccode\u003ekth\u003c/code\u003e smallest value (1-indexed) among all the values of the nodes in the tree.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-6ddd2\" hidden\u003e\n    \u003clabel for=\"zoomCheck-6ddd2\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/kthtree1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-e4401\" hidden\u003e\n    \u003clabel for=\"zoomCheck-e4401\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/kthtree2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in the tree is \u003ccode\u003en\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= k \u0026lt;= n \u0026lt;= 10⁴\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= Node.val \u0026lt;= 10⁴\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFollow-up:\u003c/strong\u003e If the BST is modified often (i.e., we can perform insert and delete operations) and you need to find the \u003ccode\u003ekth\u003c/code\u003e smallest element frequently, how would you optimize?\u003c/p\u003e","title":"LeetCode - Blind 75 - Kth Smallest Element in a BST"},{"content":"The Problem Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key. Both the left and right subtrees must also be binary search trees. A subtree of treeName is a tree consisting of a node in treeName and all of its descendants.\nExamples Input: root = [2,1,3] Output: true Input: root = [5,1,4,null,null,3,6] Output: false Explanation: The root node\u0026#39;s value is 5, but its right child\u0026#39;s value is 4. Constraints The number of nodes in the tree is in the range [1, 10⁴]. -2³¹ \u0026lt;= Node.val \u0026lt;= 2³¹ - 1 Depth-First Search Solution func isValidBST(_ root: TreeNode?) -\u0026gt; Bool { func valid(_ node: TreeNode?, _ left: Int, _ right: Int) -\u0026gt; Bool { if node == nil { return true } if !(node!.val \u0026lt; right \u0026amp;\u0026amp; node!.val \u0026gt; left) { return false } return (valid(node!.left, left, node!.val) \u0026amp;\u0026amp; valid(node!.right, node!.val, right)) } return valid(root, Int.min, Int.max) } Explanation One of the ways to solve this problem is by using the DFS algorithm. The DFS algorithm allows us to retrieve the left and right subtree node values and determine if the root node is a valid BST.\nTo do this, we need to check a few base cases:\nIf the node is nil, this means it is a valid node. If the condition (node!.val \u0026lt; right \u0026amp;\u0026amp; node!.val \u0026gt; left) is false, this means it is an invalid BST. You can see that in the valid method, we have left and right parameters. We use them as boundaries for our verification condition.\nFor example, with root = [2,1,3]:\nWe start with left = Int.min and right = Int.max, so our condition Int.min \u0026lt; 2 \u0026lt; Int.max is true. Next, we move to the left subtree with value 1. Now, our condition looks like this: Int.min \u0026lt; 1 \u0026lt; 2, which is also true. Finally, we look at the right subtree with value 3, and the condition 2 \u0026lt; 3 \u0026lt; Int.max is also true. Time/Space Complexity Time complexity: O(n) Space complexity: O(n) Breadth-First Search Solution func isValidBST(_ root: TreeNode?) -\u0026gt; Bool { if root == nil { return true } var queue = [(root, Int.min, Int.max)] while !queue.isEmpty { let (node, left, right) = queue.removeFirst() if !(node!.val \u0026lt; right \u0026amp;\u0026amp; node!.val \u0026gt; left) { return false } if node?.left != nil { queue.append((node!.left, left, node!.val)) } if node?.right != nil { queue.append((node!.right, node!.val, right)) } } return true } Explanation We can solve this problem in another way by using the BFS algorithm. The BFS algorithm allows us to move level by level and determine the node, left, and right values.\nThe condition for validation remains the same.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-validate-binary-search-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, determine if it is a valid binary search tree (BST).\u003c/p\u003e\n\u003cp\u003eA \u003cstrong\u003evalid BST\u003c/strong\u003e is defined as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe left subtree of a node contains only nodes with keys \u003cstrong\u003eless than\u003c/strong\u003e the node\u0026rsquo;s key.\u003c/li\u003e\n\u003cli\u003eThe right subtree of a node contains only nodes with keys \u003cstrong\u003egreater than\u003c/strong\u003e the node\u0026rsquo;s key.\u003c/li\u003e\n\u003cli\u003eBoth the left and right subtrees must also be binary search trees.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA \u003cstrong\u003esubtree\u003c/strong\u003e of \u003ccode\u003etreeName\u003c/code\u003e is a tree consisting of a node in \u003ccode\u003etreeName\u003c/code\u003e and all of its descendants.\u003c/p\u003e","title":"LeetCode - Blind 75 - Validate Binary Search Tree"},{"content":"The Problem Given the root of a binary tree, return the level order traversal of its nodes\u0026rsquo; values (i.e., from left to right, level by level).\nExamples Input: root = [3,9,20,null,null,15,7] Output: [[3],[9,20],[15,7]] Input: root = [1] Output: [[1]] Input: root = [] Output: [] Constraints The number of nodes in the tree is in the range [0, 2000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 BFS Solution func levelOrder(_ root: TreeNode?) -\u0026gt; [[Int]] { if root == nil { return [] } var queue: [TreeNode?] = [] queue.append(root) var res: [[Int]] = [] while !queue.isEmpty { var level: [Int] = [] for _ in 0 ..\u0026lt; queue.count { let node = queue.removeFirst() if let node = node { level.append(node.val) queue.append(node.left) queue.append(node.right) } } if !level.isEmpty { res.append(level) } } return res } Explanation When you see that a binary tree problem involves level order traversal, it means the solution usually implies the breadth-first search (BFS) algorithm. BFS is a common solution to this problem because, according to Wikipedia, breadth-first search is also called “level-order search.” The core idea behind BFS is to iterate level by level from top to bottom, and from left to right.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) DFS Solution func levelOrder(_ root: TreeNode?) -\u0026gt; [[Int]] { var res: [[Int]] = [] func dfs(_ node: TreeNode?, _ depth: Int) { guard let node = node else { return } if res.count == depth { res.append([]) } res[depth].append(node.val) dfs(node.left, depth + 1) dfs(node.right, depth + 1) } dfs(root, 0) return res } Explanation You can also solve this problem by using the depth-first search (DFS) algorithm. In this case, you will need to visit the left and right subtrees separately and count the depth accordingly.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-binary-tree-level-order-traversal/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, return the level order traversal of its nodes\u0026rsquo; values (i.e., from left to right, level by level).\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-98f10\" hidden\u003e\n    \u003clabel for=\"zoomCheck-98f10\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/tree1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = [1]\nOutput: [[1]]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = []\nOutput: []\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in the tree is in the range [0, 2000].\u003c/li\u003e\n\u003cli\u003e-1000 \u0026lt;= Node.val \u0026lt;= 1000\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"bfs-solution\"\u003eBFS Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003elevelOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremoveFirst\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWhen you see that a binary tree problem involves level order traversal, it means the solution usually implies the breadth-first search (BFS) algorithm. BFS is a common solution to this problem because, according to Wikipedia, breadth-first search is also called “level-order search.” The core idea behind BFS is to iterate level by level from top to bottom, and from left to right.\u003c/p\u003e","title":"LeetCode - Blind 75 - Binary Tree Level Order Traversal"},{"content":"The Problem Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\nExamples Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6. Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. Input: root = [2,1], p = 2, q = 1 Output: 2 Constraints The number of nodes in the tree is in the range [2, 10⁵]. -10⁹ \u0026lt;= Node.val \u0026lt;= 10⁹ All Node.val are unique. p != q p and q will exist in the BST. Recursive Solution func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -\u0026gt; TreeNode? { if root == nil || p == nil || q == nil { return nil } if (max(p!.val, q!.val)) \u0026lt; root!.val { return lowestCommonAncestor(root?.left, p, q) } else if (min(p!.val, q!.val)) \u0026gt; root!.val { return lowestCommonAncestor(root?.right, p, q) } else { return root } } Explanation If we slightly rephrase the definition of the problem: we need to find the split where both p and q nodes are in different subtrees.\nTo do that, we need to determine in which subtree we can find the p or q nodes.\nFor example, for nodes with p = 2, q = 8, the LCA will be 6.\nTime/Space Complexity Time complexity: O(h) Space complexity: O(h)\nWhere h is the height of the tree. Iterative Solution func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -\u0026gt; TreeNode? { var curr = root if p == nil { return nil } if q == nil { return nil } while curr != nil { if p!.val \u0026lt; curr!.val \u0026amp;\u0026amp; q!.val \u0026lt; curr!.val { curr = curr?.left } else if p!.val \u0026gt; curr!.val \u0026amp;\u0026amp; q!.val \u0026gt; curr!.val { curr = curr?.right } else { return curr } } return root } Explanation We can solve this problem using iteration. This solution is more memory-efficient because you don’t have recursive stack calls that take additional memory.\nThe algorithm looks like this:\nCompare p and q values with the curr value. If they are less than curr, move to the left subtree. If they are greater than curr, move to the right subtree. If one is less and the other is greater (or either equals curr), we’ve found the LCA. Time/Space Complexity Time complexity: O(h) - where h is the height of the tree Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-lowest-common-ancestor-of-a-binary-search-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes \u003ccode\u003ep\u003c/code\u003e and \u003ccode\u003eq\u003c/code\u003e as the lowest node in \u003ccode\u003eT\u003c/code\u003e that has both \u003ccode\u003ep\u003c/code\u003e and \u003ccode\u003eq\u003c/code\u003e as descendants (where we allow a node to be a descendant of itself).”\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-09a14\" hidden\u003e\n    \u003clabel for=\"zoomCheck-09a14\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/binarysearchtree_improved.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Lowest Common Ancestor of a Binary Search Tree"},{"content":"The Problem Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values as subRoot, and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node\u0026rsquo;s descendants. The tree tree could also be considered as a subtree of itself.\nExamples Input: root = [3,4,5,1,2], subRoot = [4,1,2] Output: true Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2] Output: false Constraints The number of nodes in the root tree is in the range [1, 2000]. The number of nodes in the subRoot tree is in the range [1, 1000]. -10⁴ \u0026lt;= root.val \u0026lt;= 10⁴ -10⁴ \u0026lt;= subRoot.val \u0026lt;= 10⁴ Depth-First Search Solution func isSubtree(_ root: TreeNode?, _ subRoot: TreeNode?) -\u0026gt; Bool { if subRoot == nil { return true } if root == nil { return false } if isEqual(root, subRoot) { return true } return isSubtree(root?.left, subRoot) || isSubtree(root?.right, subRoot) } func isEqual(_ root: TreeNode?, _ subRoot: TreeNode?) -\u0026gt; Bool { if root == nil \u0026amp;\u0026amp; subRoot == nil { return true } if root != nil \u0026amp;\u0026amp; subRoot != nil \u0026amp;\u0026amp; root?.val == subRoot?.val { return isEqual(root?.left, subRoot?.left) \u0026amp;\u0026amp; isEqual(root?.right, subRoot?.right) } return false } Explanation One way to solve this problem is by using the Depth-First Search (DFS) algorithm. Before that, we need to implement the isEqual helper function, which checks if the root and subRoot nodes are the same. We also handle a few base cases. As a result, we can determine if the subtree exists.\nTime/Space Complexity Time complexity: O(m * n) Space complexity: O(m + n)\nWhere m is the number of nodes in subRoot and n is the number of nodes in root. Breadth-First Search Solution func isSubtree(_ root: TreeNode?, _ subRoot: TreeNode?) -\u0026gt; Bool { var q: [TreeNode?] = [root] while !q.isEmpty { let node = q.removeFirst() if isEqual(node, subRoot) { return true } if node?.left != nil { q.append(node?.left) } if node?.right != nil { q.append(node?.right) } } return false } func isEqual(_ root: TreeNode?, _ subRoot: TreeNode?) -\u0026gt; Bool { var q1: [TreeNode?] = [root] var q2: [TreeNode?] = [subRoot] while !q1.isEmpty \u0026amp;\u0026amp; !q2.isEmpty { let nodeP = q1.removeFirst() let nodeQ = q2.removeFirst() if nodeP == nil \u0026amp;\u0026amp; nodeQ == nil { continue } if nodeP == nil || nodeQ == nil || nodeP?.val != nodeQ?.val { return false } q1.append(nodeP?.left) q1.append(nodeP?.right) q2.append(nodeQ?.left) q2.append(nodeQ?.right) } return q1.isEmpty \u0026amp;\u0026amp; q2.isEmpty } Explanation Another way to solve this problem is by using the Breadth-First Search (BFS) algorithm. It differs slightly from DFS because it is based on the queue data structure, uses iteration instead of recursion, and processes the tree level by level.\nTime/Space Complexity Time complexity: O(m * n) Space complexity: O(m + n)\nWhere m is the number of nodes in subRoot and n is the number of nodes in root. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-subtree-of-another-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the roots of two binary trees \u003ccode\u003eroot\u003c/code\u003e and \u003ccode\u003esubRoot\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if there is a subtree of \u003ccode\u003eroot\u003c/code\u003e with the same structure and node values as \u003ccode\u003esubRoot\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA subtree of a binary tree \u003ccode\u003etree\u003c/code\u003e is a tree that consists of a node in \u003ccode\u003etree\u003c/code\u003e and all of this node\u0026rsquo;s descendants. The tree \u003ccode\u003etree\u003c/code\u003e could also be considered as a subtree of itself.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-26d95\" hidden\u003e\n    \u003clabel for=\"zoomCheck-26d95\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/subtree1-tree.jpg#center\" alt=\"Example 1\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Subtree of Another Tree"},{"content":"The Problem Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same values.\nExamples Input: p = [1,2,3], q = [1,2,3] Output: true Input: p = [1,2], q = [1,null,2] Output: false Input: p = [1,2,1], q = [1,1,2] Output: false Constraints The number of nodes in both trees is in the range [0, 100]. -10⁴ \u0026lt;= Node.val \u0026lt;= 10⁴ Depth First Search Solution func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -\u0026gt; Bool { if p == nil \u0026amp;\u0026amp; q == nil { return true } if p == nil || q == nil { return false } if p?.val != q?.val { return false } return isSameTree(p?.left, q?.left) \u0026amp;\u0026amp; isSameTree(p?.right, q?.right) } Explanation One way to solve this problem is using depth-first search. We need to be very cautious with base cases, as they can affect the result. In our case, the trees can be the same if p and q are both nil and their values are equal. In all other cases, the trees are not the same.\nIf you have never implemented the DFS algorithm before, you can refer to this Wiki example.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(h), where h is the height of the tree Breadth First Search Solution func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -\u0026gt; Bool { var q1: [TreeNode?] = [p] var q2: [TreeNode?] = [q] while !q1.isEmpty \u0026amp;\u0026amp; !q2.isEmpty { let nodeP = q1.removeFirst() let nodeQ = q2.removeFirst() if nodeP == nil \u0026amp;\u0026amp; nodeQ == nil { continue } if nodeP == nil || nodeQ == nil || nodeP?.val != nodeQ?.val { return false } q1.append(nodeP?.left) q1.append(nodeP?.right) q2.append(nodeQ?.left) q2.append(nodeQ?.right) } return q1.isEmpty \u0026amp;\u0026amp; q2.isEmpty } Explanation Another way to solve this problem is by using the breadth-first search algorithm. In this case, we use two queues and a few additional checks to determine the equality of the trees. Trees can be the same if p and q are both nil and their values are equal. In all other cases, the trees are not the same.\nIf you have never implemented the BFS algorithm before, you can refer to this Wiki example.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-same-tree/","summary":"\u003ch4 id=\"the-problem\"\u003eThe Problem\u003c/h4\u003e\n\u003cp\u003eGiven the roots of two binary trees \u003ccode\u003ep\u003c/code\u003e and \u003ccode\u003eq\u003c/code\u003e, write a function to check if they are the same or not.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTwo binary trees are considered the same if they are structurally identical, and the nodes have the same values.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-55033\" hidden\u003e\n    \u003clabel for=\"zoomCheck-55033\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/ex1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-17e6e\" hidden\u003e\n    \u003clabel for=\"zoomCheck-17e6e\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/ex2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: p = [1,2], q = [1,null,2]\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-1471d\" hidden\u003e\n    \u003clabel for=\"zoomCheck-1471d\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/ex3.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Same Tree"},{"content":"The Problem Given the root of a binary tree, return its maximum depth.\nA binary tree\u0026rsquo;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nExamples Input: root = [3,9,20,null,null,15,7] Output: 3 Input: root = [1,null,2] Output: 2 Constraints The number of nodes in the tree is in the range [0, 10⁴]. -100 \u0026lt;= Node.val \u0026lt;= 100 Brute Force Solution func maxDepth(_ root: TreeNode?) -\u0026gt; Int { if root == nil { return 0 } return 1 + max(maxDepth(root?.left), maxDepth(root?.right)) } Explanation We can solve this problem using recursion by calling the maxDepth function on the left and right child nodes. This approach helps us find the longest path down the tree.\nTime/Space Complexity Time Complexity: O(n), where n is the number of nodes in the tree. Space Complexity: O(h), where h is the height of the tree. BFS Solution func maxDepth(_ root: TreeNode?) -\u0026gt; Int { if root == nil { return 0 } var q: [TreeNode?] = [root] var level = 0 while !q.isEmpty { for _ in 0 ..\u0026lt; q.count { let node = q.removeFirst() if node?.left != nil { q.append(node?.left) } if node?.right != nil { q.append(node?.right) } } level += 1 } return level } Explanation We can solve this problem using the BFS algorithm by counting the levels of the tree. If you\u0026rsquo;ve never implemented BFS before, you can check the pseudocode section on Wikipedia to learn more about it.\nTime/Space Complexity Time Complexity: O(n) Space Complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-maximum-depth-of-binary-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, return its maximum depth.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA binary tree\u0026rsquo;s \u003cstrong\u003emaximum depth\u003c/strong\u003e is the number of nodes along the longest path from the root node down to the farthest leaf node.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-83548\" hidden\u003e\n    \u003clabel for=\"zoomCheck-83548\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/tmp-tree.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in the tree is in the range \u003ccode\u003e[0, 10⁴]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-100 \u0026lt;= Node.val \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emaxDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaxDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emaxDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can solve this problem using recursion by calling the \u003ccode\u003emaxDepth\u003c/code\u003e function on the \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e child nodes. This approach helps us find the longest path down the tree.\u003c/p\u003e","title":"LeetCode - Blind 75 - Maximum Depth of Binary Tree"},{"content":"The Problem Given the root of a binary tree, invert the tree, and return its root.\nExamples Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1] Input: root = [2,1,3] Output: [2,3,1] Input: root = [] Output: [] Constraints The number of nodes in the tree is in the range [0, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Depth First Search Solution func invertTree(_ root: TreeNode?) -\u0026gt; TreeNode? { if root == nil { return nil } let tmp = root?.left root?.left = root?.right root?.right = tmp invertTree(root?.left) invertTree(root?.right) return root } Explanation When working with trees, we often consider two general ways to solve these problems: depth-first search (DFS) and breadth-first search (BFS).\nIn this case, we use the DFS algorithm, where we swap the left subtree with the right subtree and recursively call invertTree on the left and right nodes.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Breadth First Search Solution func invertTree(_ root: TreeNode?) -\u0026gt; TreeNode? { if root == nil { return nil } var q: [TreeNode?] = [root] while !q.isEmpty { let node = q.removeFirst() let tmp = node?.left node?.left = node?.right node?.right = tmp if node?.left != nil { q.append(node?.left) } if node?.right != nil { q.append(node?.right) } } return root } Explanation To solve this problem using BFS, we initialize a queue and traverse the tree level by level, swapping the left and right subtrees until the queue is empty.\nWe also update the queue by adding the left or right nodes if they exist.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-invert-binary-tree/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, invert the tree, and return its root.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-9fcfe\" hidden\u003e\n    \u003clabel for=\"zoomCheck-9fcfe\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/invert1-tree.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-021ab\" hidden\u003e\n    \u003clabel for=\"zoomCheck-021ab\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/invert2-tree.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = [2,1,3]\nOutput: [2,3,1]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: root = []\nOutput: []\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in the tree is in the range [0, 100].\u003c/li\u003e\n\u003cli\u003e-100 \u0026lt;= Node.val \u0026lt;= 100\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"depth-first-search-solution\"\u003eDepth First Search Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einvertTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003einvertTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003einvertTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eroot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWhen working with trees, we often consider two general ways to solve these problems: depth-first search (DFS) and breadth-first search (BFS).\u003cbr\u003e\nIn this case, we use the DFS algorithm, where we swap the \u003ccode\u003eleft\u003c/code\u003e subtree with the \u003ccode\u003eright\u003c/code\u003e subtree and recursively call \u003ccode\u003einvertTree\u003c/code\u003e on the \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e nodes.\u003c/p\u003e","title":"LeetCode - Blind 75 - Invert Binary Tree"},{"content":"The problem You are given an array of k linked lists lists, each linked list is sorted in ascending order.\nMerge all the linked lists into one sorted linked list and return it.\nExamples Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked lists are: [ 1-\u0026gt;4-\u0026gt;5, 1-\u0026gt;3-\u0026gt;4, 2-\u0026gt;6 ] merging them into one sorted list: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6 Input: lists = [] Output: [] Input: lists = [[]] Output: [] Constraints k == lists.length 0 \u0026lt;= k \u0026lt;= 10^4 0 \u0026lt;= lists[i].length \u0026lt;= 500 -10^4 \u0026lt;= lists[i][j] \u0026lt;= 10^4 lists[i] is sorted in ascending order. The sum of lists[i].length will not exceed 10^4. Brute Force Solution func mergeKLists(_ lists: [ListNode?]) -\u0026gt; ListNode? { var nodes: [Int] = [] // Step 1 for i in 0..\u0026lt;lists.count { var lst = lists[i] while lst != nil { nodes.append(lst!.val) lst = lst?.next } } // Step 2 nodes.sort() // Step 3 var res = ListNode(0) var curr: ListNode? = res for node in nodes { curr?.next = ListNode(node) curr = curr?.next } return res.next } Explanation We can solve this problem by separating it into three steps:\nFind all node values in the lists: This way, we can create an unsorted single list. Sort the created list: This allows us to form a sorted linked list. Create a sorted linked list from the sorted values. Time/Space Complexity Time complexity: O(n * m) where n is the length of lists and m is the length of the linked lists. Space complexity: O(n). Solution 2 func mergeKLists(_ lists: [ListNode?]) -\u0026gt; ListNode? { if lists.isEmpty { return nil } var lists = lists while lists.count \u0026gt; 1 { var mergedLists: [ListNode?] = [] for i in stride(from: 0, to: lists.count, by: 2) { var l1 = lists[i] var l2: ListNode? if i + 1 \u0026lt; lists.count { l2 = lists[i + 1] } mergedLists.append(merge(l1, l2)) } lists = mergedLists } return lists[0] } func merge(_ l1: ListNode?, _ l2: ListNode?) -\u0026gt; ListNode? { let dummyNode = ListNode() var l1 = l1 var l2 = l2 var tail: ListNode? = dummyNode while l1 != nil \u0026amp;\u0026amp; l2 != nil { if l1!.val \u0026lt; l2!.val { tail?.next = l1 l1 = l1!.next } else { tail?.next = l2 l2 = l2!.next } tail = tail?.next } tail?.next = l1 ?? l2 return dummyNode.next } Explanation We can solve this problem by dividing it into sub-problems:\nFind the first and second linked lists: Iterate through lists.count until it equals 1, using stride with step = 2 to find the first and second portions of the linked lists. Merge them: Use the merge function for linked lists, which is a common problem in itself. Time/Space Complexity Time complexity: O(n * log k) Space complexity: O(k)\nWhere k is the total number of lists, and n is the total number of nodes across k lists. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-merge-k-sorted-lists/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an array of \u003ccode\u003ek\u003c/code\u003e linked lists \u003ccode\u003elists\u003c/code\u003e, each linked list is sorted in ascending order.\u003cbr\u003e\nMerge all the linked lists into one sorted linked list and return it.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elists\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e],[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e],[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eExplanation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003elinked\u003c/span\u003e \u003cspan class=\"n\"\u003elists\u003c/span\u003e \u003cspan class=\"n\"\u003eare\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emerging\u003c/span\u003e \u003cspan class=\"n\"\u003ethem\u003c/span\u003e \u003cspan class=\"n\"\u003einto\u003c/span\u003e \u003cspan class=\"n\"\u003eone\u003c/span\u003e \u003cspan class=\"bp\"\u003esorted\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elists\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elists\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[[]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ek == lists.length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= k \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= lists[i].length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-10^4 \u0026lt;= lists[i][j] \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elists[i]\u003c/code\u003e is sorted in ascending order.\u003c/li\u003e\n\u003cli\u003eThe sum of \u003ccode\u003elists[i].length\u003c/code\u003e will not exceed \u003ccode\u003e10^4\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emergeKLists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003elists\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Step 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003elists\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003elst\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elists\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elst\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003elst\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elst\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Step 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Step 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003enodes\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can solve this problem by separating it into three steps:\u003c/p\u003e","title":"LeetCode - Blind 75 - Merge k Sorted Lists"},{"content":"The Problem Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that the tail\u0026rsquo;s next pointer is connected to. Note that pos is not passed as a parameter.\nReturn true if there is a cycle in the linked list. Otherwise, return false.\nExamples Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). Input: head = [1,2], pos = 0 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 0th node. Input: head = [1], pos = -1 Output: false Explanation: There is no cycle in the linked list. Constraints The number of nodes in the list is in the range [0, 10^4]. -10^5 \u0026lt;= Node.val \u0026lt;= 10^5 pos is -1 or a valid index in the linked list. Follow-up: Can you solve it using O(1) (i.e., constant) memory?\nBrute Force Solution func hasCycle(_ head: ListNode?) -\u0026gt; Bool { var seen: Set\u0026lt;ListNode\u0026gt; = [] var curr = head while curr != nil { if seen.contains(curr!) { return true } seen.insert(curr!) curr = curr?.next } return false } Explanation We can solve this problem in a brute-force way using additional memory with a Set. By iterating through all nodes in head and checking if seen contains the current node, we can determine the result.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Slow/Fast Pointers Solution func hasCycle(_ head: ListNode?) -\u0026gt; Bool { var slow = head var fast = head while fast != nil \u0026amp;\u0026amp; fast?.next != nil { slow = slow?.next fast = fast?.next?.next if slow === fast { return true } } return false } Explanation The slow/fast pointer technique solves the problem with constant memory space. We start from the beginning of head and move the slow pointer by one step and the fast pointer by two steps.\nFor example, in the case of input [1, 2, 3, 4] with pos = 1 (which corresponds to the value 2), the fast and slow pointers will eventually meet at the same position with value 2.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-linked-list-cycle/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven \u003ccode\u003ehead\u003c/code\u003e, the head of a linked list, determine if the linked list has a cycle in it.\u003cbr\u003e\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the \u003ccode\u003enext\u003c/code\u003e pointer. Internally, \u003ccode\u003epos\u003c/code\u003e is used to denote the index of the node that the tail\u0026rsquo;s \u003ccode\u003enext\u003c/code\u003e pointer is connected to. Note that \u003ccode\u003epos\u003c/code\u003e is not passed as a parameter.\u003cbr\u003e\nReturn \u003ccode\u003etrue\u003c/code\u003e if there is a cycle in the linked list. Otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e","title":"LeetCode - Blind 75 - Linked List Cycle"},{"content":"The Problem Given the head of a linked list, remove the nth node from the end of the list and return its head.\nExamples Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Input: head = [1], n = 1 Output: [] Input: head = [1,2], n = 1 Output: [1] Constraints The number of nodes in the list is sz. 1 \u0026lt;= sz \u0026lt;= 30 0 \u0026lt;= Node.val \u0026lt;= 100 1 \u0026lt;= n \u0026lt;= sz Brute Force Solution func removeNthFromEnd(_ head: ListNode?, _ n: Int) -\u0026gt; ListNode? { var nodes: [ListNode] = [] var curr = head while curr != nil { nodes.append(curr!) curr = curr!.next } let removeIndex = nodes.count - n if removeIndex == 0 { return head?.next } nodes[removeIndex - 1].next = nodes[removeIndex].next return head } Explanation One way to solve this problem is to use extra memory by iterating over all elements in head and storing them in an array. The brute force solution allows us to know the index of each element and delete the node.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Recursive Solution func rec(_ head: ListNode?, _ n: inout Int) -\u0026gt; ListNode? { guard let head = head else { return nil } head.next = rec(head.next, \u0026amp;n) n -= 1 if n == 0 { return head.next } return head } func removeNthFromEnd(_ head: ListNode?, _ n: Int) -\u0026gt; ListNode? { var n = n return rec(head, \u0026amp;n) } Explanation If you take a closer look, the recursive solution is no different from the brute force solution and uses the same time and space complexity.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Two Pointers Solution func removeNthFromEnd(_ head: ListNode?, _ n: Int) -\u0026gt; ListNode? { let dummyNode = ListNode(0, head) var n = n var curr = head var l: ListNode? = dummyNode var r: ListNode? = head while n \u0026gt; 0 \u0026amp;\u0026amp; r != nil { r = r?.next n -= 1 } while r != nil { l = l?.next r = r?.next } l?.next = l?.next?.next return dummyNode.next } Explanation We can solve this problem in a more memory-efficient way by using the two-pointers technique. We create an offset between the left and right pointers by looking at the nth node. The right pointer is shifted by n, while the left pointer starts from 0 and moves by 1. When the right pointer becomes nil, the left pointer will point to the node we need to delete.\nFor example, for the input [1, 2, 3, 4, 5] and n = 2, at the start, the left pointer will be at 1, and the right pointer will be at 3. We keep shifting pointers until the right pointer reaches the end of the list. At this point, the left pointer will be at 4, and the right pointer will be nil.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-remove-nth-node-from-end-of-list/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003ehead\u003c/code\u003e of a linked list, remove the \u003ccode\u003enth\u003c/code\u003e node from the end of the list and return its head.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3c7b9\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3c7b9\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/remove_ex1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: head = [1], n = 1\nOutput: []\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: head = [1,2], n = 1\nOutput: [1]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in the list is \u003ccode\u003esz\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= sz \u0026lt;= 30\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= Node.val \u0026lt;= 100\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= n \u0026lt;= sz\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eremoveNthFromEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eremoveIndex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eremoveIndex\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eremoveIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eremoveIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ehead\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eOne way to solve this problem is to use extra memory by iterating over all elements in \u003ccode\u003ehead\u003c/code\u003e and storing them in an array. The brute force solution allows us to know the index of each element and delete the node.\u003c/p\u003e","title":"LeetCode - Blind 75 - Remove Nth Node From End of List"},{"content":"The Problem You are given the head of a singly linked list. The list can be represented as:\nL0 → L1 → … → Ln - 1 → Ln\nReorder the list to be in the following form:\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\nYou may not modify the values in the list\u0026rsquo;s nodes. Only the nodes themselves may be changed.\nExamples Input: head = [1,2,3,4] Output: [1,4,2,3] Input: head = [1,2,3,4,5] Output: [1,5,2,4,3] Constraints The number of nodes in the list is in the range [1, 5 * 10⁴]. 1 \u0026lt;= Node.val \u0026lt;= 1000 Brute Force Solution func reorderList(_ head: ListNode?) { guard let head = head else { return } var nodes: [ListNode] = [] var curr: ListNode? = head while curr != nil { nodes.append(curr!) curr = curr!.next } var l = 0 var r = nodes.count - 1 while l \u0026lt; r { nodes[l].next = nodes[r] l += 1 if l \u0026gt;= r { break } nodes[r].next = nodes[l] r -= 1 } nodes[l].next = nil } Explanation We can solve this problem using additional memory and the two-pointer technique.\nWhen we iterate over all nodes in head and add them to an array, we can precisely know the index of each value. By knowing this, we can reorder the list by updating the next pointer. For example, Input: head = [1,2,3,4] will look like this: 1 -\u0026gt; 4 -\u0026gt; 2 -\u0026gt; 3 -\u0026gt; nil.\nTime/Space Complexity Time Complexity: O(n) Space Complexity: O(n) Slow/Fast Pointers Solution func reorderList(_ head: ListNode?) { guard let head = head else { return } var slow: ListNode? = head var fast = head.next // Find middle while fast != nil \u0026amp;\u0026amp; fast?.next != nil { slow = slow?.next fast = fast?.next?.next } var second = slow?.next slow?.next = nil var prev: ListNode? // Reverse second half while second != nil { let tmp = second?.next second?.next = prev prev = second second = tmp } var first: ListNode? = head second = prev // Merge two halves while second != nil { let tmp1 = first?.next let tmp2 = second?.next first?.next = second second?.next = tmp1 first = tmp1 second = tmp2 } } Explanation To solve this problem in O(1) memory, we reverse the second half of the list.\nTo find the second half, we use slow and fast pointers by shifting the slow pointer by one step and the fast pointer by two steps. Finally, we merge the two halves to get the result.\nTime/Space Complexity Time Complexity: O(n) Space Complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-reorder-list/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eYou are given the head of a singly linked list. The list can be represented as:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eL0 → L1 → … → Ln - 1 → Ln\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eReorder the list to be in the following form:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eYou may not modify the values in the list\u0026rsquo;s nodes. Only the nodes themselves may be changed.\u003c/p\u003e","title":"LeetCode - Blind 75 - Reorder List"},{"content":"The Problem You are given the heads of two sorted linked lists, list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\nExamples Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Input: list1 = [], list2 = [] Output: [] Input: list1 = [], list2 = [0] Output: [0] Constraints The number of nodes in both lists is in the range [0, 50]. -100 \u0026lt;= Node.val \u0026lt;= 100 Both list1 and list2 are sorted in non-decreasing order. Recursive Solution func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -\u0026gt; ListNode? { guard let list1 = list1 else { return list2 } guard let list2 = list2 else { return list1 } if list1.val \u0026lt;= list2.val { list1.next = mergeTwoLists(list1.next, list2) return list1 } else { list2.next = mergeTwoLists(list1, list2.next) return list2 } } Explanation Before moving to the part where we use recursion, we need to handle the base case and check list1 and list2 for nil values. Then we compare the node values and move the next pointer accordingly.\nFor example, with input list1 = [1,2,4] and list2 = [1,3,5], we first move the list1.next pointer because the condition list1.val \u0026lt;= list2.val with values 1 and 1 is true. The output at this step looks like 1. After that, we move list2.next because the list1 input now equals 2 and the condition list1.val \u0026lt;= list2.val becomes false.\nTime and Space Complexity Time Complexity: O(n) Space Complexity: O(n) Iterative Solution func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -\u0026gt; ListNode? { let dummyNode = ListNode() var list1 = list1 var list2 = list2 var tail: ListNode? = dummyNode while list1 != nil \u0026amp;\u0026amp; list2 != nil { if list1!.val \u0026lt; list2!.val { tail?.next = list1 list1 = list1?.next } else { tail?.next = list2 list2 = list2?.next } tail = tail?.next } tail?.next = list1 ?? list2 return dummyNode.next } Explanation The iterative solution uses the same logic as the recursive one with an additional trick: the dummyNode. This helps avoid edge cases related to the initialization of the node. This solution is memory-efficient (O(1)) because it does not require additional memory allocation.\nTime and Space Complexity Time Complexity: O(n) Space Complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-merge-two-sorted-lists/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eYou are given the heads of two sorted linked lists, \u003ccode\u003elist1\u003c/code\u003e and \u003ccode\u003elist2\u003c/code\u003e.\u003cbr\u003e\nMerge the two lists into one \u003cstrong\u003esorted\u003c/strong\u003e list. The list should be made by splicing together the nodes of the first two lists.\u003cbr\u003e\nReturn the head of the merged linked list.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-85057\" hidden\u003e\n    \u003clabel for=\"zoomCheck-85057\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/merge_ex1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in both lists is in the range \u003ccode\u003e[0, 50]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-100 \u0026lt;= Node.val \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eBoth \u003ccode\u003elist1\u003c/code\u003e and \u003ccode\u003elist2\u003c/code\u003e are sorted in \u003cstrong\u003enon-decreasing\u003c/strong\u003e order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"recursive-solution\"\u003eRecursive Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emergeTwoLists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eListNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003elist1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003elist2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elist1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emergeTwoLists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elist1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emergeTwoLists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elist2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eBefore moving to the part where we use recursion, we need to handle the base case and check \u003ccode\u003elist1\u003c/code\u003e and \u003ccode\u003elist2\u003c/code\u003e for \u003ccode\u003enil\u003c/code\u003e values. Then we compare the node values and move the \u003ccode\u003enext\u003c/code\u003e pointer accordingly.\u003c/p\u003e","title":"LeetCode - Blind 75 - Merge Two Sorted Lists"},{"content":"The problem Given the head of a singly linked list, reverse the list, and return the reversed list.\nExamples Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] Input: head = [1,2] Output: [2,1] Input: head = [] Output: [] Constraints The number of nodes in the list is in the range [0, 5000]. -5000 \u0026lt;= Node.val \u0026lt;= 5000 Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\nRecursive solution func reverseList(_ head: ListNode?) -\u0026gt; ListNode? { guard let head = head else { return nil } var newHead: ListNode? = head if head.next != nil { newHead = reverseList(head.next) head.next?.next = head } head.next = nil return newHead } Explanation For the recursive solution, we are going to reverse links between nodes; for example, for a node with values 1 -\u0026gt; 2 -\u0026gt; 3, we are going to change them to 3 -\u0026gt; 2 -\u0026gt; 1.\nWe can do it by replacing the link between the last and next element: head.next?.next = head.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Iterative solution func reverseList(_ head: ListNode?) -\u0026gt; ListNode? { var prev: ListNode? = nil var curr: ListNode? = head while curr != nil { var next = curr?.next curr?.next = prev prev = curr curr = next } return prev } Explanation The iterative solution looks less confusing than the recursive one. We can use three pointers prev, curr, and next and update them accordingly. In the case of input 1, 2, 3, the prev pointer will look like this: nil \u0026lt;- 1 \u0026lt;- 2 \u0026lt;- 3.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-reverse-linked-list/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003ehead\u003c/code\u003e of a singly linked list, reverse the list, and return the reversed list.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-0d8dc\" hidden\u003e\n    \u003clabel for=\"zoomCheck-0d8dc\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/rev1ex1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-4e3a4\" hidden\u003e\n    \u003clabel for=\"zoomCheck-4e3a4\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/rev1ex2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: head = [1,2]\nOutput: [2,1]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: head = []\nOutput: []\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in the list is in the range [0, 5000].\u003c/li\u003e\n\u003cli\u003e-5000 \u0026lt;= Node.val \u0026lt;= 5000\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\u003c/p\u003e","title":"LeetCode - Blind 75 - Reverse Linked List"},{"content":"The problem There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 \u0026lt;= k \u0026lt; nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\nExamples Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Input: nums = [1], target = 0 Output: -1 Constraints 1 \u0026lt;= nums.length \u0026lt;= 5000 -10⁴ \u0026lt;= nums[i] \u0026lt;= 10⁴ All values of nums are unique. nums is an ascending array that is possibly rotated. -10⁴ \u0026lt;= target \u0026lt;= 10⁴ Brute force solution func search(_ nums: [Int], _ target: Int) -\u0026gt; Int { for i in 0 ..\u0026lt; nums.count { if nums[i] == target { return i } } return -1 } Explanation The straightforward way to solve this problem is by iterating over all elements in the input and comparing each element with the target so that we can find the possible result. It is not a very efficient solution as it will take O(n) time, but we can achieve O(log n) time by using binary search.\nTime/space complexity Time complexity: O(n) Space complexity: O(1) Solution - 2 - Binary Search func search(_ nums: [Int], _ target: Int) -\u0026gt; Int { var l = 0 var r = nums.count - 1 // Find the pivot while l \u0026lt; r { let m = (l + r) / 2 if nums[m] \u0026gt; nums[r] { l = m + 1 } else { r = m } } let pivot = l // Search in the left part let res = binarySearch(0, pivot - 1, nums, target) if res != -1 { return res } // Search in the right part return binarySearch(pivot, nums.count - 1, nums, target) } func binarySearch( _ left: Int, _ right: Int, _ nums: [Int], _ target: Int ) -\u0026gt; Int { var left = left var right = right while left \u0026lt;= right { let mid = (left + right) / 2 if nums[mid] == target { return mid } else if nums[mid] \u0026lt; target { left = mid + 1 } else { right = mid - 1 } } return -1 } Explanation In the example above, we are searching for the pivot that we need to determine the portion of the array (left or right) that we are going to search. This solution is much better than brute force and takes O(log n) time.\nTime/space complexity Time complexity: O(log n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-search-in-rotated-sorted-array/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eThere is an integer array \u003ccode\u003enums\u003c/code\u003e sorted in ascending order (with distinct values).\u003cbr\u003e\nPrior to being passed to your function, \u003ccode\u003enums\u003c/code\u003e is possibly rotated at an unknown pivot index \u003ccode\u003ek (1 \u0026lt;= k \u0026lt; nums.length)\u003c/code\u003e such that the resulting array is \u003ccode\u003e[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]\u003c/code\u003e (0-indexed). For example, \u003ccode\u003e[0,1,2,4,5,6,7]\u003c/code\u003e might be rotated at pivot index \u003ccode\u003e3\u003c/code\u003e and become \u003ccode\u003e[4,5,6,7,0,1,2]\u003c/code\u003e.\u003cbr\u003e\nGiven the array \u003ccode\u003enums\u003c/code\u003e after the possible rotation and an integer \u003ccode\u003etarget\u003c/code\u003e, return the index of \u003ccode\u003etarget\u003c/code\u003e if it is in \u003ccode\u003enums\u003c/code\u003e, or \u003ccode\u003e-1\u003c/code\u003e if it is not in \u003ccode\u003enums\u003c/code\u003e.\u003cbr\u003e\nYou must write an algorithm with \u003ccode\u003eO(log n)\u003c/code\u003e runtime complexity.\u003c/p\u003e","title":"LeetCode - Blind 75 - Search in Rotated Sorted Array"},{"content":"The Problem Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n[4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in O(log n) time.\nExamples Input: nums = [3,4,5,1,2] Output: 1 Explanation: The original array was [1,2,3,4,5] rotated 3 times. Input: nums = [4,5,6,7,0,1,2] Output: 0 Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times. Input: nums = [11,13,15,17] Output: 11 Explanation: The original array was [11,13,15,17] and it was rotated 4 times. Constraints n == nums.length 1 \u0026lt;= n \u0026lt;= 5000 -5000 \u0026lt;= nums[i] \u0026lt;= 5000 All the integers of nums are unique. nums is sorted and rotated between 1 and n times. Brute Force Solution func findMin(_ nums: [Int]) -\u0026gt; Int { return nums.min()! } Explanation The easiest way to solve this problem is to use Swift\u0026rsquo;s built-in min function, but it takes O(n) time. Underline, it just loops through the entire input and finds the minimum element.\nThe more optimal way to solve this problem is to use binary search.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Solution - 2 - Binary Search func findMin(_ nums: [Int]) -\u0026gt; Int { var res = nums[0] var l = 0 var r = nums.count - 1 while l \u0026lt;= r { if nums[l] \u0026lt; nums[r] { res = min(res, nums[l]) break } let m = (l + r) / 2 res = min(res, nums[m]) if nums[m] \u0026gt;= nums[l] { l = m + 1 } else { r = m - 1 } } return res } Explanation This solution uses a slightly modified binary search; the prerequisite for binary search is that to achieve O(log n) time, you need sorted input.\nIn this solution, we use a slightly different approach. Since we are using a rotated array as input, we use the condition\nnums[m] \u0026gt;= nums[l] to look into the left or right side of the input nums and update pointers. For example, if we have the rotated array [3, 4, 5, 1, 2], our middle pointer will be 5, and the left pointer will be 3. Following the condition nums[m] \u0026gt;= nums[l], we update the left pointer. When that condition is not satisfied, for example, when the middle pointer is at 5 and the left pointer is at 1, we update the right pointer.\nTime/Space Complexity Time complexity: O(log n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-find-minimum-in-rotated-sorted-array/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eSuppose an array of length \u003ccode\u003en\u003c/code\u003e sorted in ascending order is rotated between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e times. For example, the array \u003ccode\u003enums = [0,1,2,4,5,6,7]\u003c/code\u003e might become:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e[4,5,6,7,0,1,2]\u003c/code\u003e if it was rotated \u003ccode\u003e4\u003c/code\u003e times.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[0,1,2,4,5,6,7]\u003c/code\u003e if it was rotated \u003ccode\u003e7\u003c/code\u003e times.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNotice that rotating an array \u003ccode\u003e[a[0], a[1], a[2], ..., a[n-1]]\u003c/code\u003e 1 time results in the array \u003ccode\u003e[a[n-1], a[0], a[1], a[2], ..., a[n-2]]\u003c/code\u003e.\u003cbr\u003e\nGiven the sorted rotated array \u003ccode\u003enums\u003c/code\u003e of unique elements, return the minimum element of this array.\u003cbr\u003e\nYou must write an algorithm that runs in \u003ccode\u003eO(log n)\u003c/code\u003e time.\u003c/p\u003e","title":"LeetCode - Blind 75 - Find Minimum in Rotated Sorted Array"},{"content":"The Problem Given a string s containing just the characters '(', ')', '{', '}', '[', and ']', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every closing bracket has a corresponding open bracket of the same type. Examples Input: s = \u0026#34;()\u0026#34; Output: true Input: s = \u0026#34;()[]{}\u0026#34; Output: true Input: s = \u0026#34;(]\u0026#34; Output: false Input: s = \u0026#34;([])\u0026#34; Output: true Constraints 1 \u0026lt;= s.length \u0026lt;= 10⁴ s consists of parentheses only '()[]{}'. Brute Force Solution func isValid(_ s: String) -\u0026gt; Bool { var s = s while s.contains(\u0026#34;()\u0026#34;) || s.contains(\u0026#34;{}\u0026#34;) || s.contains(\u0026#34;[]\u0026#34;) { s = s.replacingOccurrences(of: \u0026#34;()\u0026#34;, with: \u0026#34;\u0026#34;) s = s.replacingOccurrences(of: \u0026#34;{}\u0026#34;, with: \u0026#34;\u0026#34;) s = s.replacingOccurrences(of: \u0026#34;[]\u0026#34;, with: \u0026#34;\u0026#34;) } return s.isEmpty } Explanation The brute force way to solve this problem is to check if the string contains \u0026quot;()\u0026quot;, \u0026quot;{}\u0026quot;, \u0026quot;[]\u0026quot; and replace them with an empty string. It\u0026rsquo;s not a very efficient algorithm and takes O(n²) time because of the while loop and the replacing operation on the entire string. We can optimize it by using a stack data structure.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(n) Solution - 2: Stack func isValid(_ s: String) -\u0026gt; Bool { var stack: [Character] = [] let closeToOpen: [Character: Character] = [ \u0026#34;)\u0026#34; : \u0026#34;(\u0026#34;, \u0026#34;]\u0026#34; : \u0026#34;[\u0026#34;, \u0026#34;}\u0026#34; : \u0026#34;{\u0026#34; ] for c in s { if closeToOpen[c] != nil { if !stack.isEmpty \u0026amp;\u0026amp; stack.last! == closeToOpen[c] { stack.removeLast() } else { return false } } else { stack.append(c) } } return stack.isEmpty } Explanation By using a stack, we can compare the last parentheses with the current parentheses in the loop. For example ( and ). If they match, remove them; if they don’t match, return false.\nTo avoid repetitive work and writing code for every open and close parenthesis, we can use a dictionary.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-valid-parentheses/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e containing just the characters \u003ccode\u003e'('\u003c/code\u003e, \u003ccode\u003e')'\u003c/code\u003e, \u003ccode\u003e'{'\u003c/code\u003e, \u003ccode\u003e'}'\u003c/code\u003e, \u003ccode\u003e'['\u003c/code\u003e, and \u003ccode\u003e']'\u003c/code\u003e, determine if the input string is valid.\u003cbr\u003e\nAn input string is valid if:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen brackets must be closed by the same type of brackets.\u003c/li\u003e\n\u003cli\u003eOpen brackets must be closed in the correct order.\u003c/li\u003e\n\u003cli\u003eEvery closing bracket has a corresponding open bracket of the same type.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;()\u0026#34;  \nOutput: true  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;()[]{}\u0026#34;  \nOutput: true  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;(]\u0026#34;  \nOutput: false  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;([])\u0026#34;  \nOutput: true  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 10⁴\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of parentheses only \u003ccode\u003e'()[]{}'\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eisValid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;()\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;[]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereplacingOccurrences\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eof\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;()\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereplacingOccurrences\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eof\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;{}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereplacingOccurrences\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eof\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;[]\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eThe brute force way to solve this problem is to check if the string contains \u003ccode\u003e\u0026quot;()\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;{}\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;[]\u0026quot;\u003c/code\u003e and replace them with an empty string. It\u0026rsquo;s not a very efficient algorithm and takes O(n²) time because of the \u003ccode\u003ewhile\u003c/code\u003e loop and the replacing operation on the entire string. We can optimize it by using a stack data structure.\u003c/p\u003e","title":"LeetCode - Blind 75 - Valid Parentheses"},{"content":"The Problem Given two strings s and t of lengths m and n, respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \u0026quot;\u0026quot;.\nA substring is a contiguous, non-empty sequence of characters within a string.\nThe test cases will be generated such that the answer is unique.\nExamples Input: s = \u0026#34;ADOBECODEBANC\u0026#34;, t = \u0026#34;ABC\u0026#34; Output: \u0026#34;BANC\u0026#34; Explanation: The minimum window substring \u0026#34;BANC\u0026#34; includes \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, and \u0026#39;C\u0026#39; from string t. Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;a\u0026#34; Output: \u0026#34;a\u0026#34; Explanation: The entire string s is the minimum window. Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34; Output: \u0026#34;\u0026#34; Explanation: Both \u0026#39;a\u0026#39;s from t must be included in the window. Since the largest window of s only has one \u0026#39;a\u0026#39;, return an empty string. Constraints m == s.length n == t.length 1 \u0026lt;= m, n \u0026lt;= 10⁵ s and t consist of uppercase and lowercase English letters. Follow-up: Could you find an algorithm that runs in O(m + n) time?\nBrute Force Solution func minWindow(_ s: String, _ t: String) -\u0026gt; String { if t.isEmpty { return \u0026#34;\u0026#34; } var countT: [Character: Int] = [:] for c in t { countT[c, default: 0] += 1 } var res = (-1, -1) var resLen = Int.max let sArray = Array(s) let lenS = sArray.count for i in 0 ..\u0026lt; lenS { var countS: [Character: Int] = [:] for j in i ..\u0026lt; lenS { countS[sArray[j], default: 0] += 1 var flag = true for (key, value) in countT { if countS[key, default: 0] \u0026lt; value { flag = false break } } let windowSize = (j - i + 1) if flag \u0026amp;\u0026amp; windowSize \u0026lt; resLen { resLen = windowSize res = (i, j) } } } let (l, r) = res if resLen == Int.max { return \u0026#34;\u0026#34; } else { return String(sArray[l...r]) } } Explanation When you look at the solution, you can see that it is a very complicated problem. Let\u0026rsquo;s divide it into parts to help us understand it more deeply.\nBefore we find the result, we need to calculate the count for each character in the t string. This will help us find a similar substring in s.\nNow, when we have our count of t, we can compare it with the count of s and update our result. This is not a very efficient solution, and we can minimize repetitive work—“iterating through the input every iteration”—by getting rid of the second loop and applying the sliding window technique.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(m), where m is the total number of unique characters in strings s and t. Solution 2 - Optimal func minWindow(_ s: String, _ t: String) -\u0026gt; String { if t.isEmpty { return \u0026#34;\u0026#34; } var countT: [Character: Int] = [:] for c in t { countT[c, default: 0] += 1 } var window: [Character: Int] = [:] var res = (-1, -1) var resLen = Int.max let sArray = Array(s) let lenS = sArray.count var have = 0 let need = countT.count var l = 0 for r in 0 ..\u0026lt; lenS { let c = sArray[r] window[c, default: 0] += 1 if countT[c] != nil \u0026amp;\u0026amp; window[c] == countT[c] { have += 1 } while have == need { let windowSize = (r - l + 1) if windowSize \u0026lt; resLen { res = (l, r) resLen = windowSize } window[sArray[l], default: 0] -= 1 if countT[sArray[l]] != nil \u0026amp;\u0026amp; window[sArray[l], default: 0] \u0026lt; countT[sArray[l], default: 0] { have -= 1 } l += 1 } } l = res.0 let r = res.1 if resLen == Int.max { return \u0026#34;\u0026#34; } else { return String(sArray[l...r]) } } Explanation To solve this problem in an optimal way, we need to add two additional properties: have and need. These will help us determine when to move our pointers.\nThe need variable is simply the count of all characters inside the countT dictionary.\nhave is the number of characters in the current window that satisfy the condition.\nWe update the have property only when the value of window is equal to the value of countT. For example, a substring of s with \u0026ldquo;ADOB\u0026rdquo; and a substring of t with \u0026ldquo;ABC\u0026rdquo; will have:\nwindow with A: 1, B: 1, and countT with A: 1, B: 1, C: 1.\nWhen the condition have == need is satisfied, we update the result and move the pointers.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(m), where m is the total number of unique characters in strings s and t. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-minimum-window-substring/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e of lengths \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e, respectively, return the minimum window substring of \u003ccode\u003es\u003c/code\u003e such that every character in \u003ccode\u003et\u003c/code\u003e (including duplicates) is included in the window. If there is no such substring, return the empty string \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA substring is a contiguous, non-empty sequence of characters within a string.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThe test cases will be generated such that the answer is unique.\u003c/p\u003e","title":"LeetCode - Blind 75 - Minimum Window Substring"},{"content":"The problem You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\nExamples Input: s = \u0026#34;ABAB\u0026#34;, k = 2 Output: 4 Explanation: Replace the two \u0026#39;A\u0026#39;s with two \u0026#39;B\u0026#39;s or vice versa. Input: s = \u0026#34;AABABBA\u0026#34;, k = 1 Output: 4 Explanation: Replace the one \u0026#39;A\u0026#39; in the middle with \u0026#39;B\u0026#39; and form \u0026#34;AABBBBA\u0026#34;. The substring \u0026#34;BBBB\u0026#34; has the longest repeating letters, which is 4. There may exist other ways to achieve this answer too. Constraints 1 \u0026lt;= s.length \u0026lt;= 105 s consists of only uppercase English letters. 0 \u0026lt;= k \u0026lt;= s.length Brute force solution func characterReplacement(_ s: String, _ k: Int) -\u0026gt; Int { let n = s.count let s = Array(s) var res = 0 for i in 0 ..\u0026lt; n { var count: [Character: Int] = [:] var maxF = 0 for j in i ..\u0026lt; n { count[s[j], default: 0] += 1 maxF = max(maxF, count[s[j]]!) let windowSize = (j - i + 1) let numOfCharsToReplace = (windowSize - maxF) let canReplace = (numOfCharsToReplace \u0026lt;= k) if canReplace { res = max(res, windowSize) } } } return res } Explanation First things first, we need to figure out which character we are going to replace. We can do this by using a dictionary. This way, we can calculate the most frequent character in the substring. After that, we will be able to calculate the number of characters to replace and check if we can replace the character.\nThis algorithm is not very fast and takes O(n^2) time. We can improve it further and optimize it to achieve O(n) time complexity.\nTime/Space Complexity Time complexity: O(n^2) Space complexity: O(m), where m is the total number of unique characters in the string. Solution 2 - Optimal func characterReplacement(_ s: String, _ k: Int) -\u0026gt; Int { let n = s.count let s = Array(s) var res = 0 var count: [Character: Int] = [:] var l = 0 var maxF = 0 for r in 0 ..\u0026lt; n { count[s[r], default: 0] += 1 maxF = max(maxF, count[s[r]]!) let numOfCharsToReplace = (windowSize(r: r, l: l) - maxF) let cantReplace = (numOfCharsToReplace \u0026gt; k) if cantReplace { count[s[l]]! -= 1 l += 1 } res = max(res, windowSize(r: r, l: l)) } return res } func windowSize(r: Int, l: Int) -\u0026gt; Int { return r - l + 1 } Explanation The optimal solution is very similar to the brute force solution, except we got rid of the second loop. The logic stays the same. What we did is store properties from the inner loop outside. In case numOfCharsToReplace is more than k, it means we exceeded the allowed number of replacements. We then need to shrink our window by decrementing the count of the current character and moving the l pointer.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(m), where m is the total number of unique characters in the string. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-longest-repeating-character-replacement/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most \u003ccode\u003ek\u003c/code\u003e times.\u003cbr\u003e\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;ABAB\u0026#34;, k = 2  \nOutput: 4  \nExplanation: Replace the two \u0026#39;A\u0026#39;s with two \u0026#39;B\u0026#39;s or vice versa.  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;AABABBA\u0026#34;, k = 1  \nOutput: 4  \nExplanation: Replace the one \u0026#39;A\u0026#39; in the middle with \u0026#39;B\u0026#39; and form \u0026#34;AABBBBA\u0026#34;.  \nThe substring \u0026#34;BBBB\u0026#34; has the longest repeating letters, which is 4.  \nThere may exist other ways to achieve this answer too.  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 105\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of only uppercase English letters.\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= k \u0026lt;= s.length\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute force solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003echaracterReplacement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[:]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emaxF\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emaxF\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emaxF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ewindowSize\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enumOfCharsToReplace\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewindowSize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003emaxF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecanReplace\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumOfCharsToReplace\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecanReplace\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewindowSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eFirst things first, we need to figure out which character we are going to replace. We can do this by using a dictionary. This way, we can calculate the most frequent character in the substring. After that, we will be able to calculate the number of characters to replace and check if we can replace the character.\u003cbr\u003e\nThis algorithm is not very fast and takes O(n^2) time. We can improve it further and optimize it to achieve O(n) time complexity.\u003c/p\u003e","title":"LeetCode - Blind 75 - Longest Repeating Character Replacement"},{"content":"The Problem Given a string s, find the length of the longest substring without repeating characters.\nA substring is a contiguous non-empty sequence of characters within a string.\nExamples Input: s = \u0026#34;abcabcbb\u0026#34; Output: 3 Explanation: The answer is \u0026#34;abc\u0026#34;, with the length of 3. Input: s = \u0026#34;bbbbb\u0026#34; Output: 1 Explanation: The answer is \u0026#34;b\u0026#34;, with the length of 1. Input: s = \u0026#34;pwwkew\u0026#34; Output: 3 Explanation: The answer is \u0026#34;wke\u0026#34;, with the length of 3. Notice that the answer must be a substring. \u0026#34;pwke\u0026#34; is a subsequence and not a substring. Constraints 0 \u0026lt;= s.length \u0026lt;= 5 * 10⁴ s consists of English letters, digits, symbols, and spaces. Brute Force Solution func lengthOfLongestSubstring(_ s: String) -\u0026gt; Int { let n = s.count var res = 0 for i in 0 ..\u0026lt; n { var chars: [Character] = [] for j in i ..\u0026lt; n { if chars.contains(s[j]) { break } chars.append(s[j]) } res = max(res, chars.count) } return res } Explanation Let’s start by visualizing the problem:\nWe can compare every substring starting from the first element, iterating through all elements, and when we find a duplicate character, we update the result with the length of the substring.\nThis is not an efficient solution and will take O(n * m) time. We can optimize it with the sliding window technique.\nTime/Space Complexity Time complexity: O(n * m) - where n is the length of the string and m is the number of unique characters in the substring. Space complexity: O(m) Solution 2 - Sliding Window func lengthOfLongestSubstring(_ s: String) -\u0026gt; Int { let n = s.count let s = Array(s) var res = 0 var charSet: Set\u0026lt;Character\u0026gt; = [] var l = 0 for r in 0 ..\u0026lt; n { while charSet.contains(s[r]) { charSet.remove(s[l]) l += 1 } charSet.insert(s[r]) let windowSize = (r - l + 1) res = max(res, windowSize) } return res } Explanation As mentioned above, we can optimize our brute force solution by using the sliding window technique.\nWe control the window using a set data structure to eliminate duplicates.\nWhen we find a duplicate value during iteration, we remove that value from the set and move the left pointer to form a new window.\nBy iterating through all the input, we can find the length of the longest substring.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(m) - where m is the number of unique characters in the substring. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-longest-substring-without-repeating-characters/","summary":"\u003ch4 id=\"the-problem\"\u003eThe Problem\u003c/h4\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, find the length of the longest substring without repeating characters.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA substring is a contiguous non-empty sequence of characters within a string.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;abcabcbb\u0026#34;\nOutput: 3\nExplanation: The answer is \u0026#34;abc\u0026#34;, with the length of 3.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;bbbbb\u0026#34;\nOutput: 1\nExplanation: The answer is \u0026#34;b\u0026#34;, with the length of 1.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;pwwkew\u0026#34;\nOutput: 3\nExplanation: The answer is \u0026#34;wke\u0026#34;, with the length of 3.  \nNotice that the answer must be a substring. \u0026#34;pwke\u0026#34; is a subsequence and not a substring.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e0 \u0026lt;= s.length \u0026lt;= 5 * 10⁴\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of English letters, digits, symbols, and spaces.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003elengthOfLongestSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet’s start by visualizing the problem:\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-286b4\" hidden\u003e\n    \u003clabel for=\"zoomCheck-286b4\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/problem_3.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Longest Substring Without Repeating Characters"},{"content":"The problem You are given an array prices where prices[i] is the price of a given stock on the i-th day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\nExamples Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. Constraints 1 \u0026lt;= prices.length \u0026lt;= 10⁵ 0 \u0026lt;= prices[i] \u0026lt;= 10⁴ Brute force solution func maxProfit(_ prices: [Int]) -\u0026gt; Int { let n = prices.count var res = 0 for i in 0 ..\u0026lt; n { for j in i + 1 ..\u0026lt; n { let profit = prices[j] - prices[i] if profit \u0026gt; 0 { res = max(res, profit) } } } return res } Explanation We can start with a brute force solution and find a way to a more optimal solution as we go.\nBy visualizing the problem using input from example 1 [7,1,5,3,6,4]:\nWe can see that the maximum profit is possible if you buy on day 2 for price 1 and sell on day 5 at price 6, resulting in a profit of 5.\nWe can iterate over all prices, compare the current price with the next one, and calculate the profit. This will work with a time complexity of O(n²), but we can do better by using the two-pointer technique.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(1) Solution 2 - Two Pointers func maxProfit(_ prices: [Int]) -\u0026gt; Int { let n = prices.count var res = 0 var l = 0 var r = 1 while r \u0026lt; n { let profit = prices[r] - prices[l] if profit \u0026gt; 0 { res = max(res, profit) } else { l = r } r += 1 } return res } Explanation From the brute force approach, we learned that it is possible to solve this problem in a more optimal way by using the two-pointer technique. The calculation of profit remains the same, but the solution is optimized to O(n) time complexity.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-best-time-to-buy-and-sell-stock/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eYou are given an array \u003ccode\u003eprices\u003c/code\u003e where \u003ccode\u003eprices[i]\u003c/code\u003e is the price of a given stock on the \u003ccode\u003ei-th\u003c/code\u003e day.\u003cbr\u003e\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\u003cbr\u003e\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: prices = [7,1,5,3,6,4]  \nOutput: 5  \nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.  \nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.  \n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: prices = [7,6,4,3,1]  \nOutput: 0  \nExplanation: In this case, no transactions are done and the max profit = 0.  \n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= prices.length \u0026lt;= 10⁵\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= prices[i] \u0026lt;= 10⁴\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute force solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emaxProfit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eprices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprices\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eprofit\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprices\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eprices\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eprofit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprofit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eWe can start with a brute force solution and find a way to a more optimal solution as we go.\u003cbr\u003e\nBy visualizing the problem using input from example 1 \u003ccode\u003e[7,1,5,3,6,4]\u003c/code\u003e:\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-15a67\" hidden\u003e\n    \u003clabel for=\"zoomCheck-15a67\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/problem_121.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"LeetCode - Blind 75 - Best Time to Buy and Sell Stock"},{"content":"The Problem You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that, together with the x-axis, form a container such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\nExamples Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by the array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. Input: height = [1,1] Output: 1 Constraints n == height.length 2 \u0026lt;= n \u0026lt;= 105 0 \u0026lt;= height[i] \u0026lt;= 104 Brute Force Solution func maxArea(_ height: [Int]) -\u0026gt; Int { let n = height.count var res = 0 for i in 0 ..\u0026lt; n { for j in i + 1 ..\u0026lt; n { let areaWidth = (j - i) let minHeight = min(height[i], height[j]) let area = minHeight * areaWidth res = max(res, area) } } return res } Explanation Let\u0026rsquo;s start with the brute force solution.\nBy looking at the picture of Example 1, we can see that the area with height 7 and width 7 holds the most water. To get to this step, we compare the current and the next elements to find a solution. For example, in [1,8,6,2,5,4,8,3,7], when we compare 1 and 8, we look for the maximum area of water. We can see that the area will be 1 by 1 because the water spills to the left.\nBy following this example and continuing the iterations, we calculate the area width, minimum height, the area filled with water, and find the result.\nTime/Space Complexity Time complexity: O(n^2) Space complexity: O(1) Solution 2 - Two Pointers func maxArea(_ height: [Int]) -\u0026gt; Int { let n = height.count var res = 0 var l = 0 var r = n - 1 while l \u0026lt; r { let areaWidth = (r - l) let minHeight = min(height[l], height[r]) let area = minHeight * areaWidth res = max(res, area) if height[l] \u0026lt; height[r] { l += 1 } else { r -= 1 } } return res } Explanation When we solved this problem using the brute force method, we saw that it could be done with two loops. Now, we can take it further and optimize it to O(n) time complexity using the two-pointer technique.\nThe computation of the max area stays the same: we calculate the area width, minimum height, area, and move pointers by comparing the left and right height elements.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-container-with-most-water/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003eheight\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e. There are \u003ccode\u003en\u003c/code\u003e vertical lines drawn such that the two endpoints of the \u003ccode\u003eith\u003c/code\u003e line are \u003ccode\u003e(i, 0)\u003c/code\u003e and \u003ccode\u003e(i, height[i])\u003c/code\u003e.\u003cbr\u003e\nFind two lines that, together with the x-axis, form a container such that the container contains the most water.\u003cbr\u003e\nReturn the maximum amount of water a container can store.\u003cbr\u003e\nNotice that you may not slant the container.\u003c/p\u003e","title":"LeetCode - Blind 75 - Container With Most Water"},{"content":"The Problem Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\nExamples Input: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter. Input: nums = [0,1,1] Output: [] Explanation: The only possible triplet does not sum up to 0. Input: nums = [0,0,0] Output: [[0,0,0]] Explanation: The only possible triplet sums up to 0. Constraints 3 \u0026lt;= nums.length \u0026lt;= 3000 -10⁵ \u0026lt;= nums[i] \u0026lt;= 10⁵ Brute Force Solution func threeSum(_ nums: [Int]) -\u0026gt; [[Int]] { var nums = nums let n = nums.count var res: Set\u0026lt;[Int]\u0026gt; = [] nums.sort() for i in 0 ..\u0026lt; n { for j in i + 1 ..\u0026lt; n { for k in j + 1 ..\u0026lt; n { if nums[i] + nums[j] + nums[k] == 0 { let val = [nums[i], nums[j], nums[k]] res.insert(val) } } } } return Array(res) } Explanation Let\u0026rsquo;s start with the brute force solution.\nAccording to the problem, we need to find triplet elements that, when added together, equal 0. By looking at examples, the first thing that comes to mind is to use three loops, add each of the elements, and compare the result with 0. If the result equals 0, we add the elements to the result.\nTime/Space Complexity Time complexity: O(n³) Space complexity: O(m), where m is the number of triplets. Solution 2 - Optimal func threeSum(_ nums: [Int]) -\u0026gt; [[Int]] { var nums = nums let n = nums.count var res: [[Int]] = [] nums.sort() for (i, num) in nums.enumerated() { if i \u0026gt; 0 \u0026amp;\u0026amp; num == nums[i - 1] { continue } var l = i + 1 var r = n - 1 while l \u0026lt; r { let tSum = num + nums[l] + nums[r] if tSum \u0026gt; 0 { r -= 1 } else if tSum \u0026lt; 0 { l += 1 } else { res.append([num, nums[l], nums[r]]) l += 1 while nums[l] == nums[l - 1] \u0026amp;\u0026amp; l \u0026lt; r { l += 1 } } } } return res } Explanation The time complexity of O(n³) is not exactly blazingly fast, so we need a better approach. An optimal solution is exactly what we are looking for.\nUsing sorting, we can detect duplicate values. For example, before sorting: [-1,0,1,2,-1,-4], and after sorting: [-4, -1, -1, 0, 1, 2]. We can iterate and check in the base case if the current value is equal to the previous one, and if it is, skip and move to the next iteration.\nWe can find the second and third elements by using the two-pointer technique. We determine which pointer to move by calculating the total sum of the triplet and comparing it to 0.\nTime/Space Complexity Time complexity: O(n²) Space complexity: O(1) or O(n), depending on the sorting algorithm. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-3sum/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return all the triplets \u003ccode\u003e[nums[i], nums[j], nums[k]]\u003c/code\u003e such that \u003ccode\u003ei != j\u003c/code\u003e, \u003ccode\u003ei != k\u003c/code\u003e, and \u003ccode\u003ej != k\u003c/code\u003e, and \u003ccode\u003enums[i] + nums[j] + nums[k] == 0\u003c/code\u003e.\u003cbr\u003e\nNotice that the solution set must not contain duplicate triplets.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e3 \u0026lt;= nums.length \u0026lt;= 3000\u003c/li\u003e\n\u003cli\u003e-10⁵ \u0026lt;= nums[i] \u0026lt;= 10⁵\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ethreeSum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s start with the brute force solution.\u003cbr\u003e\nAccording to the problem, we need to find triplet elements that, when added together, equal \u003ccode\u003e0\u003c/code\u003e. By looking at examples, the first thing that comes to mind is to use three loops, add each of the elements, and compare the result with \u003ccode\u003e0\u003c/code\u003e. If the result equals \u003ccode\u003e0\u003c/code\u003e, we add the elements to the result.\u003c/p\u003e","title":"LeetCode - Blind 75 - 3Sum"},{"content":"The Problem Given a string s, return true if it is a palindrome, or false otherwise.\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nExamples Input: s = \u0026#34;A man, a plan, a canal: Panama\u0026#34; Output: true Explanation: \u0026#34;amanaplanacanalpanama\u0026#34; is a palindrome. Input: s = \u0026#34;race a car\u0026#34; Output: false Explanation: \u0026#34;raceacar\u0026#34; is not a palindrome. Input: s = \u0026#34; \u0026#34; Output: true Explanation: s is an empty string \u0026#34;\u0026#34; after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome. Constraints 1 \u0026lt;= s.length \u0026lt;= 2 * 10^5 s consists only of printable ASCII characters. Brute Force Solution func isPalindrome(_ s: String) -\u0026gt; Bool { var newStr = \u0026#34;\u0026#34; for c in s { if c.isLetter || c.isNumber { newStr += c.lowercased() } } return newStr == String(newStr.reversed()) } Explanation Let\u0026rsquo;s start with the brute force solution. According to the description, we need to check if the string contains only lowercase, alphanumeric characters and reads the same forward and backward. In Swift, you can check this using the built-in isLetter and isNumber properties. Based on this information, we iterate through all characters in the s string, verify that each character is a letter or number, update newStr with the current lowercased character, and compare the result with its reversed version.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Solution - 2 - Optimal func isPalindrome(_ s: String) -\u0026gt; Bool { let s = Array(s) var l = 0 var r = s.count - 1 while l \u0026lt; r { if !isAlnum(s[l]) { l += 1 continue } if !isAlnum(s[r]) { r -= 1 continue } if s[l].lowercased() != s[r].lowercased() { return false } l += 1 r -= 1 } return true } func isAlnum(_ c: Character) -\u0026gt; Bool { let cAscii = c.asciiValue! return ( cAscii \u0026gt;= Character(\u0026#34;A\u0026#34;).asciiValue! \u0026amp;\u0026amp; cAscii \u0026lt;= Character(\u0026#34;Z\u0026#34;).asciiValue! || cAscii \u0026gt;= Character(\u0026#34;a\u0026#34;).asciiValue! \u0026amp;\u0026amp; cAscii \u0026lt;= Character(\u0026#34;z\u0026#34;).asciiValue! || cAscii \u0026gt;= Character(\u0026#34;0\u0026#34;).asciiValue! \u0026amp;\u0026amp; cAscii \u0026lt;= Character(\u0026#34;9\u0026#34;).asciiValue! ) } Explanation To solve the problem optimally, based on the description, we need to determine if each character is alphanumeric and lowercase. We can accomplish this by introducing an isAlnum helper function that checks if a character is alphanumeric within the loop, using the two-pointer technique. For example, in the array \u0026quot;car rac\u0026quot;, the first left and right characters are both \u0026quot;c\u0026quot;, the second are both \u0026quot;a\u0026quot;, and the third are both \u0026quot;r\u0026quot;. Following this logic, we can confirm that the input string s is a palindrome.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-valid-palindrome/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if it is a palindrome, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;A man, a plan, a canal: Panama\u0026#34;\nOutput: true\nExplanation: \u0026#34;amanaplanacanalpanama\u0026#34; is a palindrome.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;race a car\u0026#34;\nOutput: false\nExplanation: \u0026#34;raceacar\u0026#34; is not a palindrome.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34; \u0026#34;\nOutput: true\nExplanation: s is an empty string \u0026#34;\u0026#34; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= s.length \u0026lt;= 2 * 10^5\u003c/li\u003e\n\u003cli\u003es consists only of printable ASCII characters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enewStr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisLetter\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisNumber\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enewStr\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elowercased\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enewStr\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewStr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereversed\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s start with the brute force solution. According to the description, we need to check if the string contains only lowercase, alphanumeric characters and reads the same forward and backward. In Swift, you can check this using the built-in \u003ccode\u003eisLetter\u003c/code\u003e and \u003ccode\u003eisNumber\u003c/code\u003e properties. Based on this information, we iterate through all characters in the \u003ccode\u003es\u003c/code\u003e string, verify that each character is a letter or number, update \u003ccode\u003enewStr\u003c/code\u003e with the current \u003ccode\u003elowercased\u003c/code\u003e character, and compare the result with its \u003ccode\u003ereversed\u003c/code\u003e version.\u003c/p\u003e","title":"LeetCode - Blind 75 - Valid Palindrome"},{"content":"The Problem Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.\nA consecutive sequence is a sequence of elements in which each element is exactly 1 greater than the previous element.\nExamples Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Input: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] Output: 9 Constraints 0 \u0026lt;= nums.length \u0026lt;= 10^5 -10^9 \u0026lt;= nums[i] \u0026lt;= 10^9 Brute Force Solution func longestConsecutive(_ nums: [Int]) -\u0026gt; Int { var res = 0 let setOfNums: Set\u0026lt;Int\u0026gt; = Set(nums) for num in nums { var streak = 0 var curr = num while setOfNums.contains(curr) { streak += 1 curr += 1 } res = max(res, streak) } return res } Explanation Let\u0026rsquo;s start with the brute force solution. We need to increment each element by 1 to check if the incremented value exists in our input array. For example, if we have an array nums with [3, 2, 1, 100, 5], the longest consecutive sequence will be 3.\nIf you look closely at the array [3, 2, 1, 100, 5], it has a sequence of 2, 1, which when incremented forms elements that already exist in the array (1 -\u0026gt; 2, 2 -\u0026gt; 3). By counting the number of increments, you can determine the longest sequence. The solution above does exactly that:\nIterates through the array of nums Checks if the element exists in the array and updates streak by 1 Calculates the max of res and streak Returns the result This solution uses a set to avoid duplicate values, which could lead to incorrect results.\nTime/Space Complexity Time complexity: O(n^2) Space complexity: O(n) Solution - 2 - Sorting func longestConsecutive(_ nums: [Int]) -\u0026gt; Int { if nums.isEmpty { return 0 } let n = nums.count var nums = nums nums.sort() var res = 0 var curr = nums[0] var streak = 0 var i = 0 while i \u0026lt; n { if curr != nums[i] { curr = nums[i] streak = 0 } while i \u0026lt; n \u0026amp;\u0026amp; nums[i] == curr { i += 1 } streak += 1 curr += 1 res = max(res, streak) } return res } Explanation The next way to solve this problem is by sorting. Sorting will transform your array, for example [3, 2, 1, 100, 5] to [1, 2, 3, 5, 100]. In this case, the longest sequence will be on the left side of the array, so you can iterate from left to right to find the result.\nThe condition if curr != nums[i] checks if curr value is not the same as the element nums[i] and resets the streak. The following steps are similar to the brute force solution.\nTime/Space Complexity Time complexity: O(n log n) Space complexity: O(1) Solution - 3 - Optimal func longestConsecutive(_ nums: [Int]) -\u0026gt; Int { var longestSCount = 0 let setOfNums: Set\u0026lt;Int\u0026gt; = Set(nums) for num in setOfNums { if !setOfNums.contains(num - 1) { var length = 0 while setOfNums.contains(num + length) { length += 1 } longestSCount = max(length, longestSCount) } } return longestSCount } Explanation Let\u0026rsquo;s look at the optimal solution using the example input [1, 2, 3, 5, 100]. When you look at it, you can recognise patterns such as elements 2, 3 having a neighbor on the left side. If you decrement each of them by 1, you will see that values (1 \u0026lt;- 2, 2 \u0026lt;- 3) have a neighbor. After that, all you need is to calculate the length of the longest sequence.\nThis solution also uses a set to avoid duplicate values, which would cause incorrect results.\nTime/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-longest-consecutive-sequence/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an unsorted array of integers \u003ccode\u003enums\u003c/code\u003e, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in \u003ccode\u003eO(n)\u003c/code\u003e time.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA \u003cstrong\u003econsecutive sequence\u003c/strong\u003e is a sequence of elements in which each element is exactly 1 greater than the previous element.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eExplanation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eThe\u003c/span\u003e \u003cspan class=\"n\"\u003elongest\u003c/span\u003e \u003cspan class=\"n\"\u003econsecutive\u003c/span\u003e \u003cspan class=\"n\"\u003eelements\u003c/span\u003e \u003cspan class=\"n\"\u003esequence\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e \u003cspan class=\"n\"\u003eTherefore\u003c/span\u003e \u003cspan class=\"n\"\u003eits\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"mf\"\u003e4.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e0 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003e-10^9 \u0026lt;= nums[i] \u0026lt;= 10^9\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003elongestConsecutive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esetOfNums\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003estreak\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003esetOfNums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estreak\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estreak\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s start with the brute force solution. We need to increment each element by \u003ccode\u003e1\u003c/code\u003e to check if the incremented value exists in our input array. For example, if we have an array \u003ccode\u003enums\u003c/code\u003e with \u003ccode\u003e[3, 2, 1, 100, 5]\u003c/code\u003e, the longest consecutive sequence will be \u003ccode\u003e3\u003c/code\u003e.\u003cbr\u003e\nIf you look closely at the array \u003ccode\u003e[3, 2, 1, 100, 5]\u003c/code\u003e, it has a sequence of \u003ccode\u003e2, 1\u003c/code\u003e, which when incremented forms elements that already exist in the array \u003ccode\u003e(1 -\u0026gt; 2, 2 -\u0026gt; 3)\u003c/code\u003e. By counting the number of increments, you can determine the longest sequence. The solution above does exactly that:\u003c/p\u003e","title":"LeetCode - Blind 75 - Longest Consecutive Sequence"},{"content":"The problem Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\nExamples Input: nums = [1,2,3,4] Output: [24,12,8,6] Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0] Constraints 2 \u0026lt;= nums.length \u0026lt;= 10^5 -30 \u0026lt;= nums[i] \u0026lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)\nBrute force solution func productExceptSelf(_ nums: [Int]) -\u0026gt; [Int] { let n = nums.count var res = [Int](repeating: 0, count: n) for i in 0 ..\u0026lt; n { var val = 1 for j in 0 ..\u0026lt; n { if i == j { continue } val *= nums[j] res[i] = val } } return res } Explanation The brute force solution:\nIterates through all indices i in the range from 0 to n (excluded). Creates a second loop and iterates through all indices j in the range from 0 to n (excluded). Checks if i and j indices are equal; if they are, skips the current iteration to the next one. Updates val property. Updates res property by index i and val. Returns result. Time/Space Complexity Time complexity: O(n^2) Space complexity: O(1) Solution - 2 - Division func productExceptSelf(_ nums: [Int]) -\u0026gt; [Int] { let n = nums.count var val = 1 var zeroCnt = 0 for num in nums { if num != 0 { val *= num } else { zeroCnt += 1 } } if zeroCnt \u0026gt; 1 { return [Int](repeating: 0, count: n) } var res = [Int](repeating: 0, count: n) for (i, c) in nums.enumerated() { if zeroCnt != 0 { if c != 0 { res[i] = 0 } else { res[i] = val } } else { res[i] = val / c } } return res } Explanation Solution - 2:\nIterates through all elements in input nums and multiplies val with num if the element is not equal to 0; if it is, increments zeroCnt. Checks if zeroCnt is more than 1; if it is, returns an array with 0 elements with length of n, otherwise moves to the next step. Iterates through enumerated nums and checks if zeroCnt is not equal to 0; if so, it divides val by c. If zeroCnt is 0, checks if c does not equal 0 and sets res[i] to val; if it does, sets 0 to res[i]. Returns result. Time/Space Complexity Time complexity: O(n) Space complexity: O(1) Solution - 3 - Prefix/Postfix func productExceptSelf(_ nums: [Int]) -\u0026gt; [Int] { let n = nums.count var res = [Int](repeating: 0, count: n) var prefix = [Int](repeating: 0, count: n) var suffix = [Int](repeating: 0, count: n) prefix[0] = 1 suffix[n - 1] = 1 for i in 1 ..\u0026lt; n { prefix[i] = nums[i - 1] * prefix[i - 1] } for i in stride(from: n - 2, to: -1, by: -1) { suffix[i] = nums[i + 1] * suffix[i + 1] } for i in 0 ..\u0026lt; n { res[i] = prefix[i] * suffix[i] } return res } Explanation Solution - 3:\nInitializes res, prefix, and suffix arrays. Updates the first prefix element with 1. Updates the last suffix element with 1. Iterates from 0 to n (excluded); updates prefix[i] with the product of num and prefix elements at index i - 1. Iterates in reverse from n - 2 to -1; updates suffix[i] with the product of num and suffix elements at index i + 1. Iterates from 0 to n (excluded); updates res[i] with the product of prefix and suffix elements at index i. Time/Space Complexity Time complexity: O(n) Space complexity: O(n) Solution - 4 - Prefix/Postfix (Optimized) func productExceptSelf(_ nums: [Int]) -\u0026gt; [Int] { let n = nums.count var res = [Int](repeating: 1, count: n) var prefix = 1 for i in 0 ..\u0026lt; n { res[i] = prefix prefix *= nums[i] } var postfix = 1 for i in stride(from: n - 1, to: -1, by: -1) { res[i] *= postfix postfix *= nums[i] } return res } Explanation Solution - 4:\nIterates through the range of indices from 0 to n (excluded). Sets prefix to res[i]. Multiplies prefix with the element of nums[i]. Iterates in reversed order. Sets postfix to res[i]. Multiplies postfix with the element of nums[i]. Returns result. Time/Space Complexity Time complexity: O(n) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-product-of-array-except-self/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return an array \u003ccode\u003eanswer\u003c/code\u003e such that \u003ccode\u003eanswer[i]\u003c/code\u003e is equal to the product of all the elements of \u003ccode\u003enums\u003c/code\u003e except \u003ccode\u003enums[i]\u003c/code\u003e.\u003cbr\u003e\nThe product of any prefix or suffix of \u003ccode\u003enums\u003c/code\u003e is guaranteed to fit in a 32-bit integer.\u003cbr\u003e\nYou must write an algorithm that runs in \u003ccode\u003eO(n)\u003c/code\u003e time and without using the division operation.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e2 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003e-30 \u0026lt;= nums[i] \u0026lt;= 30\u003c/li\u003e\n\u003cli\u003eThe product of any prefix or suffix of \u003ccode\u003enums\u003c/code\u003e is guaranteed to fit in a 32-bit integer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: Can you solve the problem in \u003ccode\u003eO(1)\u003c/code\u003e extra space complexity? (The output array does not count as extra space for space complexity analysis.)\u003c/p\u003e","title":"LeetCode - Blind 75 - Product of Array Except Self"},{"content":"The problem Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\nExamples Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Input: nums = [1], k = 1 Output: [1] Constraints 1 \u0026lt;= nums.length \u0026lt;= 10^5 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 k is in the range [1, the number of unique elements in the array]. It is guaranteed that the answer is unique. Follow-up: Your algorithm\u0026rsquo;s time complexity must be better than O(n log n), where n is the array\u0026rsquo;s size.\nBrute Force Solution - Sorting func topKFrequent(nums: [Int], k: Int) -\u0026gt; [Int] { var count: [Int: Int] = [:] for num in nums { if count[num] != nil { count[num]! += 1 } else { count[num] = 1 } } var arr: [Items] = [] for element in count { let item = Items(num: element.key, cnt: element.value) arr.append(item) } arr.sort() var res: [Int] = [] while res.count \u0026lt; k { res.append(arr.popLast()!.num) } return res } struct Items: Comparable { static func \u0026lt; (lhs: Items, rhs: Items) -\u0026gt; Bool { return lhs.cnt \u0026lt; rhs.cnt } let num: Int let cnt: Int } Explanation The brute force solution:\nIterates through all nums elements and determines the frequency of each element Based on count, creates arr that will later be sorted Loops through sorted arr and pops the most frequent elements until res.count is less than k Time/Space Complexity Time complexity: O(n log n), as it uses a sorting algorithm Space complexity: O(n) Solution 2 - Max Heap import Collections func topKFrequent(nums: [Int], k: Int) -\u0026gt; [Int] { var count: [Int: Int] = [:] for num in nums { if count[num] != nil { count[num]! += 1 } else { count[num] = 1 } } var maxHeap: Heap\u0026lt;Item\u0026gt; = [] for element in count { maxHeap.insert(Item(num: element.key, cnt: element.value)) if maxHeap.count \u0026gt; k { maxHeap.popMin() } } var res: [Int] = [] for _ in 0 ..\u0026lt; k { res.append(maxHeap.popMax()!.num) } return res } struct Item: Comparable { static func \u0026lt; (lhs: Item, rhs: Item) -\u0026gt; Bool { return lhs.cnt \u0026lt; rhs.cnt } let num: Int let cnt: Int } Explanation Solution 2:\nIterates through input nums and counts the frequency of each number Iterates through the count dictionary and inserts elements into the heap; if the heap size is more than k, it pops the minimum element Iterates through a range from 0 to k, pops the maximum elements, and appends them to the res array Returns the result Time/Space Complexity Time complexity: O(n log k) Space complexity: O(n + k), where n is the length of the input nums and k is the number of frequent elements. Solution 3 - Bucket Sort func topKFrequent(nums: [Int], k: Int) -\u0026gt; [Int] { var count: [Int: Int] = [:] for num in nums { if count[num] != nil { count[num]! += 1 } else { count[num] = 1 } } var freq: [[Int]] = Array(repeating: [], count: nums.count + 1) for element in count { freq[element.value].append(element.key) } var res: [Int] = [] for i in stride(from: freq.count - 1, to: 0, by: -1) { for n in freq[i] { res.append(n) if res.count == k { return res } } } return res } Explanation Solution 3:\nIterates through input nums and counts the frequency of each number Iterates through the count dictionary and appends each number by its frequency Iterates in reverse order, finds the numbers, and appends them to the res array Returns the result Time/Space Complexity Time complexity: O(n) Space complexity: O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-top-k-frequent-elements/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return the \u003ccode\u003ek\u003c/code\u003e most frequent elements. You may return the answer in any order.\u003c/p\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1], k = 1\nOutput: [1]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003e-10^4 \u0026lt;= nums[i] \u0026lt;= 10^4\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ek\u003c/code\u003e is in the range [1, the number of unique elements in the array].\u003c/li\u003e\n\u003cli\u003eIt is guaranteed that the answer is unique.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow-up: Your algorithm\u0026rsquo;s time complexity must be better than O(n log n), where \u003ccode\u003en\u003c/code\u003e is the array\u0026rsquo;s size.\u003c/p\u003e","title":"LeetCode - Blind 75 - Top K Frequent Elements"},{"content":"The problem Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\nExamples Input: strs = [\u0026#34;eat\u0026#34;,\u0026#34;tea\u0026#34;,\u0026#34;tan\u0026#34;,\u0026#34;ate\u0026#34;,\u0026#34;nat\u0026#34;,\u0026#34;bat\u0026#34;] Output: [[\u0026#34;bat\u0026#34;],[\u0026#34;nat\u0026#34;,\u0026#34;tan\u0026#34;],[\u0026#34;ate\u0026#34;,\u0026#34;eat\u0026#34;,\u0026#34;tea\u0026#34;]] Explanation: * There is no string in strs that can be rearranged to form \u0026#34;bat.\u0026#34; * The strings \u0026#34;nat\u0026#34; and \u0026#34;tan\u0026#34; are anagrams as they can be rearranged to form each other. * The strings \u0026#34;ate,\u0026#34; \u0026#34;eat,\u0026#34; and \u0026#34;tea\u0026#34; are anagrams as they can be rearranged to form each other. Input: strs = [\u0026#34;\u0026#34;] Output: [[\u0026#34;\u0026#34;]] Input: strs = [\u0026#34;a\u0026#34;] Output: [[\u0026#34;a\u0026#34;]] Constraints 1 \u0026lt;= strs.length \u0026lt;= 1000 0 \u0026lt;= strs[i].length \u0026lt;= 100 strs[i] is made up of lowercase English letters. Brute force solution func groupAnagrams(_ strs: [String]) -\u0026gt; [[String]] { var res: [String: [String]] = [:] for s in strs { let sortedS = String(s.sorted()) res[sortedS, default: []].append(s) } return Array(res.values) } Explanation The brute force solution:\nUses additional space res to store the result Iterates through all input strings in strs Sorts each string Appends the current element to the res dictionary by the sortedS key Returns the result Time/Space Complexity Time complexity: O(m * n log n), where m is the length of input strs and n log n is the time complexity of the sorting algorithm, where n is the length of the longest string. Space complexity: O(m ∗ n), as it uses additional space to store the sorted string. Solution 2 func groupAnagrams(_ strs: [String]) -\u0026gt; [[String]] { var res: [[Int]: [String]] = [:] let aAsciiValue = Character(\u0026#34;a\u0026#34;).asciiValue! for s in strs { var count = Array(repeating: 0, count: 26) for c in s { count[Int(c.asciiValue! - aAsciiValue)] += 1 } if res[count] == nil { res[count] = [s] } else { res[count]!.append(s) } } return Array(res.values) } Explanation Solution 2:\nIterates through each string in strs Iterates through every character in string s and counts its occurrences Updates the result property res Returns the result value Time/Space Complexity Time complexity: O(m * n), where m is the length of input strs and n is the length of a single string. Space complexity: O(m), where m is the number of strings. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-group-anagrams/","summary":"\u003ch3 id=\"the-problem\"\u003eThe problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of strings \u003ccode\u003estrs\u003c/code\u003e, group the anagrams together. You can return the answer in any order.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: strs = [\u0026#34;eat\u0026#34;,\u0026#34;tea\u0026#34;,\u0026#34;tan\u0026#34;,\u0026#34;ate\u0026#34;,\u0026#34;nat\u0026#34;,\u0026#34;bat\u0026#34;]\nOutput: [[\u0026#34;bat\u0026#34;],[\u0026#34;nat\u0026#34;,\u0026#34;tan\u0026#34;],[\u0026#34;ate\u0026#34;,\u0026#34;eat\u0026#34;,\u0026#34;tea\u0026#34;]]\nExplanation:\n* There is no string in strs that can be rearranged to form \u0026#34;bat.\u0026#34;\n* The strings \u0026#34;nat\u0026#34; and \u0026#34;tan\u0026#34; are anagrams as they can be rearranged to form each other.\n* The strings \u0026#34;ate,\u0026#34; \u0026#34;eat,\u0026#34; and \u0026#34;tea\u0026#34; are anagrams as they can be rearranged to form each other.\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: strs = [\u0026#34;\u0026#34;]\nOutput: [[\u0026#34;\u0026#34;]]\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: strs = [\u0026#34;a\u0026#34;]\nOutput: [[\u0026#34;a\u0026#34;]]\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"constraints\"\u003eConstraints\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= strs.length \u0026lt;= 1000\u003c/li\u003e\n\u003cli\u003e0 \u0026lt;= strs[i].length \u0026lt;= 100\u003c/li\u003e\n\u003cli\u003estrs[i] is made up of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute force solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003egroupAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[:]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estrs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esortedS\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003esortedS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[]].\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eThe brute force solution:\u003c/p\u003e","title":"LeetCode - Blind 75 - Group Anagrams"},{"content":"The Problem Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\nExamples Input: s = \u0026#34;anagram\u0026#34;, t = \u0026#34;nagaram\u0026#34; Output: true Input: s = \u0026#34;rat\u0026#34;, t = \u0026#34;car\u0026#34; Output: false Follow-up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\nBrute Force Solution func isAnagram(s: String, t: String) -\u0026gt; Bool { if s.count != t.count { return false } return s.sorted() == t.sorted() } Explanation The brute force solution is to check the lengths of s and t, and if they are not equal, return false. Otherwise, compare the sorted s and t strings and return the result.\nTime/Space Complexity Time complexity: Depends on the sorting algorithm, on average O(N log N). Space complexity: O(1) or O(N) depending on the sorting algorithm. Solution - 2 func isAnagram(s: String, t: String) -\u0026gt; Bool { if s.count != t.count { return false } var sDict: [Character: Int] = [:] var tDict: [Character: Int] = [:] for i in 0 ..\u0026lt; s.count { sDict[s[i], default: 0] += 1 tDict[t[i], default: 0] += 1 } return sDict == tDict } extension StringProtocol { subscript(offset: Int) -\u0026gt; Character { self[index(startIndex, offsetBy: offset)] } } Explanation Solution 2 has a base case that checks the lengths of s and t, and if they are not equal, it returns false. Otherwise, it iterates through all characters in s and t, storing the count of each character\u0026rsquo;s occurrence. In the final step, it returns the result of comparing the two dictionaries.\nTime/Space Complexity Time complexity: O(N) - iterates through the entire string. Space complexity: O(N) - uses additional space to store characters and their counts. Solution - 3 func isAnagram(s: String, t: String) -\u0026gt; Bool { if s.count != t.count { return false } var count: [Int] = Array(repeating: 0, count: 26) let aAsciiValue = Character(\u0026#34;a\u0026#34;).asciiValue! for char in s.utf8 { count[Int(char - aAsciiValue)] += 1 } for char in t.utf8 { count[Int(char - aAsciiValue)] -= 1 } for val in count { if val != 0 { return false } } return true } Explanation Solution 3 has a base case that checks the lengths of s and t, and if they are not equal, it returns false.\nAfter that, it iterates through the array of encoded utf8 s elements, calculates the character index, and increments the count of that specific character in s. In the next step, it iterates through the array of encoded utf8 t elements, calculates the character index, and decrements the count of that specific character. The last step is to iterate through the count array and check if any val is not equal to 0; if so, it returns false (indicating an extra character was found, and it is no longer an anagram). Time/Space Complexity Time complexity: O(N) Space complexity: O(1) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-valid-anagram/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003et\u003c/code\u003e is an anagram of \u003ccode\u003es\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;anagram\u0026#34;, t = \u0026#34;nagaram\u0026#34;\nOutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: s = \u0026#34;rat\u0026#34;, t = \u0026#34;car\u0026#34;\nOutput: false \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFollow-up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\u003c/p\u003e","title":"LeetCode - Blind 75 - Valid Anagram"},{"content":"The Problem Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\nExample Input: nums = [1,2,3,1] Output: true Explanation: The element 1 occurs at indices 0 and 3. Follow-up: Can you come up with an algorithm that has less than O(NlogN) time complexity?\nBrute Force Solution func containsDuplicate(_ nums: [Int]) -\u0026gt; Bool { var nums = nums let N = nums.count if N == 0 { return false } nums.sort() var prev = nums[0] for i in 1 ..\u0026lt; N { let num = nums[i] if num == prev { return true } else { prev = num } } return false } Explanation The brute force solution for this problem uses sorting to allow us to quickly detect duplicates since identical elements will be adjacent. After sorting, it iterates through all elements, checking if the current element is equal to the previous one; if it is, it returns true immediately. If not, it updates prev. If no duplicates are detected, it returns false.\nTime/Space Complexity Time complexity: O(NlogN) or O(N^2) depending on the sorting algorithm. Space complexity: O(1) or O(N) depending on the sorting algorithm; some sorting algorithms may use additional space. Solution - 2 func containsDuplicate(_ nums: [Int]) -\u0026gt; Bool { var seen: Set\u0026lt;Int\u0026gt; = [] for num in nums { if seen.contains(num) { return true } else { seen.insert(num) } } return false } Explanation Solution - 2 is more optimized than brute force, trading memory for faster execution time.\nIt uses a seen set and iterates over nums. It checks if num has already been seen; if it has, it returns true; if not, it inserts num into the seen set. When iteration is completed, it returns false because no duplicates were found. Time/Space Complexity Time complexity: O(N) - in the worst case, the algorithm iterates over all nums. Space complexity: O(N) - extra space is needed to store seen values in a set. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-contains-duplicate/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if any value appears at least twice in the array, and return \u003ccode\u003efalse\u003c/code\u003e if every element is distinct.\u003c/p\u003e\n\u003ch4 id=\"example\"\u003eExample\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [1,2,3,1]\nOutput: true\nExplanation:\nThe element 1 occurs at indices 0 and 3.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFollow-up: Can you come up with an algorithm that has less than O(NlogN) time complexity?\u003c/p\u003e\n\u003ch3 id=\"brute-force-solution\"\u003eBrute Force Solution\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003econtainsDuplicate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eprev\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"explanation\"\u003eExplanation\u003c/h4\u003e\n\u003cp\u003eThe brute force solution for this problem uses sorting to allow us to quickly detect duplicates since identical elements will be adjacent. After sorting, it iterates through all elements, checking if the current element is equal to the previous one; if it is, it returns \u003ccode\u003etrue\u003c/code\u003e immediately. If not, it updates \u003ccode\u003eprev\u003c/code\u003e. If no duplicates are detected, it returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e","title":"LeetCode - Blind 75 - Contains Duplicate"},{"content":"The Problem Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.\nExample Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Follow-up: Can you come up with an algorithm that has less than O(N^2) time complexity?\nBrute Force Solution func twoSum(nums: [Int], target: Int) -\u0026gt; [Int] { for i in 0 ..\u0026lt; nums.count { for j in i + 1 ..\u0026lt; nums.count { if nums[i] + nums[j] == target { return [i, j] } } } return [] } Explanation The brute force solution for this problem is to use two loops, iterating through all of the current and next elements, finding the sum between them, and comparing the result to the target.\nThis solution is not very efficient and has an O(N^2) time complexity.\nTime/Space Complexity Time complexity: O(N^2) Space complexity: O(1) Solution - 2 func twoSum(nums: [Int], target: Int) -\u0026gt; [Int] { var hashmap: [Int: Int] = [:] for i in 0 ..\u0026lt; nums.count { let num = nums[i] let diff = target - num if hashmap[diff] != nil { return [hashmap[diff]!, i] } hashmap[num] = i } return [] } Explanation Solution 2 has an O(N) time complexity and an O(N) space complexity by taking advantage of a hashmap. It stores i to its num value at the end of each iteration. Before storing, it calculates the diff and checks if the diff value exists in hashmap; if it does, it returns an array with the index from hashmap[diff] and the current index i.\nTime/Space Complexity Time complexity: O(N) – because in the worst case, the algorithm needs to iterate through all elements in hashmap. Space complexity: O(N) – because the algorithm needs additional space to store i and num. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/leetcode-blind-75-two-sum/","summary":"\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\n\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003etarget\u003c/code\u003e, return indices of the two numbers such that they add up to the \u003ccode\u003etarget\u003c/code\u003e.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\u003c/p\u003e\n\u003ch4 id=\"example\"\u003eExample\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFollow-up: Can you come up with an algorithm that has less than O(N^2) time complexity?\u003c/p\u003e","title":"LeetCode - Blind 75 - Two Sum"},{"content":"Introduction The selection sort is an in-place comparison sorting algorithm. It\u0026rsquo;s similar to bubble sort in that it works by repeatedly swapping items in a list and not very efficient on larger lists.\nsource\nCode Example func selectionSort(_ array: [Int]) -\u0026gt; [Int] { var A = array let N = array.count for i in 0 ..\u0026lt; N { var jMin = i for j in (i + 1) ..\u0026lt; N { if A[j] \u0026lt; A[jMin] { jMin = j } } if jMin != i { let tmp = A[i] A[i] = A[jMin] A[jMin] = tmp } } return A } Implementation For each index:\nSet jMin index to the current index For each index from i + 1 to the end of the list: If the element at inner index j is less than the element at index jMin, set jMin to j If jMin does not equal i, swap the element at the current index i with the element at index jMin Time/Space Complexity Time complexity: O(N^2)\nSpace complexity: O(1) auxiliary\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-sorting-selection-sort/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://en.wikipedia.org/wiki/Selection_sort\"\u003eselection sort\u003c/a\u003e is an in-place comparison sorting algorithm. It\u0026rsquo;s similar to bubble sort in that it works by repeatedly swapping items in a list and not very efficient on larger lists.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-51096\" hidden\u003e\n    \u003clabel for=\"zoomCheck-51096\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Selection-Sort-Animation.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/Selection_sort#/media/File:Selection-Sort-Animation.gif\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eselectionSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ejMin\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejMin\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ejMin\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ejMin\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejMin\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejMin\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eFor each index:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet \u003ccode\u003ejMin\u003c/code\u003e index to the current index\u003c/li\u003e\n\u003cli\u003eFor each index from \u003ccode\u003ei + 1\u003c/code\u003e to the end of the list:\n\u003cul\u003e\n\u003cli\u003eIf the element at inner index \u003ccode\u003ej\u003c/code\u003e is less than the element at index \u003ccode\u003ejMin\u003c/code\u003e, set \u003ccode\u003ejMin\u003c/code\u003e to \u003ccode\u003ej\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003ejMin\u003c/code\u003e does not equal \u003ccode\u003ei\u003c/code\u003e, swap the element at the current index \u003ccode\u003ei\u003c/code\u003e with the element at index \u003ccode\u003ejMin\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space Complexity\u003c/h3\u003e\n\u003cp\u003eTime complexity: O(N^2)\u003cbr\u003e\nSpace complexity: O(1) \u003ca href=\"https://en.wikipedia.org/wiki/Computer_data_storage#Secondary_storage\"\u003eauxiliary\u003c/a\u003e\u003c/p\u003e","title":"DSA - Sorting - Selection Sort"},{"content":"Introduction The quick sort is an efficient sorting algorithm commonly used widely in production. Quick sort is a divide-and-conquer algorithm. It works by selecting a pivot from the array and partitioning the other elements into two subarrays.\nsource\nCode example // Sorts a (portion of an) array, divides it into partitions, then sorts those func quickSort(array: inout [Int], low: Int, high: Int) { // Ensure indices are in correct order if low \u0026lt; high { // Partition array and get the pivot index let p = partition(array: \u0026amp;array, low: low, high: high) // Sort the two partitions quickSort(array: \u0026amp;array, low: low, high: p - 1) // Left side of pivot quickSort(array: \u0026amp;array, low: p + 1, high: high) // Right side of pivot } } // Divides array into two partitions func partition(array: inout [Int], low: Int, high: Int) -\u0026gt; Int { let pivot = array[high] // Choose the last element as the pivot // Temporary pivot index var i = low for j in low ..\u0026lt; high { // If the current element is less than or equal to the pivot if array[j] \u0026lt;= pivot { // Swap the current element with the element at the temporary pivot index let tmp = array[i] array[i] = array[j] array[j] = tmp // Move the temporary pivot index forward i += 1 } } // Swap the pivot with the last element let tmp = array[i] array[i] = array[high] array[high] = tmp return i } Implementation quickSort Ensure that the low and high indices are in the correct order. Partition the input list using the partition function. Recursively call quickSort on the left side of the pivot. Recursively call quickSort on the right side of the pivot. partition Choose the last element as the pivot. Set i to low. For each j from low to high (not inclusive), compare if the current element is less than or equal to the pivot:\n3.1 Swap the element at index i with the element at index j.\n3.2 Increment i by 1. Swap the element at index i with the last element. Return i. Time/Space complexity Time complexity: O(N^2)\nSpace complexity: O(N)\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-sorting-quick-sort/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://en.wikipedia.org/wiki/Quicksort\"\u003equick sort\u003c/a\u003e is an efficient sorting algorithm commonly used widely in production. Quick sort is a \u003ca href=\"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm\"\u003edivide-and-conquer algorithm\u003c/a\u003e. It works by selecting a pivot from the array and partitioning the other elements into two subarrays.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-a81ce\" hidden\u003e\n    \u003clabel for=\"zoomCheck-a81ce\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Sorting_quicksort_anim.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/Quicksort#/media/File:Sorting_quicksort_anim.gif\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Sorts a (portion of an) array, divides it into partitions, then sorts those\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003equickSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kr\"\u003einout\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Ensure indices are in correct order\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Partition array and get the pivot index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003epartition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Sort the two partitions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003equickSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Left side of pivot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003equickSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Right side of pivot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Divides array into two partitions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003epartition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kr\"\u003einout\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epivot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Choose the last element as the pivot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Temporary pivot index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003elow\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehigh\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// If the current element is less than or equal to the pivot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003epivot\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Swap the current element with the element at the temporary pivot index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Move the temporary pivot index forward\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Swap the pivot with the last element\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ehigh\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003ch5 id=\"quicksort\"\u003equickSort\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that the \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e indices are in the correct order.\u003c/li\u003e\n\u003cli\u003ePartition the input list using the \u003ccode\u003epartition\u003c/code\u003e function.\u003c/li\u003e\n\u003cli\u003eRecursively call \u003ccode\u003equickSort\u003c/code\u003e on the left side of the pivot.\u003c/li\u003e\n\u003cli\u003eRecursively call \u003ccode\u003equickSort\u003c/code\u003e on the right side of the pivot.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"partition\"\u003epartition\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eChoose the last element as the pivot.\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003ei\u003c/code\u003e to \u003ccode\u003elow\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor each \u003ccode\u003ej\u003c/code\u003e from \u003ccode\u003elow\u003c/code\u003e to \u003ccode\u003ehigh\u003c/code\u003e (not inclusive), compare if the current element is less than or equal to the pivot:\u003cbr\u003e\n3.1 Swap the element at index \u003ccode\u003ei\u003c/code\u003e with the element at index \u003ccode\u003ej\u003c/code\u003e.\u003cbr\u003e\n3.2 Increment \u003ccode\u003ei\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSwap the element at index \u003ccode\u003ei\u003c/code\u003e with the last element.\u003c/li\u003e\n\u003cli\u003eReturn \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space complexity\u003c/h3\u003e\n\u003cp\u003eTime complexity: O(N^2)\u003cbr\u003e\nSpace complexity: O(N)\u003c/p\u003e","title":"DSA - Sorting - Quick Sort"},{"content":"Introduction The insertion sort algorithm builds a sorted list one item at a time by comparison. It is more efficient on small datasets but much less efficient on larger ones.\nsource\nsource\nCode Example func insertionSort(_ array: [Int]) -\u0026gt; [Int] { var A = array for i in 0 ..\u0026lt; A.count { var j = i while j \u0026gt; 0 \u0026amp;\u0026amp; A[j - 1] \u0026gt; A[j] { let tmp = A[j] A[j] = A[j - 1] A[j - 1] = tmp j -= 1 } } return A } Implementation For each index in the input array: Set the j variable to i. Loop while j is greater than 0 and the element at index j - 1 is greater than the element at index j: Swap the elements at index j and j - 1. Decrement j by 1. Why use Insertion Sort? Fast for small data sets. More efficient in practice than most other algorithms, such as selection sort or bubble sort. Adaptive: Efficient for datasets that are already substantially sorted; the time complexity is O(kn) when each element in the input is no more than k places away from its sorted position. Stable: Does not change the relative order of elements with equal keys. In-place: Only requires O(1) of additional memory space. Online: Can sort a list as it receives it. Time/Space Complexity Time: O(N^2) Space: O(1) (in-place) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-sorting-insertion-sort/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\u003einsertion sort\u003c/a\u003e algorithm builds a sorted list one item at a time \u003ca href=\"https://en.wikipedia.org/wiki/Comparison_sort\"\u003eby comparison\u003c/a\u003e. It is more efficient on small datasets but much less efficient on larger ones.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-6d2b5\" hidden\u003e\n    \u003clabel for=\"zoomCheck-6d2b5\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Insertion_sort.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/Insertion_sort#/media/File:Insertion_sort.gif\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-0b710\" hidden\u003e\n    \u003clabel for=\"zoomCheck-0b710\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Insertion-sort-example-300px.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/Insertion_sort#/media/File:Insertion-sort-example-300px.gif\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsertionSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ej\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eFor each index in the input array:\n\u003col\u003e\n\u003cli\u003eSet the \u003ccode\u003ej\u003c/code\u003e variable to \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eLoop while \u003ccode\u003ej\u003c/code\u003e is greater than \u003ccode\u003e0\u003c/code\u003e and the element at index \u003ccode\u003ej - 1\u003c/code\u003e is greater than the element at index \u003ccode\u003ej\u003c/code\u003e:\n\u003col\u003e\n\u003cli\u003eSwap the elements at index \u003ccode\u003ej\u003c/code\u003e and \u003ccode\u003ej - 1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eDecrement \u003ccode\u003ej\u003c/code\u003e by 1.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"why-use-insertion-sort\"\u003eWhy use Insertion Sort?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eFast for small data sets. More efficient in practice than most other algorithms, such as selection sort or bubble sort.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Adaptive_sort\"\u003eAdaptive\u003c/a\u003e: Efficient for datasets that are already substantially sorted; the time complexity is O(kn) when each element in the input is no more than \u003cem\u003ek\u003c/em\u003e places away from its sorted position.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Stable_sort\"\u003eStable\u003c/a\u003e: Does not change the relative order of elements with equal keys.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\"\u003eIn-place\u003c/a\u003e: Only requires O(1) of additional memory space.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Online_algorithm\"\u003eOnline\u003c/a\u003e: Can sort a list as it receives it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space Complexity\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTime: O(N^2)\u003c/li\u003e\n\u003cli\u003eSpace: O(1) (in-place)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"DSA - Sorting - Insertion Sort"},{"content":"What is Merge Sort? Merge sort is a recursive algorithm that uses the divide and conquer algorithm design paradigm to find the solution.\nsource\nThe merge sort conceptually consists of two separate functions: mergeSort and merge. It works as follows:\nDivide the unsorted list into two equal halves. Recursively sort the two halves. Merge the two halves to form a sorted array. There are multiple implementations of merge sort. I will be focusing on the top-down implementation using lists.\nCode Example func mergeSort(_ array: [Int]) -\u0026gt; [Int] { if array.count \u0026lt; 2 { return array } let sortedLeftSide = mergeSort(Array(array[0 ..\u0026lt; array.count / 2])) let sortedRightSide = mergeSort(Array(array[array.count / 2 ..\u0026lt; array.count])) return merge(sortedLeftSide, sortedRightSide) } func merge(_ first: [Int], _ second: [Int]) -\u0026gt; [Int] { var result: [Int] = [] var i = 0 var j = 0 while i \u0026lt; first.count \u0026amp;\u0026amp; j \u0026lt; second.count { if first[i] \u0026lt;= second[j] { result.append(first[i]) i += 1 } else { result.append(second[j]) j += 1 } } while i \u0026lt; first.count { result.append(first[i]) i += 1 } while j \u0026lt; second.count { result.append(second[j]) j += 1 } return result } Explanation mergeSort method: If the array’s count is less than 2, it means the array is already sorted and is returned as-is. Splits the array into two halves down the middle. Recursively calls the mergeSort method on the left side of the split array. Recursively calls the mergeSort method on the right side of the split array. Returns the result of the merge method with sortedLeftSide and sortedRightSide properties. merge method: Creates a result list of integers. Sets i and j pointers to zero. Uses a loop to iterate over both the first and second input arrays. If an element in first is less than or equal to the respective element in second, it adds it to the final list and increments i. Otherwise, it adds the item from second to the final list and increments j. After comparing all the items, if there are any leftover elements in either first or second, it adds them to the result. Time Complexity This algorithm has a time complexity of O(n log n).\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-sorting-merge-sort/","summary":"\u003ch3 id=\"what-is-merge-sort\"\u003eWhat is Merge Sort?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Merge_sort\"\u003eMerge sort\u003c/a\u003e is a recursive algorithm that uses the \u003ca href=\"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm\"\u003edivide and conquer\u003c/a\u003e algorithm design paradigm to find the solution.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-438f5\" hidden\u003e\n    \u003clabel for=\"zoomCheck-438f5\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Merge-sort-example-300px.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/Merge_sort#/media/File:Merge-sort-example-300px.gif\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe merge sort conceptually consists of two separate functions: \u003ccode\u003emergeSort\u003c/code\u003e and \u003ccode\u003emerge\u003c/code\u003e. It works as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDivide the unsorted list into two equal halves.\u003c/li\u003e\n\u003cli\u003eRecursively sort the two halves.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Merge_algorithm\"\u003eMerge\u003c/a\u003e the two halves to form a sorted array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThere are multiple implementations of merge sort. I will be focusing on the \u003ca href=\"https://en.wikipedia.org/wiki/Merge_sort#Top-down_implementation_using_lists\"\u003etop-down implementation using lists\u003c/a\u003e.\u003c/p\u003e","title":"DSA - Sorting - Merge Sort"},{"content":"What is the Bubble Sort Algorithm? The bubble sort is a basic sorting algorithm named after the way elements progressively \u0026ldquo;bubble up\u0026rdquo; to the top of the list.\nsource\nCode Example func bubbleSort(_ array: [Int]) -\u0026gt; [Int] { var A = array var N = array.count var swapping = true while swapping { swapping = false for i in 1 ..\u0026lt; N { if A[i - 1] \u0026gt; A[i] { let tmp = A[i - 1] A[i - 1] = A[i] A[i] = tmp swapping = true } } N -= 1 } return A } Implementation The bubble sort uses an loop and swapping property to control it behaviour. Inside the loop, it iterates over all elements, comparing the current and next elements. If the current element is greater than the next, it swaps them.\nThe example above uses optimized bubble sort, where the inner loop avoids looking at the last n − 1 items when running for the n-th time, resulting in about a 50% improvement in the worst-case scenario.\nTime/Space Complexity Bubble sort has a worst-case and average time complexity of O(n²), where n is the number of items being sorted.\nThe worst-case space complexity is O(n) total, O(1) auxiliary.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-sorting-bubble-sort/","summary":"\u003ch3 id=\"what-is-the-bubble-sort-algorithm\"\u003eWhat is the Bubble Sort Algorithm?\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\u003ebubble sort\u003c/a\u003e is a basic sorting algorithm named after the way elements progressively \u0026ldquo;bubble up\u0026rdquo; to the top of the list.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-ec9d1\" hidden\u003e\n    \u003clabel for=\"zoomCheck-ec9d1\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Bubble-sort-example-300px.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/Bubble_sort#/media/File:Bubble-sort-example-300px.gif\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ebubbleSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eswapping\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003eswapping\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eswapping\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eswapping\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eN\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eThe bubble sort uses an loop and \u003ccode\u003eswapping\u003c/code\u003e property to control it behaviour. Inside the loop, it iterates over all elements, comparing the current and next elements. If the current element is greater than the next, it swaps them.\u003c/p\u003e","title":"DSA - Sorting - Bubble Sort"},{"content":"Introduction Previously, we discussed a custom hashmap implementation. That implementation has a lot of collisions because we are using a fixed-size array.\nIf we want to reduce the chances of collisions, we can increase the number of slots in the hashmap, or in other words, resize our hashmap. Resizing cannot guarantee that collisions will be entirely eliminated, but it will help reduce the likelihood of one happening.\nCode Example private func loadFactor() -\u0026gt; Double? { if self.hashMap.isEmpty { return nil } else { var filledSlots = 0 for slot in self.hashMap { if slot != nil { filledSlots += 1 } } return Double(filledSlots / self.hashMap.count) } } private func resize() { if self.hashMap.isEmpty { self.hashMap = [nil] return } guard let load = self.loadFactor() else { return } if load \u0026lt; 0.05 { return } let oldHashMap = self.hashMap self.hashMap = Array(repeating: nil, count: oldHashMap.count * 10) for kvp in oldHashMap { if let kvp = kvp { self.insert(key: kvp.key, value: kvp.value) } } } Implementation When resizing, we create a new hashmap with a larger number of slots. Then, we re-insert all the key-value pairs from the old hashmap into the new one.\nThe resize method requires a helper function, load factor, which determines the number of filled buckets as a percentage of the total number of buckets.\nAs for the resize algorithm, it checks if the underlying hashmap is empty. If it is, it creates a new hashmap with a length of 1. It then gets the current load, and if it\u0026rsquo;s more than 5%, it creates a new empty array hashmap with 10x the size of the current one. After that, it uses the insert method to re-insert all key-value pairs from the old hashmap into the new one.\nThe final step is to update the insert method and perform a resize check before inserting to ensure there is enough space.\nComplete Code Example final class HashMap\u0026lt;Key: StringProtocol, Value\u0026gt; { private(set) var hashMap: [(key: Key, value: Value)?] init(size: Int) { self.hashMap = Array(repeating: nil, count: size) } func getValue(by key: Key) -\u0026gt; Value? { let index = hashFunction(key: key) return self.hashMap[index]?.value } func insert(key: Key, value: Value) { self.resize() let index = hashFunction(key: key) self.hashMap[index] = (key, value) } private func hashFunction(key: Key) -\u0026gt; Int { var count = 0 for element in key.unicodeScalars { count += Int(element.value) } return count % self.hashMap.count } private func resize() { if self.hashMap.isEmpty { self.hashMap = [nil] return } guard let load = self.loadFactor() else { return } if load \u0026lt; 0.05 { return } let oldHashMap = self.hashMap self.hashMap = Array(repeating: nil, count: oldHashMap.count * 10) for kvp in oldHashMap { if let kvp = kvp { self.insert(key: kvp.key, value: kvp.value) } } } private func loadFactor() -\u0026gt; Double? { if self.hashMap.isEmpty { return nil } else { var filledSlots = 0 for slot in self.hashMap { if slot != nil { filledSlots += 1 } } return Double(filledSlots / self.hashMap.count) } } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-hashmap-resize/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003ePreviously, we discussed a \u003ca href=\"https://open.substack.com/pub/dmytrosblog/p/dsa-hashmap-custom-implementation?r=2fepxg\u0026amp;utm_campaign=post\u0026amp;utm_medium=web\u0026amp;showWelcomeOnShare=true\"\u003ecustom hashmap implementation\u003c/a\u003e. That implementation has a lot of \u003ca href=\"https://en.wikipedia.org/wiki/Hash_collision\"\u003ecollisions\u003c/a\u003e because we are using a fixed-size array.\u003c/p\u003e\n\u003cp\u003eIf we want to reduce the chances of \u003ccode\u003ecollisions\u003c/code\u003e, we can increase the number of slots in the hashmap, or in other words, \u003ccode\u003eresize\u003c/code\u003e our hashmap. Resizing cannot guarantee that collisions will be entirely eliminated, but it will help reduce the likelihood of one happening.\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eloadFactor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003efilledSlots\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eslot\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eslot\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003efilledSlots\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efilledSlots\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eresize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eguard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eload\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eloadFactor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eload\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.05\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eoldHashMap\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepeating\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eoldHashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ekvp\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eoldHashMap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ekvp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekvp\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ekvp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ekvp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eWhen resizing, we create a \u003ccode\u003enew hashmap\u003c/code\u003e with a \u003ccode\u003elarger number of slots\u003c/code\u003e. Then, we \u003ccode\u003ere-insert\u003c/code\u003e all the key-value pairs from the \u003ccode\u003eold hashmap\u003c/code\u003e into the \u003ccode\u003enew\u003c/code\u003e one.\u003c/p\u003e","title":"DSA - Hashmap - Resize"},{"content":"Introduction Let\u0026rsquo;s take a closer look at a HashMap implementation by building it without using the built-in dictionary in Swift. The HashMap will use a fixed-size array underneath the hash function that will transform the key into an index. In this example, the hash function is based on taking the modulo of the sum of all key.unicodeScalars integer values with the size of the array.\nCode Example final class HashMap\u0026lt;Key: StringProtocol, Value\u0026gt; { private var hashMap: [(key: Key, value: Value)?] init(size: Int) { self.hashMap = Array(repeating: nil, count: size) } private func hashFunction(key: Key) -\u0026gt; Int { var count = 0 for element in key.unicodeScalars { count += Int(element.value) } return count % self.hashMap.count } } Insert The insert operation uses the index provided by the hashFunction and sets the value at this index.\nfunc insert(key: Key, value: Value) { let index = hashFunction(key: key) self.hashMap[index] = (key, value) } Get The get operation uses the index provided by the hashFunction and retrieves the value at this index.\nfunc getValue(by key: Key) -\u0026gt; Value? { let index = hashFunction(key: key) return self.hashMap[index]?.value } Complete Code Example final class HashMap\u0026lt;Key: StringProtocol, Value\u0026gt; { private var hashMap: [(key: Key, value: Value)?] init(size: Int) { self.hashMap = Array(repeating: nil, count: size) } func getValue(by key: Key) -\u0026gt; Value? { let index = hashFunction(key: key) return self.hashMap[index]?.value } func insert(key: Key, value: Value) { let index = hashFunction(key: key) self.hashMap[index] = (key, value) } private func hashFunction(key: Key) -\u0026gt; Int { var count = 0 for element in key.unicodeScalars { count += Int(element.value) } return count % self.hashMap.count } } Time/Space Complexity Time complexity in Big O notation:\nOperation Average Worst Case Insert Θ(1) O(n) Space complexity: Θ(n)\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-hashmap-custom-implementation/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at a HashMap implementation by building it without using the built-in dictionary in Swift. The HashMap will use a fixed-size array underneath the hash function that will transform the \u003ccode\u003ekey\u003c/code\u003e into an \u003ccode\u003eindex\u003c/code\u003e. In this example, the hash function is based on taking the modulo of the sum of all \u003ccode\u003ekey.unicodeScalars\u003c/code\u003e integer values with the size of the array.\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eKey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eStringProtocol\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ehashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eKey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e)?]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erepeating\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ehashFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eKey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunicodeScalars\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"bp\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"insert\"\u003eInsert\u003c/h3\u003e\n\u003cp\u003eThe insert operation uses the \u003ccode\u003eindex\u003c/code\u003e provided by the \u003ccode\u003ehashFunction\u003c/code\u003e and sets the value at this \u003ccode\u003eindex\u003c/code\u003e.\u003c/p\u003e","title":"DSA - HashMap - Custom Implementation"},{"content":"What is Hashmap (aka Hash Table)? A hashmap is a data structure that implements an associative array, also called a dictionary. An associative array maps keys to values. A hash table uses a hash function to compute an index, also called a hash code, into an array of buckets or slots, from which the desired value can be found. During a lookup, the key is hashed, and the resulting hash indicates where the corresponding value is stored.\nIdeally, the hash function will assign each key to a unique bucket, but most hash tables are designed to employ an imperfect hash function, which might cause hash collisions, where the hash function generates the same index for more than one key. Therefore, collisions must typically be accommodated in some way.\nCode Example Here is an example in Swift, using the built-in hashmap implementation called a dictionary.\nlet p: [String: Int] = [ \u0026#34;Michael Jordan\u0026#34;: 23, \u0026#34;Kobe Bryant\u0026#34;: 24, \u0026#34;LeBron James\u0026#34;: 6 ] Time/Space Complexity Time complexity Operation Average Worst case Search Θ(1) O(n) Insert Θ(1) O(n) Delete Θ(1) O(n) Space complexity Space Average Worst case Space Θ(n) O(n) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-hashmap/","summary":"\u003ch3 id=\"what-is-hashmap-aka-hash-table\"\u003eWhat is Hashmap (aka Hash Table)?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Hash_table\"\u003ehashmap\u003c/a\u003e is a data structure that implements an associative array, also called a dictionary. An associative array maps keys to values. A hash table uses a \u003ca href=\"https://en.wikipedia.org/wiki/Hash_function\"\u003ehash function\u003c/a\u003e to compute an index, also called a \u003ccode\u003ehash code\u003c/code\u003e, into an array of \u003ccode\u003ebuckets or slots\u003c/code\u003e, from which the desired value can be found. During a lookup, the \u003ccode\u003ekey\u003c/code\u003e is hashed, and the resulting hash indicates where the corresponding value is stored.\u003c/p\u003e","title":"DSA - Hashmap"},{"content":"What is a Red-Black Tree? A Red-Black tree is a self-balancing binary search tree data structure. When the tree is modified, the new tree is rearranged and \u0026ldquo;repainted\u0026rdquo; to restore the coloring properties that constrain how unbalanced the tree can become in the worst case.\nsource\nProperties A Red-Black tree has all binary search tree properties, with some additional properties:\nEvery node is either red or black. All nil nodes are considered black. A red node does not have a red child. If a node is red, then both its children are black. Every path from a given node to any of its descendant nil nodes goes through the same number of black nodes. Time Complexity The (re-)balancing is not perfect, but guarantees searching in O(log n) time, where n is the number of entries in the tree. The insert and delete operations, along with tree rearrangement and recoloring, also execute in O(log n) time.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-red-black-tree/","summary":"\u003ch3 id=\"what-is-a-red-black-tree\"\u003eWhat is a Red-Black Tree?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\"\u003eRed-Black tree\u003c/a\u003e is a \u003ca href=\"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree\"\u003eself-balancing\u003c/a\u003e binary search tree data structure. When the tree is modified, the new tree is rearranged and \u0026ldquo;repainted\u0026rdquo; to restore the coloring properties that constrain how unbalanced the tree can become in the worst case.\u003cbr\u003e\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-197fb\" hidden\u003e\n    \u003clabel for=\"zoomCheck-197fb\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Red-black_tree_example.png\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003cbr\u003e\n\u003ca href=\"https://upload.wikimedia.org/wikipedia/commons/4/41/Red-black_tree_example_with_NIL.svg\"\u003esource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"properties\"\u003eProperties\u003c/h3\u003e\n\u003cp\u003eA Red-Black tree has all binary search tree properties, with some additional properties:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEvery node is either \u003ccode\u003ered\u003c/code\u003e or \u003ccode\u003eblack\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAll \u003ccode\u003enil\u003c/code\u003e nodes are considered \u003ccode\u003eblack\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eA \u003ccode\u003ered\u003c/code\u003e node does not have a \u003ccode\u003ered\u003c/code\u003e child.\u003c/li\u003e\n\u003cli\u003eIf a node is \u003ccode\u003ered\u003c/code\u003e, then both its children are \u003ccode\u003eblack\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEvery path from a given node to any of its descendant \u003ccode\u003enil\u003c/code\u003e nodes goes through the same number of \u003ccode\u003eblack\u003c/code\u003e nodes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"time-complexity\"\u003eTime Complexity\u003c/h3\u003e\n\u003cp\u003eThe (re-)balancing is not perfect, but guarantees searching in O(log n) time, where n is the number of entries in the tree. The insert and delete operations, along with tree rearrangement and recoloring, also execute in O(log n) time.\u003c/p\u003e","title":"DSA - Red-Black Tree"},{"content":"What is the BST inorder algorithm? The inorder algorithm returns values in ascending order (sorted from smallest to the largest value).\nCode example final class BSTNode\u0026lt;Value: Comparable\u0026gt; { var val: Value? var left: BSTNode? var right: BSTNode? init(val: Value? = nil) { self.val = val } func inorder(_ visited: inout [Value]) -\u0026gt; [Value] { if self.left != nil { self.left!.inorder(\u0026amp;visited) } if self.val != nil { visited.append(self.val!) } if self.right != nil { self.right!.inorder(\u0026amp;visited) } return visited } } Implementation The inorder algorithm:\nRecursively traverse the left subtree. Visit the current node. Recursively traverse the right subtree. Time/Space complexity The time complexity of the inorder algorithm is O(N), where N is the total number of nodes. The space complexity:\nO(1) if recursion stack space is not considered. Otherwise, O(H), where H is the height of the tree. In the worst case, H can be the same as N (when the tree is skewed). In the best case, H can be the same as logN (when the tree is complete). Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree-inorder/","summary":"\u003ch3 id=\"what-is-the-bst-inorder-algorithm\"\u003eWhat is the BST inorder algorithm?\u003c/h3\u003e\n\u003cp\u003eThe inorder algorithm returns values in ascending order (sorted from smallest to the largest value).\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eComparable\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kr\"\u003einout\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003einorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eThe inorder algorithm:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRecursively traverse the \u003ccode\u003eleft\u003c/code\u003e subtree.\u003c/li\u003e\n\u003cli\u003eVisit the current node.\u003c/li\u003e\n\u003cli\u003eRecursively traverse the \u003ccode\u003eright\u003c/code\u003e subtree.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space complexity\u003c/h3\u003e\n\u003cp\u003eThe time complexity of the inorder algorithm is O(N), where N is the total number of nodes.\nThe space complexity:\u003c/p\u003e","title":"DSA - Binary Search Tree - Inorder"},{"content":"Code Example final class BSTNode\u0026lt;Value: Comparable\u0026gt; { var val: Value? var left: BSTNode? var right: BSTNode? init(val: Value? = nil) { self.val = val } func exists(_ val: Value) -\u0026gt; Bool { // 1 guard let selfVal = self.val else { return false } // 2 if self.val == val { return true } // 3 if val \u0026lt; self.val! { if self.left == nil { return false } return self.left!.exists(val) } // 4 if self.right == nil { return false } // 5 return self.right!.exists(val) } } Implementation The exists algorithm:\nCheck if self.val exists. If it does not exist, return false. If it does, move to the next step. Compare self.val with the input value. If the values are equal, return true. If they are not equal, move to the next step. If the input val is less than self.val, and the left node exists, return a recursive call of the exists method on the left node; otherwise, return false. If the input val is greater than self.val, move to the next step. Check if the right node exists. If it does not exist, return false. If it does exist, move to the next step. Return a recursive call of the exists method on the right node. Time/Space Complexity Time complexity: The time complexity of the exists algorithm is O(N), where N is the total number of nodes. Space complexity: O(1) if recursion stack space is not considered. Otherwise, O(H), where H is the height of the tree. In the worst case, H can be the same as N (when the tree is skewed). In the best case, H can be the same as log N (when the tree is complete). Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree-exists/","summary":"\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eComparable\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eselfVal\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eexists\u003c/code\u003e algorithm:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCheck if \u003ccode\u003eself.val\u003c/code\u003e exists. If it does not exist, return \u003ccode\u003efalse\u003c/code\u003e. If it does, move to the next step.\u003c/li\u003e\n\u003cli\u003eCompare \u003ccode\u003eself.val\u003c/code\u003e with the input value. If the values are equal, return \u003ccode\u003etrue\u003c/code\u003e. If they are not equal, move to the next step.\u003c/li\u003e\n\u003cli\u003eIf the input \u003ccode\u003eval\u003c/code\u003e is less than \u003ccode\u003eself.val\u003c/code\u003e, and the \u003ccode\u003eleft\u003c/code\u003e node exists, return a recursive call of the \u003ccode\u003eexists\u003c/code\u003e method on the \u003ccode\u003eleft\u003c/code\u003e node; otherwise, return \u003ccode\u003efalse\u003c/code\u003e. If the input \u003ccode\u003eval\u003c/code\u003e is greater than \u003ccode\u003eself.val\u003c/code\u003e, move to the next step.\u003c/li\u003e\n\u003cli\u003eCheck if the \u003ccode\u003eright\u003c/code\u003e node exists. If it does not exist, return \u003ccode\u003efalse\u003c/code\u003e. If it does exist, move to the next step.\u003c/li\u003e\n\u003cli\u003eReturn a recursive call of the \u003ccode\u003eexists\u003c/code\u003e method on the \u003ccode\u003eright\u003c/code\u003e node.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space Complexity\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTime complexity:\u003c/strong\u003e The time complexity of the \u003ccode\u003eexists\u003c/code\u003e algorithm is O(N), where N is the total number of nodes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSpace complexity:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eO(1) if recursion stack space is not considered.\u003c/li\u003e\n\u003cli\u003eOtherwise, O(H), where H is the height of the tree.\u003c/li\u003e\n\u003cli\u003eIn the worst case, H can be the same as N (when the tree is skewed).\u003c/li\u003e\n\u003cli\u003eIn the best case, H can be the same as log N (when the tree is complete).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"DSA - Binary Search Tree - Exists"},{"content":"What is the postorder algorithm? The postorder algorithm, similar to the preorder algorithm, returns a list of values in the order they are visited.\nCode Example final class BSTNode\u0026lt;Value: Comparable\u0026gt; { var val: Value? var left: BSTNode? var right: BSTNode? init(val: Value? = nil) { self.val = val } func postorder(_ visited: inout [Value]) -\u0026gt; [Value] { if self.left != nil { self.left!.postorder(\u0026amp;visited) } if self.right != nil { self.right!.postorder(\u0026amp;visited) } if self.val != nil { visited.append(self.val!) } return visited } } Implementation The postorder algorithm:\nRecursively traverse the current node\u0026rsquo;s left subtree. Recursively traverse the current node\u0026rsquo;s right subtree. Visit the current node. Time/Space Complexity The time complexity of the postorder algorithm is O(N), where N is the total number of nodes. The space complexity: O(1) if recursion stack space is not considered. Otherwise, O(H), where H is the height of the tree. In the worst case, H can be the same as N (when the tree is skewed). In the best case, H can be the same as logN (when the tree is complete). Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree-postorder/","summary":"\u003ch3 id=\"what-is-the-postorder-algorithm\"\u003eWhat is the postorder algorithm?\u003c/h3\u003e\n\u003cp\u003eThe postorder algorithm, similar to the \u003ca href=\"https://open.substack.com/pub/dmytrosblog/p/dsa-binary-search-tree-traverse-preorder?r=2fepxg\u0026amp;utm_campaign=post\u0026amp;utm_medium=web\u0026amp;showWelcomeOnShare=true\"\u003epreorder\u003c/a\u003e algorithm, returns a list of values in the order they are visited.\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eComparable\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003epostorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kr\"\u003einout\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003epostorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003epostorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eThe postorder algorithm:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRecursively traverse the current node\u0026rsquo;s \u003ccode\u003eleft\u003c/code\u003e subtree.\u003c/li\u003e\n\u003cli\u003eRecursively traverse the current node\u0026rsquo;s \u003ccode\u003eright\u003c/code\u003e subtree.\u003c/li\u003e\n\u003cli\u003eVisit the current node.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space Complexity\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe time complexity of the postorder algorithm is O(N), where N is the total number of nodes.\u003c/li\u003e\n\u003cli\u003eThe space complexity:\n\u003cul\u003e\n\u003cli\u003eO(1) if recursion stack space is not considered.\u003c/li\u003e\n\u003cli\u003eOtherwise, O(H), where H is the height of the tree.\u003c/li\u003e\n\u003cli\u003eIn the worst case, H can be the same as N (when the tree is skewed).\u003c/li\u003e\n\u003cli\u003eIn the best case, H can be the same as logN (when the tree is complete).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"DSA - Binary Search Tree - Postorder"},{"content":"What is tree traversal? Tree traversal, also known as \u0026ldquo;tree search\u0026rdquo; or \u0026ldquo;walking the tree,\u0026rdquo; is the process of visiting each node in a tree data structure exactly once.\nWhat is the BST preorder algorithm? The preorder algorithm returns a list of values in the order they are visited. It makes a copy that preserves the structure and recursively traverses the BST.\nCode example func preorder(_ visited: inout [Value]) -\u0026gt; [Value] { if self.val != nil { visited.append(self.val!) } if self.left != nil { self.left!.preorder(\u0026amp;visited) } if self.right != nil { self.right!.preorder(\u0026amp;visited) } return visited } Implementation The first step is to check if val exists. If it does, append val to the visited array. The second step is to check if the left node exists. If it does, recursively call the preorder method on the left node. The third step is similar to the second one but for the right node. Time/Space Complexity The time complexity of the preorder algorithm is O(N), where N is the total number of nodes. The space complexity: O(1) if no recursion stack space is considered. Otherwise, O(H), where H is the height of the tree. In the worst case, H can be the same as N (when the tree is skewed). In the best case, H can be the same as logN (when the tree is complete). Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree-traverse-preorder/","summary":"\u003ch3 id=\"what-is-tree-traversal\"\u003eWhat is tree traversal?\u003c/h3\u003e\n\u003cp\u003eTree traversal, also known as \u0026ldquo;tree search\u0026rdquo; or \u0026ldquo;walking the tree,\u0026rdquo; is the process of visiting each node in a tree data structure exactly once.\u003c/p\u003e\n\u003ch3 id=\"what-is-the-bst-preorder-algorithm\"\u003eWhat is the BST preorder algorithm?\u003c/h3\u003e\n\u003cp\u003eThe preorder algorithm returns a list of values in the order they are visited. It makes a copy that preserves the structure and recursively traverses the BST.\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kr\"\u003einout\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003epreorder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eThe first step is to check if \u003ccode\u003eval\u003c/code\u003e exists. If it does, append \u003ccode\u003eval\u003c/code\u003e to the \u003ccode\u003evisited\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe second step is to check if the \u003ccode\u003eleft\u003c/code\u003e node exists. If it does, recursively call the \u003ccode\u003epreorder\u003c/code\u003e method on the \u003ccode\u003eleft\u003c/code\u003e node.\u003c/li\u003e\n\u003cli\u003eThe third step is similar to the second one but for the \u003ccode\u003eright\u003c/code\u003e node.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"timespace-complexity\"\u003eTime/Space Complexity\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe time complexity of the preorder algorithm is O(N), where N is the total number of nodes.\u003c/li\u003e\n\u003cli\u003eThe space complexity:\n\u003cul\u003e\n\u003cli\u003eO(1) if no recursion stack space is considered.\u003c/li\u003e\n\u003cli\u003eOtherwise, O(H), where H is the height of the tree.\u003c/li\u003e\n\u003cli\u003eIn the worst case, H can be the same as N (when the tree is skewed).\u003c/li\u003e\n\u003cli\u003eIn the best case, H can be the same as logN (when the tree is complete).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"DSA - Binary Search Tree - Traverse - Preorder"},{"content":"Introduction The delete algorithm is perhaps one of the hardest parts of managing a binary search tree (BST).\nCode Example final class BSTNode { var val: Int? var left: BSTNode? var right: BSTNode? init(val: Int? = nil) { self.val = val } func delete(_ val: Int) -\u0026gt; BSTNode? { // 1 guard let selfVal = self.val else { return nil } // 2 if val \u0026lt; selfVal { if self.left == nil { return self } self.left = self.left!.delete(val) } // 3 if val \u0026gt; selfVal { if self.right == nil { return self } self.right = self.right!.delete(val) } // 4 if self.right == nil { return self.left } // 5 if self.left == nil { return self.right } // 6 var minLargerNode = self.right while minLargerNode?.left != nil { minLargerNode = minLargerNode?.left } guard let minLargerNode = minLargerNode else { return self } self.val = minLargerNode.val self.right = self.right?.delete(minLargerNode.val!) return self } } Implementation Let’s look at the details:\nThe first step is to check for the base scenario: whether the BST has a self.val. If it does not, return nil. If it has a value, move to the second step. The second step is to check if the delete value is less than self.val. If it is, check if the left node exists. If it does not exist, return the self node. If it does exist, call delete on the left node and assign the new result to the left node. The third step is the opposite of the second step but for the right node. The fourth step is to check if the right node is nil. If it is, return the left node. The fifth step is the opposite of the fourth but for the left and right nodes. The sixth step is to find the minLargerNode, update self.val with minLargerNode.val, and delete minLargerNode.val from the right node, assigning the new result to it. Time Complexity The time complexity of the BST deletion algorithm is O(h), where h is the height of the tree.\nIn the case where the BST becomes skewed, the height of the BST h becomes O(n), making the time complexity O(n).\nIn the case where the BST is balanced, the height of the BST h becomes O(log n), making the time complexity O(log n).\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree-delete/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://en.wikipedia.org/wiki/Binary_search_tree#Deletion\"\u003edelete\u003c/a\u003e algorithm is perhaps one of the hardest parts of managing a binary search tree (BST).\u003c/p\u003e\n\u003ch3 id=\"code-example\"\u003eCode Example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBSTNode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eselfVal\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eselfVal\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eselfVal\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"n\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 6\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eminLargerNode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003eminLargerNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eminLargerNode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eminLargerNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eminLargerNode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eminLargerNode\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eminLargerNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eminLargerNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e!)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"implementation\"\u003eImplementation\u003c/h4\u003e\n\u003cp\u003eLet’s look at the details:\u003c/p\u003e","title":"DSA - Binary Search Tree - Delete"},{"content":"Introduction Finding the min and max elements is one of the simplest algorithms regarding BST (Binary Search Tree). The findMin method loops through the left child nodes and returns the value from the last node. The findMax method does the same but traverses the right child nodes.\nCode Example - Min func findMin() -\u0026gt; Int? { var min: Int? var curr: BSTNode? = self while curr != nil { min = curr?.val curr = curr?.left } return min } Code Example - Max func findMax() -\u0026gt; Int? { var max: Int? var curr: BSTNode? = self while curr != nil { max = curr?.val curr = curr?.right } return max } Complete Code Example final class BSTNode { var val: Int? var left: BSTNode? var right: BSTNode? init(val: Int? = nil) { self.val = val } func insert(_ val: Value) { if self.val == nil { self.val = val return } if self.val == val { return } if val \u0026lt; self.val! { if self.left != nil { self.left!.insert(val) return } else { self.left = BSTNode(val: val) return } } if self.right != nil { self.right!.insert(val) return } self.right = BSTNode(val: val) } func findMin() -\u0026gt; Int? { var min: Int? var curr: BSTNode? = self while curr != nil { min = curr?.val curr = curr?.left } return min } func findMax() -\u0026gt; Int? { var max: Int? var curr: BSTNode? = self while curr != nil { max = curr?.val curr = curr?.right } return max } } Time/Space Complexity For both findMin and findMax:\nTime Complexity is O(h), where h is the height of the tree. Space Complexity is O(1). Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree-min-max/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eFinding the \u003ccode\u003emin\u003c/code\u003e and \u003ccode\u003emax\u003c/code\u003e elements is one of the simplest algorithms regarding \u003ccode\u003eBST\u003c/code\u003e (Binary Search Tree). The \u003ccode\u003efindMin\u003c/code\u003e method loops through the \u003ccode\u003eleft\u003c/code\u003e child nodes and returns the value from the last node. The \u003ccode\u003efindMax\u003c/code\u003e method does the same but traverses the \u003ccode\u003eright\u003c/code\u003e child nodes.\u003c/p\u003e\n\u003ch4 id=\"code-example---min\"\u003eCode Example - Min\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efindMin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003emin\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"bp\"\u003emin\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"code-example---max\"\u003eCode Example - Max\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efindMax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003emax\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"complete-code-example\"\u003eComplete Code Example\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBSTNode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"bp\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e!.\u003c/span\u003e\u003cspan class=\"bp\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efindMin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003emin\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"bp\"\u003emin\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efindMax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eBSTNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003emax\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"timespace-complexity\"\u003eTime/Space Complexity\u003c/h3\u003e\n\u003cp\u003eFor both \u003ccode\u003efindMin\u003c/code\u003e and \u003ccode\u003efindMax\u003c/code\u003e:\u003c/p\u003e","title":"DSA - Binary Search Tree Min/Max"},{"content":"What is a Queue? A Queue is an abstract data type that serves as an ordered collection of elements.\nA simple queue typically has several operations:\npush(item) - adds an item to the tail pop() - removes and returns an item from the head These operations make a queue a FIFO (First In, First Out) data structure.\nImplementation There are two ways to implement a queue.\nThe first and simplest (but less efficient) way is by using an array and basic operations:\nstruct Queue { private(set) var queue: [Int] init(queue: [Int] = []) { self.queue = queue } mutating func push(_ item: Int) { self.queue.insert(item, at: 0) } mutating func pop() -\u0026gt; Int? { return self.queue.popLast() } func peek() -\u0026gt; Int? { return self.queue.last } } The second, more efficient way is by using a linked list, which allows push and pop operations in O(1) time.\nfinal class Node { private(set) var val: Int var next: Node? init( val: Int, next: Node? = nil ) { self.val = val self.next = next } } final class LinkedListQueue { private(set) var head: Node? private(set) var tail: Node? func push(_ item: Int) { let newNode = Node(val: item) if head == nil { self.head = newNode self.tail = newNode return } self.tail?.next = newNode self.tail = newNode } func pop() -\u0026gt; Int? { if head == nil { return nil } let tmp = self.head self.head = tmp?.next if self.head == nil { self.tail = nil } return tmp?.val } } Time/Space Complexity using a Linked List Queue Operation Average Worst Case Insert O(1) O(1) Delete O(1) O(1) Space Complexity: O(n) for both average and worst case.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-queue/","summary":"\u003ch3 id=\"what-is-a-queue\"\u003eWhat is a Queue?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29\"\u003eQueue\u003c/a\u003e is an abstract data type that serves as an ordered collection of elements.\u003c/p\u003e\n\u003cp\u003eA simple queue typically has several operations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epush(item)\u003c/code\u003e - adds an item to the \u003ccode\u003etail\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epop()\u003c/code\u003e - removes and returns an item from the \u003ccode\u003ehead\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese operations make a queue a \u003cstrong\u003eFIFO\u003c/strong\u003e (First In, First Out) data structure.\u003c/p\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eThere are two ways to implement a queue.\u003c/p\u003e\n\u003cp\u003eThe first and simplest (but less efficient) way is by using an array and basic operations:\u003c/p\u003e","title":"DSA - Queue"},{"content":"What is an Adjacency List? An Adjacency List helps store a list of connections between each vertex in a finite graph.\nVertex Connects with 0 1 1 0, 2, 3 2 1, 3 3 1, 2 Implementation The addEdge method takes vertices as input and adds an edge to the adjacency list. In this example, the adjacency list is represented as a dictionary that maps vertices to a set of all connected vertices.\nIn JSON form, it looks like this:\n{ \u0026#34;0\u0026#34;: [1], \u0026#34;1\u0026#34;: [0, 2, 3], \u0026#34;2\u0026#34;: [1, 3], \u0026#34;3\u0026#34;: [1, 2] } Code Example final class Graph { private(set) var graph: [Int: Set\u0026lt;Int\u0026gt;] init() { self.graph = [:] } func addEdge(u: Int, v: Int) -\u0026gt; [Int: Set\u0026lt;Int\u0026gt;] { if self.graph[u] == nil { self.graph[u] = [v] } else { self.graph[u]!.insert(v) } if self.graph[v] == nil { self.graph[v] = [u] } else { self.graph[v]!.insert(u) } return self.graph } } As for the implementation, the addEdge algorithm checks:\nIf vertex u is already in the graph, it inserts vertex v into the set. Otherwise, it creates a new set for u with vertex v. Finally, it repeats steps 1 \u0026amp; 2 but swaps u and v. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-adjacency-list/","summary":"\u003ch3 id=\"what-is-an-adjacency-list\"\u003eWhat is an Adjacency List?\u003c/h3\u003e\n\u003cp\u003eAn \u003ca href=\"https://en.wikipedia.org/wiki/Adjacency_list\"\u003eAdjacency List\u003c/a\u003e helps store a list of connections between each vertex in a finite \u003ca href=\"https://open.substack.com/pub/dmytrosblog/p/dsa-graph?r=2fepxg\u0026amp;utm_campaign=post\u0026amp;utm_medium=web\u0026amp;showWelcomeOnShare=true\"\u003egraph\u003c/a\u003e.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eVertex\u003c/th\u003e\n          \u003cth\u003eConnects with\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e0, 2, 3\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003e1, 3\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e3\u003c/td\u003e\n          \u003ctd\u003e1, 2\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eaddEdge\u003c/code\u003e method takes vertices as input and adds an edge to the adjacency list. In this example, the adjacency list is represented as a dictionary that maps vertices to a \u003ccode\u003eset\u003c/code\u003e of all connected vertices.\u003c/p\u003e","title":"DSA - Adjacency List"},{"content":"What is a graph? A graph is an abstract data type that represents vertices and edges that connect those vertices.\nSource\nImplementation A graph can be represented as a matrix with edges connecting each pair of vertices. For example, a graph with vertices 0, 1, 2, 3, 4 and edges between them can be represented as a matrix:\n0 1 2 3 4 0 false true false false true 1 true false true true true 2 false true false true false 3 false true true false true 4 true true false true false In Swift, you can use a list of lists (2D array) to represent the matrix:\n[ [false, true, false, false, true], [true, false, true, true, true], [false, true, false, true, false], [false, true, true, false, true], [true, true, false, true, false] ] In any cell where true is found, the corresponding vertices are connected by an edge.\nCode Example final class Graph { private(set) var graph: [[Bool]] init(numVertices: Int) { self.graph = Array( repeating: Array( repeating: false, count: numVertices ), count: numVertices ) } func addEdge(u: Int, v: Int) { graph[u][v] = true graph[v][u] = true } } The addEdge method takes u and v vertices and adds an edge between them by setting the corresponding cells to true. There are two cells in the matrix for each pair of vertices. For example, (0, 1) corresponds to these cells:\n0 1 2 3 4 0 false true false false false 1 true false false false false 2 false false false false false 3 false false false false false 4 false false false false false Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-graph/","summary":"\u003ch3 id=\"what-is-a-graph\"\u003eWhat is a graph?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29\"\u003egraph\u003c/a\u003e is an abstract data type that represents vertices and edges that connect those vertices.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-cafc5\" hidden\u003e\n    \u003clabel for=\"zoomCheck-cafc5\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/ada_cs_struct_graph_components.svg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://adacomputerscience.org/images/content/computer_science/data_structures_and_algorithms/data_structures/figures/ada_cs_struct_graph_components.svg\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eA graph can be represented as a matrix with edges connecting each pair of vertices. For example, a graph with vertices 0, 1, 2, 3, 4 and edges between them can be represented as a matrix:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e0\u003c/th\u003e\n          \u003cth\u003e1\u003c/th\u003e\n          \u003cth\u003e2\u003c/th\u003e\n          \u003cth\u003e3\u003c/th\u003e\n          \u003cth\u003e4\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e3\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n          \u003ctd\u003etrue\u003c/td\u003e\n          \u003ctd\u003efalse\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIn Swift, you can use a list of lists (2D array) to represent the matrix:\u003c/p\u003e","title":"DSA - Graph"},{"content":"What is Breadth First Search? Breadth-first search (BFS) is an algorithm for traversing tree or graph data structures. It starts at the root and explores all the neighboring nodes at the current depth before moving on to nodes at the next depth level.\nSource\nImplementation The implementation of BFS may vary depending on the problem. The main idea of BFS is:\nIt has a visited array that collects all elements that have already been visited. It has a queue with all elements it\u0026rsquo;s going to visit. It loops through the queue, removes the first element, and appends it to the visited list. Finally, it loops through all the neighbors and appends the neighbor to the queue if it has not been visited and is not already in the queue. Code Example func bfs(_ value: String) -\u0026gt; [String] { let graph: [String: [String]] = [ \u0026#34;New York\u0026#34;: [\u0026#34;Buenos Aires\u0026#34;, \u0026#34;Cairo\u0026#34;, \u0026#34;Tokyo\u0026#34;, \u0026#34;London\u0026#34;] ] var visited: [String] = [] var queue: [String] = [] queue.append(value) while !queue.isEmpty { let tmp = queue.removeFirst() visited.append(tmp) if let neighbors = graph[tmp] { for neighbor in neighbors.sorted() { if !visited.contains(neighbor) \u0026amp;\u0026amp; !queue.contains(neighbor) { queue.append(neighbor) } } } } return visited } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-breadth-first-search/","summary":"\u003ch3 id=\"what-is-breadth-first-search\"\u003eWhat is Breadth First Search?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Breadth-first_search\"\u003eBreadth-first search (BFS)\u003c/a\u003e is an algorithm for traversing tree or graph data structures. It starts at the root and explores all the neighboring nodes at the current depth before moving on to nodes at the next depth level.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-1b6ce\" hidden\u003e\n    \u003clabel for=\"zoomCheck-1b6ce\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/Breadth-first-tree.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003cbr\u003e\n\u003ca href=\"https://upload.wikimedia.org/wikipedia/commons/3/33/Breadth-first-tree.svg\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eThe implementation of BFS may vary depending on the problem. The main idea of BFS is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt has a \u003ccode\u003evisited\u003c/code\u003e array that collects all elements that have already been visited.\u003c/li\u003e\n\u003cli\u003eIt has a \u003ccode\u003equeue\u003c/code\u003e with all elements it\u0026rsquo;s going to visit.\u003c/li\u003e\n\u003cli\u003eIt loops through the \u003ccode\u003equeue\u003c/code\u003e, removes the first element, and appends it to the \u003ccode\u003evisited\u003c/code\u003e list.\u003c/li\u003e\n\u003cli\u003eFinally, it loops through all the \u003ccode\u003eneighbors\u003c/code\u003e and appends the neighbor to the \u003ccode\u003equeue\u003c/code\u003e if it has not been visited and is not already in the queue.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"code-example\"\u003eCode Example\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ebfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s\"\u003e\u0026#34;New York\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Buenos Aires\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Cairo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Tokyo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;London\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etmp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremoveFirst\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eneighbors\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eneighbor\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eneighbors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneighbor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003econtains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneighbor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eneighbor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"DSA - Breadth First Search"},{"content":"What is Backtracking? Backtracking is a class of algorithms for finding solutions to complex problems. A backtracking algorithm uses recursion and is based on depth-first search (DFS).\nDepth First Search (DFS) Depth First Search (DFS) is an essential part of backtracking. DFS is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (or an arbitrary node in the case of a graph) and explores as far as possible along each branch before backtracking.\nCode Example The implementation of the DFS algorithm for a graph looks like this:\nfunc dfs(_ r: Int, _ c: Int, _ visited: inout [[Int]]) { guard r \u0026gt;= 0, r \u0026lt; visited.count, c \u0026gt;= 0, c \u0026lt; visited[0].count, visited[r][c] == 0 else { return } visited[r][c] = 1 dfs(r - 1, c, \u0026amp;visited) dfs(r + 1, c, \u0026amp;visited) dfs(r, c - 1, \u0026amp;visited) dfs(r, c + 1, \u0026amp;visited) } It can vary depending on the problem, but the main idea is that it first checks if the r and c parameters are within bounds and if the value has not been visited before. After that, it recursively walks between the top, bottom, left, and right neighboring cells.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-backtracking/","summary":"\u003ch3 id=\"what-is-backtracking\"\u003eWhat is Backtracking?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Backtracking\"\u003eBacktracking\u003c/a\u003e is a class of algorithms for finding solutions to complex problems. A backtracking algorithm uses \u003ca href=\"https://en.wikipedia.org/wiki/Recursion_%28computer_science%29\"\u003erecursion\u003c/a\u003e and is based on \u003ca href=\"https://en.wikipedia.org/wiki/Depth-first_search\"\u003edepth-first search\u003c/a\u003e (DFS).\u003c/p\u003e\n\u003ch3 id=\"depth-first-search-dfs\"\u003eDepth First Search (DFS)\u003c/h3\u003e\n\u003cp\u003eDepth First Search (DFS) is an essential part of backtracking. DFS is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (or an arbitrary node in the case of a graph) and explores as far as possible along each branch before backtracking.\u003c/p\u003e","title":"DSA - Backtracking"},{"content":"What is a Trie? A Trie is a data structure usually called a \u0026ldquo;prefix tree,\u0026rdquo; often represented as a nested tree of dictionaries where each key is a character that maps to the next character in a word.\nLet\u0026rsquo;s look at some examples of a Trie. The Trie consists of two main classes: the TrieNode class and the Trie class.\nTrieNode The TrieNode class has two properties:\nchildren - a property that represents all characters in a given word and points to the next character. isEndSymbol - a property that indicates the end of the word in a given sequence of characters. final class TrieNode { var children: [Character: TrieNode?] var isEndSymbol: Bool init() { self.children = [:] self.isEndSymbol = false } } Trie The Trie class has two main operations, insert and exists, and a root property that stores all possible combinations of words.\nfinal class Trie { var root: TrieNode init() { self.root = TrieNode() } } Insert extension Trie { func insert(_ word: String) { var current = self.root for c in word { if current.children[c] == nil { let newNode = TrieNode() current.children[c] = newNode current = newNode } else { current = current.children[c]!! } } current.isEndSymbol = true } } The insert operation loops through all the characters of word and checks if the character exists in the current node:\nIf it does not exist, it creates a newNode, sets it in the current.children node, and updates the current node. If it does exist, it updates the current node with the children node containing that character. Exists extension Trie { func exists(_ word: String) -\u0026gt; Bool { var current = self.root for c in word { if current.children[c] == nil { return false } else { current = current.children[c]!! } } return current.isEndSymbol } } The exists operation loops over all the characters in the input word and checks if the current node contains the character:\nIf the current node does not have the character, it returns false. If the current node does have the character, it updates the current node with the node containing that character. When the loop completes, it returns the result based on whether the current node\u0026rsquo;s isEndSymbol is true. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-trie/","summary":"\u003ch3 id=\"what-is-a-trie\"\u003eWhat is a Trie?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Trie\"\u003eTrie\u003c/a\u003e is a data structure usually called a \u0026ldquo;prefix tree,\u0026rdquo; often represented as a nested tree of dictionaries where each key is a character that maps to the next character in a word.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s look at some examples of a Trie. The Trie consists of two main classes: the \u003ccode\u003eTrieNode\u003c/code\u003e class and the \u003ccode\u003eTrie\u003c/code\u003e class.\u003c/p\u003e\n\u003ch3 id=\"trienode\"\u003eTrieNode\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eTrieNode\u003c/code\u003e class has two properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echildren\u003c/code\u003e - a property that represents all characters in a given word and points to the next character.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisEndSymbol\u003c/code\u003e - a property that indicates the end of the word in a given sequence of characters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTrieNode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTrieNode\u003c/span\u003e\u003cspan class=\"p\"\u003e?]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eisEndSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[:]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisEndSymbol\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"trie\"\u003eTrie\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eTrie\u003c/code\u003e class has two main operations, \u003ccode\u003einsert\u003c/code\u003e and \u003ccode\u003eexists\u003c/code\u003e, and a \u003ccode\u003eroot\u003c/code\u003e property that stores all possible combinations of words.\u003c/p\u003e","title":"DSA - Trie"},{"content":"What is a Tree? A Tree is a data structure that has a root and subtrees of children, representing a set of linked nodes. Trees behave similarly to a LinkedList in that they have a collection of nodes starting with a head (root). The main difference is that Trees can have multiple children, whereas a LinkedList, on the other hand, can have only one next child.\nI’m going to focus on a commonly used type of tree, the Binary Search Tree.\nBinary Search Tree A Binary Search Tree (BST) is also called an ordered tree. A BST has two children, left and right. The left child value is always less than its parent value, and the right child value is always greater than its parent value. Duplicate values are not allowed. These constraints help to add, remove, and find nodes very quickly (on average O(log n), worst case O(n)).\nCode Example final class BSTNode { let val: Int var left: BSTNode? var right: BSTNode? init( val: Int, left: BSTNode? = nil, right: BSTNode? = nil ) { self.val = val self.left = left self.right = right } } BST - Insert Let’s look at how binary search tree insertion works:\nOne of the BST constraints is that duplicate values are not allowed, so we need to check for duplicates before adding any logic. The next step is to check if the inserting value is less than self.val and recursively insert this value into the left child node, or create a new left child node if it does not exist. The final step is to recursively insert the value into the right child if it exists, or create a new node. func insert(_ val: Int) { if self.val == val { return } if val \u0026lt; self.val { if self.left != nil { self.left!.insert(val) return } else { self.left = BSTNode(val: val) return } } if self.right != nil { self.right!.insert(val) return } self.right = BSTNode(val: val) } BST - Delete Let\u0026rsquo;s look at another operation, delete, which is slightly more complicated than insert:\nThe first step is to compare the value the user is trying to delete with self.val. If it is less and the left child exists, then delete the value from left recursively and update left. The second step is the opposite of the previous step but for the right child. The third and fourth steps are base cases, where we need to check if right and left children exist. If the right child does not exist, return the left child, and vice versa for the left child. The final step is to find the minLargerNode, update the value, and replace the right child with this node. func delete(_ val: Int) -\u0026gt; BSTNode? { if val \u0026lt; self.val { if self.left != nil { self.left = self.left!.delete(val) } return self } if val \u0026gt; self.val { if self.right != nil { self.right = self.right!.delete(val) } return self } if self.right == nil { return self.left } if self.left == nil { return self.right } var minLargerNode = self.right while minLargerNode?.left != nil { minLargerNode = minLargerNode!.left } self.val = minLargerNode!.val self.right = self.right?.delete(minLargerNode!.val) return self } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search-tree/","summary":"\u003ch3 id=\"what-is-a-tree\"\u003eWhat is a Tree?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Tree_%28data_structure%29\"\u003e\u003ccode\u003eTree\u003c/code\u003e\u003c/a\u003e is a data structure that has a root and subtrees of children, representing a set of linked nodes. \u003ccode\u003eTrees\u003c/code\u003e behave similarly to a \u003ca href=\"https://dmytrosblog.substack.com/p/dsa-linked-list?r=2fepxg\"\u003e\u003ccode\u003eLinkedList\u003c/code\u003e\u003c/a\u003e in that they have a collection of nodes starting with a \u003ccode\u003ehead (root)\u003c/code\u003e. The main difference is that \u003ccode\u003eTrees\u003c/code\u003e can have multiple children, whereas a \u003ccode\u003eLinkedList\u003c/code\u003e, on the other hand, can have only one \u003ccode\u003enext\u003c/code\u003e child.\u003c/p\u003e\n\u003cp\u003eI’m going to focus on a commonly used type of tree, the Binary Search Tree.\u003c/p\u003e","title":"DSA - Binary Search Tree"},{"content":"What is the sliding window technique? The sliding window technique is a common algorithmic approach used to create a fixed-sized window that moves through the data one step at a time, typically from left to right, to perform specific operations or computations on the elements within the window.\nWhat is the sliding window algorithm? The sliding window algorithm is a method for finding a subset of elements that satisfy certain conditions in a given problem.\nHow does the sliding window algorithm work? Let’s look at the \u0026ldquo;maximum sum of a subarray\u0026rdquo; problem to better understand how it works:\nProblem: Given an array of integers, find the maximum sum of a subarray with a fixed window size.\nIn this case, the sliding window algorithm uses a fixed size window that the user can pass to a function as a parameter. It iterates through all the elements inside that window by accessing the current value(nums[i]) and previous value(nums[i - k]) and calculates the window sum, which is needed to determine the max sum result.\nCode Example func maxSubArraySum(_ nums: [Int], _ k: Int) -\u0026gt; Int { var maxSum = Int.min var windowSum = nums[0 ..\u0026lt; k].reduce(0, +) for i in k ..\u0026lt; nums.count { windowSum += nums[i] - nums[i - k] maxSum = max(maxSum, windowSum) } return maxSum } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-sliding-window/","summary":"\u003ch3 id=\"what-is-the-sliding-window-technique\"\u003eWhat is the sliding window technique?\u003c/h3\u003e\n\u003cp\u003eThe sliding window technique is a common algorithmic approach used to create a fixed-sized window that moves through the data one step at a time, typically from left to right, to perform specific operations or computations on the elements within the window.\u003c/p\u003e\n\u003ch3 id=\"what-is-the-sliding-window-algorithm\"\u003eWhat is the sliding window algorithm?\u003c/h3\u003e\n\u003cp\u003eThe sliding window algorithm is a method for finding a subset of elements that satisfy certain conditions in a given problem.\u003c/p\u003e","title":"DSA - Sliding Window"},{"content":"What is a Linked List? A linked list is a common data structure that is similar to an array, but its order is based on pointers to the next element in memory instead of using physical placement (indices).\nA linked list has two main components:\nListNode class: This class has a val property that represents the value and a next property that represents a pointer to the next element in memory. LinkedList class: This class stores a collection of ListNode elements and provides operations like add to tail and add to head. The add to tail operation takes O(n) time because it needs to iterate through the list to find the last element. The add to head operation takes O(1) time because it only needs to set the next pointer of the new node to the current head and update the head with the new node. Where can it be used? A linked list can be used in stacks, queues, and lists.\nCode Example final class ListNode { let val: Int var next: ListNode? init(val: Int, next: ListNode? = nil) { self.val = val self.next = next } } final class LinkedList { private(set) var head: ListNode? init(head: ListNode? = nil) { self.head = head } func addToTail(_ newNode: ListNode?) { if self.head == nil { self.head = newNode return } var node: ListNode? = self.head while node?.next != nil { node = node!.next } node?.next = newNode } func addToHead(_ newNode: ListNode?) { newNode?.next = self.head self.head = newNode } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-linked-list/","summary":"\u003ch3 id=\"what-is-a-linked-list\"\u003eWhat is a Linked List?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Linked_list\"\u003elinked list\u003c/a\u003e is a common data structure that is similar to an array, but its order is based on pointers to the next element in memory instead of using physical placement (indices).\u003c/p\u003e\n\u003cp\u003eA linked list has two main components:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eListNode\u003c/strong\u003e class: This class has a \u003ccode\u003eval\u003c/code\u003e property that represents the value and a \u003ccode\u003enext\u003c/code\u003e property that represents a pointer to the next element in memory.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinkedList\u003c/strong\u003e class: This class stores a collection of \u003ccode\u003eListNode\u003c/code\u003e elements and provides operations like \u003ccode\u003eadd to tail\u003c/code\u003e and \u003ccode\u003eadd to head\u003c/code\u003e.\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eadd to tail\u003c/code\u003e operation takes O(n) time because it needs to iterate through the list to find the last element.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eadd to head\u003c/code\u003e operation takes O(1) time because it only needs to set the next pointer of the new node to the current head and update the head with the new node.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"where-can-it-be-used\"\u003eWhere can it be used?\u003c/h3\u003e\n\u003cp\u003eA linked list can be used in stacks, queues, and lists.\u003c/p\u003e","title":"DSA - Linked List"},{"content":"What is binary search? Binary search is an algorithm that helps find an element in a sorted array in O(log n) time.\nWhy should the input be sorted before performing binary search? The input array for binary search needs to be sorted because the algorithm eliminates half of the choices at each step. If the guessed value is greater than the target value, it knows that the right part can’t contain the target value.\nHow does binary search work? It uses the two pointers technique, which helps divide the input into two halves with each iteration, compares the middle array element with the target value, and shifts the pointers based on which half contains the target value.\nCode Example func binarySearch(_ arr: [Int], _ target: Int) -\u0026gt; Int? { var l: Int = 0 var r: Int = arr.count - 1 while l \u0026lt;= r { let m = (l + r) / 2 if arr[m] \u0026lt; target { l = m + 1 } else if arr[m] \u0026gt; target { r = m - 1 } else { return m } } return nil } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-binary-search/","summary":"\u003ch3 id=\"what-is-binary-search\"\u003eWhat is binary search?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Binary_search\"\u003eBinary search\u003c/a\u003e is an algorithm that helps find an element in a sorted array in O(log n) time.\u003c/p\u003e\n\u003ch3 id=\"why-should-the-input-be-sorted-before-performing-binary-search\"\u003eWhy should the input be sorted before performing binary search?\u003c/h3\u003e\n\u003cp\u003eThe input array for binary search needs to be sorted because the algorithm eliminates half of the choices at each step. If the guessed value is greater than the target value, it knows that the right part can’t contain the target value.\u003c/p\u003e","title":"DSA - Binary Search"},{"content":"What is a Stack? A stack is an abstract data type that serves as a collection of elements and implements operations like push, pop, and peek at the end in O(1) time. It uses the LIFO (last in, first out) order. For example, a stack can be a collection of items where adding or removing is practical at the top.\nCode Example struct Stack\u0026lt;Element\u0026gt; { private var array: [Element] init(array: [Element] = []) { self.array = array } mutating func push(_ element: Element) { array.append(element) } mutating func pop() -\u0026gt; Element? { if array.isEmpty { return nil } return array.popLast() } func peek() -\u0026gt; Element? { if array.isEmpty { return nil } return array.last } } Practical Applications of Stacks You can observe stack-like behavior in many places, such as redo-undo features in text editors, Photoshop, and the forward and backward navigation features in web browsers.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-stack/","summary":"\u003ch3 id=\"what-is-a-stack\"\u003eWhat is a Stack?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29\"\u003estack\u003c/a\u003e is an abstract data type that serves as a collection of elements and implements operations like \u003ccode\u003epush\u003c/code\u003e, \u003ccode\u003epop\u003c/code\u003e, and \u003ccode\u003epeek\u003c/code\u003e at the end in O(1) time. It uses the LIFO (\u003cstrong\u003elast in\u003c/strong\u003e, \u003cstrong\u003efirst out\u003c/strong\u003e) order. For example, a stack can be a collection of items where adding or removing is practical at the top.\u003c/p\u003e\n\u003ch4 id=\"code-example\"\u003eCode Example\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eStack\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eElement\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eElement\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eElement\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003emutating\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eElement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003emutating\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eElement\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epopLast\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003epeek\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eElement\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003eisEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003elast\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"practical-applications-of-stacks\"\u003ePractical Applications of Stacks\u003c/h3\u003e\n\u003cp\u003eYou can observe stack-like behavior in many places, such as redo-undo features in text editors, Photoshop, and the forward and backward navigation features in web browsers.\u003c/p\u003e","title":"DSA - Stack"},{"content":"What is the Two Pointers Technique? The two pointers technique helps track indices in a collection of elements to access objects in memory by index with O(1) space. This technique is very handy when you need to optimize the time and space of a solution.\nWhat Problems Does It Solve? The two pointers technique solves problems involving collections. For example, it is useful when you need to compare each element to other elements in that collection.\nWhat Are the Ways to Use It? The first way to use the two pointers technique is to set the left pointer at the beginning of the array and the right pointer at the end, then increment the left and decrement the right pointer until they meet.\nwhile l \u0026lt; r { l += 1 r -= 1 } The second way is to use slow and fast pointers for cycle detection in a LinkedList. It is called fast and slow because the fast pointer moves twice as fast as the slow pointer.\nclass Node { var val: Int var next: Node? init(val: Int, next: Node? = nil) { self.val = val self.next = next } } func hasCycle(_ head: Node?) -\u0026gt; Bool { var fast = head var slow = head while fast != nil \u0026amp;\u0026amp; fast?.next != nil { fast = fast?.next?.next slow = slow?.next if fast == slow { return true } } return false } Problem As an example, let\u0026rsquo;s look at the Two Sum II - Input Array Is Sorted problem.\nGiven a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 \u0026lt;= index1 \u0026lt; index2 \u0026lt;= numbers.length. Return the indices of the two numbers, index1 and index2, added by one, as an integer array [index1, index2] of length 2. The tests are generated such that there is exactly one solution. You may not use the same element twice. Your solution must use only constant extra space.\nSolution Let\u0026rsquo;s look at the solution to the Two Sum II - Input Array Is Sorted problem that uses the two pointers technique, where the left pointer is initialized with the first index in the array and the right pointer is initialized with the last index.\nclass Solution { func twoSum(_ numbers: [Int], _ target: Int) -\u0026gt; [Int] { var l: Int = 0 var r: Int = numbers.count - 1 while l \u0026lt; r { if numbers[l] + numbers[r] \u0026lt; target { l += 1 } else if numbers[l] + numbers[r] \u0026gt; target { r -= 1 } else { return [l+1,r+1] } } return [] } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-two-pointers-technique/","summary":"\u003ch3 id=\"what-is-the-two-pointers-technique\"\u003eWhat is the Two Pointers Technique?\u003c/h3\u003e\n\u003cp\u003eThe two pointers technique helps track indices in a collection of elements to access objects in memory by index with O(1) space. This technique is very handy when you need to optimize the time and space of a solution.\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat Problems Does It Solve?\u003c/h3\u003e\n\u003cp\u003eThe two pointers technique solves problems involving collections. For example, it is useful when you need to compare each element to other elements in that collection.\u003c/p\u003e","title":"DSA - Two Pointers Technique"},{"content":"Introduction In the previous chapter, we discussed Data Structures and Algorithms, delved into an overview of Dynamic Arrays, and solved the \u0026ldquo;Remove Element\u0026rdquo; problem.\nIn this article, I\u0026rsquo;m going to show one of the ways to solve the 88. Merge Sorted Array problem.\nProblem You are given two integer arrays, nums1 and nums2, sorted in non-decreasing order, and two integers, m and n, representing the number of elements in nums1 and nums2, respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function but should instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\nSolution class Solution { func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) { if m == 0 { nums1 = nums2 } else if n == 0 { let tmp = nums1 nums1 = tmp } else { var num1result: [Int] = [] for i in 0 ..\u0026lt; m { num1result.append(nums1[i]) } var num2result: [Int] = [] for i in 0 ..\u0026lt; n { num2result.append(nums2[i]) } var result = num1result + num2result result.sort() nums1 = result } } } Approach The brute-force way to solve this problem is to check the lengths of m and n, and if it\u0026rsquo;s 0, assign a copy of nums2 or nums1 appropriately. In case m and n are not equal to 0, create additional arrays and loop through nums1 and nums2, taking into account the number of elements in the m and n properties.\nTime Complexity: O(logn) because it uses the underlying sort method. Space Complexity: O(m+n) because it uses additional arrays for num1 and num2 results. Optimized Approach I found a more optimal solution that uses Time Complexity: O(m + n), Space Complexity: O(1), and a three-pointer technique. In this solution, the i pointer reads values from nums1, the j pointer reads values from nums2, and the w pointer writes values to nums1. Loop backward through the sum of m + n elements and update the nums1 values. Decrement the i pointer if i is greater than or equal to 0 and the value of nums1[i] is greater than nums2[j]. If not, update the value in nums1 and decrement the j pointer.\nclass Solution { func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) { var i = m - 1 var j = n - 1 for w in stride(from:n+m-1, through:0, by:-1) { if j \u0026lt; 0 { break } if i \u0026gt;= 0 \u0026amp;\u0026amp; nums1[i] \u0026gt; nums2[j] { nums1[w] = nums1[i] i -= 1 } else { nums1[w] = nums2[j] j -= 1 } } } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/dsa-merge-sorted-array-problem/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn the \u003ca href=\"https://dmytros.blog/posts/data-structures-and-algorithms-arrays-swift/\"\u003eprevious chapter\u003c/a\u003e, we discussed Data Structures and Algorithms, delved into an overview of Dynamic Arrays, and solved the \u0026ldquo;Remove Element\u0026rdquo; problem.\u003c/p\u003e\n\u003cp\u003eIn this article, I\u0026rsquo;m going to show one of the ways to solve the \u003ca href=\"https://leetcode.com/problems/merge-sorted-array/description/?envType=study-plan-v2\u0026amp;envId=top-interview-150\"\u003e88. Merge Sorted Array\u003c/a\u003e problem.\u003c/p\u003e\n\u003ch3 id=\"problem\"\u003eProblem\u003c/h3\u003e\n\u003cp\u003eYou are given two integer arrays, \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, sorted in non-decreasing order, and two integers, \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e, representing the number of elements in \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, respectively. Merge \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function but should instead be stored inside the array \u003ccode\u003enums1\u003c/code\u003e. To accommodate this, \u003ccode\u003enums1\u003c/code\u003e has a length of \u003ccode\u003em + n\u003c/code\u003e, where the first \u003ccode\u003em\u003c/code\u003e elements denote the elements that should be merged, and the last \u003ccode\u003en\u003c/code\u003e elements are set to \u003ccode\u003e0\u003c/code\u003e and should be ignored. \u003ccode\u003enums2\u003c/code\u003e has a length of \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e","title":"DSA - Merge Sorted Array Problem"},{"content":"Introduction I’ve always been curious about data structures and algorithms, and how they can improve user experiences while saving money for businesses through optimized computations.\nIn this series of articles, I’m going to solve LeetCode problems and share my approach with you.\nI’ve just started my journey in solving LeetCode problems, so my solutions might not be as efficient as they could be, but I’m always looking for improvement.\nBefore each topic, I’ll provide a brief introduction to the data structure, algorithm, or technique I’ll be using to solve a specific problem.\nData Structure Let’s actually find out what a data structure is.\nA data structure is a way of organizing and storing data that is chosen for efficient access and modification. A data structure is a collection of data values and the relationships among them.\nAlgorithm An algorithm is a finite set of instructions that helps solve a specific problem. A real-world example could be a cooking recipe or the steps to prepare coffee with a coffee machine.\nArrays In the Swift programming language, arrays are dynamic by default. A dynamic array is a commonly used data structure that consists of a collection of elements of the same memory size, with each element identified by an index or key. You can access, remove, and add new elements to the tail by index in O(1) time.\nTime Complexity Peak Index Insert or Delete from Beginning Insert or Delete from End Insert or Delete from Middle O(1) O(n) O(1) O(n) Resizing a Dynamic Array A dynamic array increases its underlying capacity and resizes to double its size only when the array size equals its capacity, to avoid the expensive cost of resizing frequently.\nProblem 27. Remove Element. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val. Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\nChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums. Return k. Solution class Solution { func removeElement(_ nums: inout [Int], _ val: Int) -\u0026gt; Int { var i = 0 while i \u0026lt; nums.count { if nums[i] == val { nums.remove(at: i) } else { i += 1 } } return nums.count } } Approach to Solving Problems One brute-force way to solve this problem is to loop through all values and check if a number is equal to a value. If it is, then remove the element with this index from the array; if not, increment the index.\nTime Complexity: O(n) because the value can be at the end of the array, requiring a loop through all values.\nSpace Complexity: O(1) because no additional space is required; all occurrences of the value are removed in-place.\nResources I’m very grateful for the NeetCode roadmap and in-depth algorithm explanations. I’ve learned a lot about new techniques and ways to solve problems more efficiently. I recommend checking out the NeetCode site and YouTube channel.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/data-structures-and-algorithms-arrays-swift/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI’ve always been curious about data structures and algorithms, and how they can improve user experiences while saving money for businesses through optimized computations.\u003c/p\u003e\n\u003cp\u003eIn this series of articles, I’m going to solve LeetCode problems and share my approach with you.\u003c/p\u003e\n\u003cp\u003eI’ve just started my journey in solving LeetCode problems, so my solutions might not be as efficient as they could be, but I’m always looking for improvement.\u003c/p\u003e\n\u003cp\u003eBefore each topic, I’ll provide a brief introduction to the data structure, algorithm, or technique I’ll be using to solve a specific problem.\u003c/p\u003e","title":"Data Structures and Algorithms Arrays Swift"},{"content":"Introduction A well-performing application is the heart of a good user experience. If an application responds well, it helps attract more users and grow the business around it. On the other hand, if it performs poorly, it frustrates users and leads them to uninstall the app. To solve these issues, we need tools to monitor app behavior. Luckily for us, Xcode provides a list of tools that will help us resolve these problems.\nCommon Problems If I could generalize common problems that every iOS developer deals with while working on a multi-user app, it would be:\nUnresponsiveness and hangs Memory issues Power-consumption issues I/O issues Network-related issues Slow app launch time Ways to Address Common Problems If you want to improve any of these categories, Apple provides developers multiple ways to do it:\nThe first way is to use Xcode Organizer to view metrics for launch time, memory usage, energy consumption, etc. The second way is to collect health information about your app using MetricKit. The third way is to get feedback from TestFlight testers about their experience using the beta version of your app. The fourth way is to get feedback from real users through email or an interface inside your app. Tools That Can Help Solve Problems If you have Unresponsiveness and hangs, you can use the Time Profiler tool to find what causes the problem.\nFor Memory issues, you can use Allocations and Leaks. For Power-consumption issues, you can use the Energy Log tool. For I/O issues, you can use the File Activity tool. For Network-related issues, you can use the Network Template tool. Resources If you want more detailed information about optimizing app performance, I recommend reading the official Apple documentation. It describes techniques in depth and has a lot of related resources and recommendations.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/optimizing-ios-app-performance-common-techniques/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eA well-performing application is the heart of a good user experience. If an application responds well, it helps attract more users and grow the business around it. On the other hand, if it performs poorly, it frustrates users and leads them to uninstall the app. To solve these issues, we need tools to monitor app behavior. Luckily for us, Xcode provides a list of tools that will help us resolve these problems.\u003c/p\u003e","title":"Optimizing iOS App Performance - Common Techniques"},{"content":"Introduction Previously, I worked with a healthcare app that used the HealthKit framework, but I did not get the opportunity to implement it myself. I decided to look into it and share what I found. In this article, I will focus on the steps to integrate HealthKit, write, and access its data.\nPreparation Before we dive into implementation, I assume that you have an active Apple Developer account; without it, you will not be able to access the HealthKit Store. Let’s add:\nHealthKit Capability to the project Privacy permission Privacy – Health Share Usage Description, Privacy – Health Update Usage Description keys to Info.plist. Implementation First Step The first step is to call the isHealthDataAvailable method and make sure that it is available.\nguard HKHealthStore.isHealthDataAvailable() else { throw HealthkitSetupError.notAvailableOnDevice } Data Type Preparation Next, you need to prepare the data types that you will be reading and writing from the HealthKit central repository.\nguard let height = HKObjectType.quantityType(forIdentifier: .height), let bodyMass = HKObjectType.quantityType(forIdentifier: .bodyMass), let activeEnergyBurned = HKObjectType.quantityType(forIdentifier: .activeEnergyBurned) else { throw HealthkitSetupError.dataTypeNotAvailable } let typesToWrite: Set\u0026lt;HKSampleType\u0026gt; = [height, bodyMass, HKObjectType.workoutType()] let typesToRead: Set\u0026lt;HKObjectType\u0026gt; = [height, bodyMass, activeEnergyBurned, HKObjectType.workoutType()] Request Authorization Next, you need to request authorization with the data types that you defined above.\ntry await HKHealthStore().requestAuthorization(toShare: typesToWrite, read: typesToRead) import Inject import SwiftUI public struct ContentView: View { @ObserveInjection var inject @State var healthKitService: HealthKitService = .init() public init() {} public var body: some View { VStack {}.onAppear { Task { do { try await healthKitService.requestAuthorization() print(\u0026#34;HealthKit authorization request success\u0026#34;) } catch { print(\u0026#34;HealthKit authorization request failed error: \\(error)\u0026#34;) } } } .enableInjection() } } Reading/Saving Data Reading Data When you need to read/save data using HealthKit, you can do it by applying the HKHealthStore object.\n\u0026#x1f4a1; HKHealthStore - The access point for all data managed by HealthKit.\nAs an example, you can read characteristic data by utilizing HKHealthStore-defined methods such as biologicalSex, bloodType, dateOfBirthComponents, etc.\nfunc getProfileData() throws -\u0026gt; ProfileData { let healthStore = HKHealthStore() let dateOfBirthComponents = try healthStore.dateOfBirthComponents() let today = Date() let calendar = Calendar.current let todayDateComponents = calendar.dateComponents([.year], from: today) let thisYear = todayDateComponents.year! let age = thisYear - dateOfBirthComponents.year! let biologicalSex = try healthStore.biologicalSex() let bloodType = try healthStore.bloodType() let profileData = ProfileData(age: age, biologicalSex: biologicalSex.biologicalSex, bloodType: bloodType.bloodType) return profileData } struct ProfileData { var age: Int? var biologicalSex: HKBiologicalSex? var bloodType: HKBloodType? } Saving Data In the case of saving data, you need to specify the quantity type, quantity, and create a sample.\nfunc saveHeight(height: Double, date: Date) async throws { let quantityType = HKQuantityType.quantityType(forIdentifier: .height)! let quantity = HKQuantity(unit: .meter(), doubleValue: height) let sample = HKQuantitySample(type: quantityType, quantity: quantity, start: date, end: date) try await HKHealthStore().save(sample) } \u0026#x1f4a1; HKQuantityType - A type that identifies samples that store numerical values.\n\u0026#x1f4a1; HKQuantity - An object that stores a value for a given unit.\n\u0026#x1f4a1; HKQuantitySample - A sample that represents a quantity, including the value and the units.\nComplete Example import HealthKit enum HealthkitSetupError: Error { case notAvailableOnDevice case dataTypeNotAvailable } final class HealthKitService { func requestAuthorization() async throws { guard HKHealthStore.isHealthDataAvailable() else { throw HealthkitSetupError.notAvailableOnDevice } guard let height = HKObjectType.quantityType(forIdentifier: .height), let bodyMass = HKObjectType.quantityType(forIdentifier: .bodyMass), let activeEnergyBurned = HKObjectType.quantityType(forIdentifier: .activeEnergyBurned), let dateOfBirth = HKObjectType.characteristicType(forIdentifier: .dateOfBirth), let bloodType = HKObjectType.characteristicType(forIdentifier: .bloodType), let biologicalSex = HKObjectType.characteristicType(forIdentifier: .biologicalSex) else { throw HealthkitSetupError.dataTypeNotAvailable } let typesToWrite: Set\u0026lt;HKSampleType\u0026gt; = [height, bodyMass, HKObjectType.workoutType()] let typesToRead: Set\u0026lt;HKObjectType\u0026gt; = [height, bodyMass, activeEnergyBurned, HKObjectType.workoutType(), dateOfBirth, bloodType, biologicalSex] try await HKHealthStore().requestAuthorization(toShare: typesToWrite, read: typesToRead) } func getProfileData() throws -\u0026gt; ProfileData { let healthStore = HKHealthStore() let dateOfBirthComponents = try healthStore.dateOfBirthComponents() let today = Date() let calendar = Calendar.current let todayDateComponents = calendar.dateComponents([.year], from: today) let thisYear = todayDateComponents.year! let age = thisYear - dateOfBirthComponents.year! let biologicalSex = try healthStore.biologicalSex() let bloodType = try healthStore.bloodType() let profileData = ProfileData(age: age, biologicalSex: biologicalSex.biologicalSex, bloodType: bloodType.bloodType) return profileData } func saveHeight(height: Double, date: Date) async throws { let quantityType = HKQuantityType.quantityType(forIdentifier: .height)! let quantity = HKQuantity(unit: .meter(), doubleValue: height) let sample = HKQuantitySample(type: quantityType, quantity: quantity, start: date, end: date) try await HKHealthStore().save(sample) } } struct ProfileData { var age: Int? var biologicalSex: HKBiologicalSex? var bloodType: HKBloodType? } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-healthkit-in-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003ePreviously, I worked with a healthcare app that used the HealthKit framework, but I did not get the opportunity to implement it myself. I decided to look into it and share what I found. In this article, I will focus on the steps to integrate HealthKit, write, and access its data.\u003c/p\u003e\n\u003ch3 id=\"preparation\"\u003ePreparation\u003c/h3\u003e\n\u003cp\u003eBefore we dive into implementation, I assume that you have an active Apple Developer account; without it, you will not be able to access the HealthKit Store.\nLet’s add:\u003c/p\u003e","title":"Implementing HealthKit in an iOS App"},{"content":"Introduction Nowadays, location is an essential feature in almost every application. It\u0026rsquo;s very important to know the best ways to implement it without affecting performance and user experience. In this article, I will focus on how to implement general methods in location service.\nPreparation Before we begin, let\u0026rsquo;s add location permission keys to Info.plist:\nPrivacy - Location When In Use Usage Description Privacy - Location Always and When In Use Usage Description First Step The first step is to create LocationService with the requestPermissions method to be able to receive location events.\nprivate let locationManager: CLLocationManager override init() { self.locationManager = CLLocationManager() super.init() requestPermissions() } func requestPermissions() { locationManager.requestWhenInUseAuthorization() } 💡 Use requestWhenInUseAuthorization only if you need location updates when the user is using your app.\nSecond Step The second step is to add locationManager.delegate to be able to handle location updates or errors.\n// MARK: - CLLocationManagerDelegate extension LocationService: CLLocationManagerDelegate { func locationManager( _ manager: CLLocationManager, didUpdateLocations locations: [CLLocation] ) { guard let location = locations.first else { return } let latitude = location.coordinate.latitude let longitude = location.coordinate.longitude print(\u0026#34;Location: \\(latitude), \\(longitude)\u0026#34;) } func locationManager( _ manager: CLLocationManager, didFailWithError error: Error ) { print(\u0026#34;Error: \\(error)\u0026#34;) } } 💡 CLLocationManager - The object you use to start and stop the delivery of location-related events to your app.\n💡 CLLocationManagerDelegate - The methods you use to receive events from an associated location-manager object.\nAuthorization Status Sometimes you need to know about authorization status and create logic around it. In this case, you can check the status by using the authorizationStatus property.\nfunc authorizationStatus() { switch locationManager.authorizationStatus { case .notDetermined: print(\u0026#34;Not determined\u0026#34;) case .restricted: print(\u0026#34;Restricted\u0026#34;) case .denied: print(\u0026#34;Denied\u0026#34;) case .authorizedAlways: print(\u0026#34;Authorized always\u0026#34;) case .authorizedWhenInUse: print(\u0026#34;Authorized when in use\u0026#34;) @unknown default: print(\u0026#34;Unknown\u0026#34;) } } One-Time Location Update In case you want to ask the user for location only once, you can call the locationManager.requestLocation() method.\nfunc requestLocationOnce() { locationManager.requestLocation() } Real-Time Location Updates In case you need to get real-time location updates, you can use the startUpdatingLocation and stopUpdatingLocation methods.\nfunc requestRealTimeLocationUpdates() { locationManager.startUpdatingLocation() DispatchQueue.main.asyncAfter(deadline: .now() + 10) { self.locationManager.stopUpdatingLocation() } } ⚠️ Do not forget to call the stopUpdatingLocation method, as it can cause performance issues.\nComplete Example import CoreLocation final class LocationService: NSObject { private let locationManager: CLLocationManager override init() { locationManager = CLLocationManager() super.init() locationManager.delegate = self requestPermissions() } func requestPermissions() { locationManager.requestWhenInUseAuthorization() } func requestLocationOnce() { locationManager.requestLocation() } func requestRealTimeULocationUpdates() { locationManager.startUpdatingLocation() DispatchQueue.main.asyncAfter(deadline: .now() + 10) { self.locationManager.stopUpdatingLocation() } } func authorizationStatus() { switch locationManager.authorizationStatus { case .notDetermined: print(\u0026#34;Not determined\u0026#34;) case .restricted: print(\u0026#34;Restricted\u0026#34;) case .denied: print(\u0026#34;Denied\u0026#34;) case .authorizedAlways: print(\u0026#34;Authorized always\u0026#34;) case .authorizedWhenInUse: print(\u0026#34;Authorized when in use\u0026#34;) @unknown default: print(\u0026#34;Unknown\u0026#34;) } } } // MARK: - CLLocationManagerDelegate extension LocationService: CLLocationManagerDelegate { func locationManager( _: CLLocationManager, didUpdateLocations locations: [CLLocation] ) { guard let location = locations.first else { return } let lattitude = location.coordinate.latitude let longitude = location.coordinate.longitude print(\u0026#34;Location: \\(lattitude), \\(longitude)\u0026#34;) } func locationManager( _: CLLocationManager, didFailWithError error: Error ) { print(\u0026#34;Error: \\(error)\u0026#34;) } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-location-service/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eNowadays, location is an essential feature in almost every application. It\u0026rsquo;s very important to know the best ways to implement it without affecting performance and user experience. In this article, I will focus on how to implement general methods in location service.\u003c/p\u003e\n\u003ch3 id=\"preparation\"\u003ePreparation\u003c/h3\u003e\n\u003cp\u003eBefore we begin, let\u0026rsquo;s add location permission keys to \u003ccode\u003eInfo.plist\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePrivacy - Location When In Use Usage Description\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePrivacy - Location Always and When In Use Usage Description\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is to create \u003ccode\u003eLocationService\u003c/code\u003e with the \u003ccode\u003erequestPermissions\u003c/code\u003e method to be able to receive location events.\u003c/p\u003e","title":"Implementing Location Service"},{"content":"Introduction I haven\u0026rsquo;t had the opportunity to build a chatbot before. This topic was trending some time ago, and I always wanted to implement it myself. In this article, I will focus on the steps you need to know to successfully build and run a chatbot application.\nFirst Step The first step is to add the OpenAI dependency to your project:\n.package(url: \u0026#34;https://github.com/MacPaw/OpenAI.git\u0026#34;, branch: \u0026#34;main\u0026#34;) dependencies: [ .byNameItem( name: \u0026#34;OpenAI\u0026#34;, condition: .when(platforms: [ .iOS, ]) ), ], Second Step The second step is to generate an OpenAI key and replace it inside your project.\nThird Step The third step is to create ChatGPTService and add the getAssistantResponse method that will be receiving responses from the GPT model:\nimport Foundation import OpenAI final class ChatGPTService { private let client: OpenAI init() { client = OpenAI(apiToken: \u0026#34;YOUR_TOKEN\u0026#34;) } func getAssistantResponse(_ messages: [Message], _ completion: @escaping (Message?) -\u0026gt; Void) { let query = ChatQuery( messages: messages.map { .init(role: .user, content: $0.content)! }, model: .gpt3_5Turbo ) client.chats(query: query) { result in switch result { case let .success(success): guard let choice = success.choices.first, let message = choice.message.content?.string else { completion(nil); return } DispatchQueue.main.async { completion(Message(content: message, isUser: false)) } case let .failure(error): print(error) completion(nil) } } } } Fourth Step The fourth step is to add ChatService that will be responsible for adding, sending messages, and redrawing the UI:\nimport Foundation struct Message: Identifiable { var id: UUID = .init() var content: String var isUser: Bool } final class ChatService: ObservableObject { @Published private(set) var messages: [Message] = [] private let chatGPTService: ChatGPTService = .init() func sendMessage(_ message: Message) { messages.append(message) chatGPTService.getAssistantResponse(messages) { [unowned self] message in if let message = message { messages.append(message) } } } } Fifth Step The fifth step is to connect the UI and ChatService:\nimport SwiftUI struct ChatView: View { @StateObject private var chatService: ChatService = .init() @State private var message: String = \u0026#34;\u0026#34; var body: some View { VStack { ScrollView { ForEach(chatService.messages) { message in Text(message.content) } } HStack { TextField(\u0026#34;Message\u0026#34;, text: $message) Button(\u0026#34;Send\u0026#34;) { chatService.sendMessage(Message(content: message, isUser: true)) } } } } } Caveats Be aware of API quota limits; you can exceed your limits very quickly.\nResources https://www.youtube.com/watch?v=fkg3UzopiHY\u0026ab_channel=JaredDavidson\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-chatgpt-in-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI haven\u0026rsquo;t had the opportunity to build a chatbot before. This topic was trending some time ago, and I always wanted to implement it myself. In this article, I will focus on the steps you need to know to successfully build and run a chatbot application.\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is to add the \u003ca href=\"https://github.com/MacPaw/OpenAI\"\u003eOpenAI\u003c/a\u003e dependency to your project:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epackage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;https://github.com/MacPaw/OpenAI.git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebranch\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edependencies\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebyNameItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;OpenAI\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003econdition\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eplatforms\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiOS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"second-step\"\u003eSecond Step\u003c/h3\u003e\n\u003cp\u003eThe second step is to \u003ca href=\"https://platform.openai.com/api-keys\"\u003egenerate an OpenAI key\u003c/a\u003e and replace it inside your project.\u003c/p\u003e","title":"Implementing ChatGPT in an iOS App"},{"content":"Introduction The Apple Sign-In feature is very helpful and offers users login functionality with one click. It could be highly beneficial from a business perspective to attract more potential customers by providing easy and secure access to application functionality. In this article, I will focus on how to implement Apple Sign-In.\nBefore implementation, let’s set up the necessary options to be able to run the app without errors.\nAdd Sign in with Apple Capability to the project \u0026#x1f4dd; Before testing on the simulator, you need to be signed in to an account with enabled two-factor authentication.\nImplementing Apple Sign-In Apple offers a built-in solution that uses the Authentication Services framework with ASAuthorizationAppleIDButton.\nFirst Step The first step is to set up the Sign-In button.\nfunc setupAppleIDButton() { let authButton = ASAuthorizationAppleIDButton() authButton.frame = CGRect(origin: view.center, size: CGSize(width: 128, height: 56)) authButton.addTarget(self, action: #selector(handleAuthorizationAppleIDButtonPress), for: .touchUpInside) view.addSubview(authButton) } \u0026#x1f4a1; ASAuthorizationAppleIDButton - A control that enables users to initiate the Sign In with Apple flow.\nSecond Step The second step is to handle the authorization Apple ID button press.\n@objc func handleAuthorizationAppleIDButtonPress() { let appleIdProvider = ASAuthorizationAppleIDProvider() let request = appleIdProvider.createRequest() request.requestedScopes = [.fullName, .email] let authorizationController = ASAuthorizationController(authorizationRequests: [request]) authorizationController.delegate = self authorizationController.presentationContextProvider = self authorizationController.performRequests() } \u0026#x1f4a1; ASAuthorizationAppleIDProvider - A mechanism for generating requests to authenticate users based on their Apple ID.\n\u0026#x1f4a1; ASAuthorizationController - A controller that manages authorization requests that a provider creates.\nThird Step The third step is to implement authorizationController.delegate and authorizationController.presentationContextProvider.\n// MARK: - ASAuthorizationControllerDelegate extension LoginViewController: ASAuthorizationControllerDelegate { /// - Tag: did_complete_authorization public func authorizationController(controller _: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) { switch authorization.credential { case let appleIDCredential as ASAuthorizationAppleIDCredential: // Create an account in your system. let userIdentifier = appleIDCredential.user let fullName = appleIDCredential.fullName let email = appleIDCredential.email case let passwordCredential as ASPasswordCredential: // Sign in using an existing iCloud Keychain credential. let username = passwordCredential.user let password = passwordCredential.password default: break } } /// - Tag: did_complete_error public func authorizationController(controller _: ASAuthorizationController, didCompleteWithError error: any Error) { // Handle error. print(error) } } \u0026#x1f4a1; ASAuthorizationControllerDelegate - An interface for providing information about the outcome of an authorization request.\n// MARK: - ASAuthorizationControllerPresentationContextProviding extension LoginViewController: ASAuthorizationControllerPresentationContextProviding { /// - Tag: provide_presentation_anchor public func presentationAnchor(for _: ASAuthorizationController) -\u0026gt; ASPresentationAnchor { view.window! } } \u0026#x1f4a1; ASAuthorizationControllerPresentationContextProviding - An interface the controller uses to ask a delegate for a presentation context.\nResources Implementing User Authentication with Sign In with Apple\nDownload Materials Download\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-apple-sign-in-to-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe Apple Sign-In feature is very helpful and offers users login functionality with one click. It could be highly beneficial from a business perspective to attract more potential customers by providing easy and secure access to application functionality. In this article, I will focus on how to implement Apple Sign-In.\u003c/p\u003e\n\u003cp\u003eBefore implementation, let’s set up the necessary options to be able to run the app without errors.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd \u003ccode\u003eSign in with Apple\u003c/code\u003e Capability to the project\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f7bcf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f7bcf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026#x1f4dd; Before testing on the simulator, you need to be signed in to an account with enabled two-factor authentication.\u003c/p\u003e","title":"Implementing Apple Sign-In to an iOS App"},{"content":"Introduction I\u0026rsquo;ve never had the chance to use this technology before. I\u0026rsquo;ve always wondered how gRPC operates. In this article, I will explore what gRPC is, how to install and use it, and when to use gRPC.\nWhat is gRPC? gRPC is an open-source, high-performance framework that facilitates efficient communication in distributed systems. gRPC is an implementation of the RPC (Remote Procedure Call) protocol, which enables services to call functions on other machines as if they were local software methods. gRPC was developed by Google in 2015, and it includes several features that enhance the way remote procedure calls are made. For instance, its use of Protocol Buffers (Protobuf) supports strongly typed service contracts, data serialization, and code generation in a variety of programming languages. It also uses HTTP/2 as its transport protocol, which facilitates bi-directional streaming and reduces latency.\nInstallation Process Prerequisites Swift Version gRPC requires Swift 5.8 or higher.\nInstall Protocol Buffers Install the protoc compiler that is used to generate gRPC service code. The simplest way to do this is to download pre-compiled binaries for your platform (protoc-\u0026lt;version\u0026gt;-\u0026lt;platform\u0026gt;.zip) from here: https://github.com/google/protobuf/releases.\nUnzip this file. Update the environment variable PATH to include the path to the protoc binary file. Download the Example You\u0026rsquo;ll need a local copy of the example code to work through this quickstart. Download the example code from our GitHub repository (the following command clones the entire repository, but you just need the examples for this quickstart and other tutorials):\n# Clone the repository at the latest release to get the example code (replacing x.y.z with the latest release, for example 1.13.0): git clone -b x.y.z https://github.com/grpc/grpc-swift # Navigate to the repository cd grpc-swift/ Implementation Process Run a gRPC Application From the grpc-swift directory:\nCompile and run the server:\nswift run HelloWorldServer In another terminal, compile and run the client:\nswift run HelloWorldClient Greeter received: Hello stranger! Congratulations! You\u0026rsquo;ve just run a client-server application with gRPC.\nUpdate a gRPC Service Now let\u0026rsquo;s look at how to update the application with an extra method on the server for the client to call. Our gRPC service is defined using protocol buffers; you can find out lots more about how to define a service in a .proto file in What is gRPC?. For now, all you need to know is that both the server and the client \u0026ldquo;stub\u0026rdquo; have a SayHello RPC method that takes a HelloRequest parameter from the client and returns a HelloReply from the server, and that this method is defined like this:\n// The greeting service definition. service Greeter { // Sends a greeting. rpc SayHello (HelloRequest) returns (HelloReply) {} } // The request message containing the user\u0026#39;s name. message HelloRequest { string name = 1; } // The response message containing the greetings. message HelloReply { string message = 1; } Let\u0026rsquo;s update this so that the Greeter service has two methods. Edit Protos/upstream/grpc/examples/helloworld.proto and update it with a new SayHelloAgain method, with the same request and response types:\n// The greeting service definition. service Greeter { // Sends a greeting. rpc SayHello (HelloRequest) returns (HelloReply) {} // Sends another greeting. rpc SayHelloAgain (HelloRequest) returns (HelloReply) {} } // The request message containing the user\u0026#39;s name. message HelloRequest { string name = 1; } // The response message containing the greetings. message HelloReply { string message = 1; } (Don\u0026rsquo;t forget to save the file!)\nUpdate and Run the Application We need to regenerate Sources/Examples/v1/HelloWorld/Model/helloworld.grpc.swift, which contains our generated gRPC client and server classes. From the grpc-swift directory run:\nProtos/generate.sh This also regenerates classes for populating, serializing, and retrieving our request and response types. However, we still need to implement and call the new method in the human-written parts of our example application.\nUpdate the Server In the same directory, open Sources/Examples/v1/HelloWorld/Server/GreeterProvider.swift. Implement the new method like this:\nfinal class GreeterProvider: Helloworld_GreeterAsyncProvider { let interceptors: Helloworld_GreeterServerInterceptorFactoryProtocol? = nil func sayHello( request: Helloworld_HelloRequest, context: GRPCAsyncServerCallContext ) async throws -\u0026gt; Helloworld_HelloReply { let recipient = request.name.isEmpty ? \u0026#34;stranger\u0026#34; : request.name return Helloworld_HelloReply.with { $0.message = \u0026#34;Hello \\(recipient)!\u0026#34; } } func sayHelloAgain( request: Helloworld_HelloRequest, context: GRPCAsyncServerCallContext ) async throws -\u0026gt; Helloworld_HelloReply { let recipient = request.name.isEmpty ? \u0026#34;stranger\u0026#34; : request.name return Helloworld_HelloReply.with { $0.message = \u0026#34;Hello again \\(recipient)!\u0026#34; } } } Update the Client In the same directory, open Sources/Examples/v1/HelloWorld/Client/HelloWorldClient.swift. Call the new method like this:\nfunc run() async throws { // Setup an `EventLoopGroup` for the connection to run on. // // See: https://github.com/apple/swift-nio#eventloops-and-eventloopgroups let group = MultiThreadedEventLoopGroup(numberOfThreads: 1) // Make sure the group is shutdown when we\u0026#39;re done with it. defer { try! group.syncShutdownGracefully() } // Configure the channel, we\u0026#39;re not using TLS so the connection is `insecure`. let channel = try GRPCChannelPool.with( target: .host(\u0026#34;localhost\u0026#34;, port: self.port), transportSecurity: .plaintext, eventLoopGroup: group ) // Close the connection when we\u0026#39;re done with it. defer { try! channel.close().wait() } // Provide the connection to the generated client. let greeter = Helloworld_GreeterAsyncClient(channel: channel) // Form the request with the name, if one was provided. let request = Helloworld_HelloRequest.with { $0.name = self.name ?? \u0026#34;\u0026#34; } do { let greeting = try await greeter.sayHello(request) print(\u0026#34;Greeter received: \\(greeting.message)\u0026#34;) } catch { print(\u0026#34;Greeter failed: \\(error)\u0026#34;) } do { let greetingAgain = try await greeter.sayHelloAgain(request) print(\u0026#34;Greeter received: \\(greetingAgain.message)\u0026#34;) } catch { print(\u0026#34;Greeter failed: \\(error)\u0026#34;) } } Run! Just like we did before, from the top-level grpc-swift directory:\nCompile and run the server:\nswift run HelloWorldServer In another terminal, compile and run the client:\nswift run HelloWorldClient Greeter received: Hello stranger! Greeter received: Hello again stranger! When to Use gRPC gRPC was designed to support highly efficient, language-agnostic communication in distributed systems. It is therefore better suited than REST for microservice-based architectures, in which individual services may be developed in different programming languages and may face varying workloads. Additionally, gRPC’s use of Protobuf for binary data serialization makes it the better choice for applications that demand low latency and high throughput, while its support for different streaming patterns makes it ideal for real-time chat and video applications.\nResources gRPC vs. REST gRPC Swift Quick Start Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-grpc-swift/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI\u0026rsquo;ve never had the chance to use this technology before. I\u0026rsquo;ve always wondered how gRPC operates. In this article, I will explore what gRPC is, how to install and use it, and when to use gRPC.\u003c/p\u003e\n\u003ch3 id=\"what-is-grpc\"\u003eWhat is gRPC?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://blog.postman.com/what-is-grpc/\"\u003egRPC\u003c/a\u003e is an open-source, high-performance framework that facilitates efficient communication in distributed systems. gRPC is an implementation of the RPC (Remote Procedure Call) protocol, which enables services to call functions on other machines as if they were local software methods. gRPC was developed by Google in 2015, and it includes several features that enhance the way remote procedure calls are made. For instance, its use of Protocol Buffers (Protobuf) supports strongly typed service contracts, data serialization, and code generation in a variety of programming languages. It also uses HTTP/2 as its transport protocol, which facilitates bi-directional streaming and reduces latency.\u003c/p\u003e","title":"Implementing gRPC Swift"},{"content":"Introduction I never had a chance to work with NFC (Near Field Communication), but I have always been curious to find out how it works. In this article, I will focus on scanning NFC tags using CoreNFC with NFCNDEFReaderSession.\nPreparation Before we begin, let\u0026rsquo;s add the necessary objects:\nNear Field Communication Tag Reading capability to the project. Privacy - NFC Scan Usage Description key to Info.plist. Near Field Communication Tag Reader Session Formats to the entitlements file. First Step The first step before starting scanning is to check if the device supports NFC reading by using the NFCNDEFReaderSession.readingAvailable property.\nguard NFCNDEFReaderSession.readingAvailable else { let alertController = UIAlertController( title: \u0026#34;Scanning Not Supported\u0026#34;, message: \u0026#34;This device doesn\u0026#39;t support tag scanning.\u0026#34;, preferredStyle: .alert ) alertController.addAction(UIAlertAction(title: \u0026#34;OK\u0026#34;, style: .default, handler: nil)) self.present(alertController, animated: true, completion: nil) return } Second Step The second step is to create an NFCNDEFReaderSession object by calling the init(delegate:queue:invalidateAfterFirstRead:) initializer method. Set up alertMessage to give users instructions while the phone is scanning NFC tags. Finally, call begin() to start the reader session.\nsession = NFCNDEFReaderSession(delegate: self, queue: nil, invalidateAfterFirstRead: false) session?.alertMessage = \u0026#34;Hold your iPhone near the item to learn more about it.\u0026#34; session?.begin() Third Step The third step is to implement NFCNDEFReaderSessionDelegate to be able to receive notifications from the reader session when it reads an NDEF message or becomes invalid due to ending the session or encountering an error.\n// MARK: - NFCNDEFReaderSessionDelegate /// - Tag: processingTagData func readerSession(_ session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage]) { DispatchQueue.main.async { // Process detected NFCNDEFMessage objects. self.detectedMessages.append(contentsOf: messages) self.tableView.reloadData() } } /// - Tag: endScanning func readerSession(_ session: NFCNDEFReaderSession, didInvalidateWithError error: Error) { // Check the invalidation reason from the returned error. if let readerError = error as? NFCReaderError { // Show an alert when the invalidation reason is not because of a // successful read during a single-tag read session, or because the // user canceled a multiple-tag read session from the UI or // programmatically using the invalidate method call. if (readerError.code != .readerSessionInvalidationErrorFirstNDEFTagRead) \u0026amp;\u0026amp; (readerError.code != .readerSessionInvalidationErrorUserCanceled) { let alertController = UIAlertController( title: \u0026#34;Session Invalidated\u0026#34;, message: error.localizedDescription, preferredStyle: .alert ) alertController.addAction(UIAlertAction(title: \u0026#34;OK\u0026#34;, style: .default, handler: nil)) DispatchQueue.main.async { self.present(alertController, animated: true, completion: nil) } } } // To read new tags, a new session instance is required. self.session = nil } Resources You can find a more detailed article in the Apple Developer Documentation, where each step is explained in depth.\nDownload Materials Download\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/scanning-nfc-tags-using-corenfc-in-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI never had a chance to work with NFC (Near Field Communication), but I have always been curious to find out how it works. In this article, I will focus on scanning NFC tags using \u003ca href=\"https://developer.apple.com/documentation/corenfc\"\u003e\u003ccode\u003eCoreNFC\u003c/code\u003e\u003c/a\u003e with \u003ca href=\"https://developer.apple.com/documentation/corenfc/nfcndefreadersession\"\u003e\u003ccode\u003eNFCNDEFReaderSession\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"preparation\"\u003ePreparation\u003c/h3\u003e\n\u003cp\u003eBefore we begin, let\u0026rsquo;s add the necessary objects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eNear Field Communication Tag Reading\u003c/code\u003e capability to the project.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePrivacy - NFC Scan Usage Description\u003c/code\u003e key to \u003ccode\u003eInfo.plist\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNear Field Communication Tag Reader Session Formats\u003c/code\u003e to the entitlements file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step before starting scanning is to check if the device supports NFC reading by using the \u003ccode\u003eNFCNDEFReaderSession.readingAvailable\u003c/code\u003e property.\u003c/p\u003e","title":"Scanning NFC tags using CoreNFC in an iOS app"},{"content":"Introduction I had the chance to work on a project where communication via BLE was at the heart of the project.\nBefore adding any code to application, I always asked myself about two scenarios:\nThe first scenario is when the device acts as a central device while searching for and connecting to peripheral devices. The second scenario is when the device acts as a peripheral device by using CBCharacteristic and changes its value. In this article, I will focus on the first scenario and will show how to scan for peripheral devices.\nFirst Step The first step is to add permission for Bluetooth: Privacy - Bluetooth Always Usage Description Second Step The second step is to initialize centralManager:\nprivate var centralManager: CBCentralManager! override init() { super.init() centralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionShowPowerAlertKey: true]) } CBCentralManager - CBCentralManager objects manage discovered or connected remote peripheral devices (represented by CBPeripheral objects), including scanning for, discovering, and connecting to advertising peripherals.\nCBCentralManagerDelegate - The single required centralManagerDidUpdateState method indicates the availability of the central manager, while the optional methods allow for the discovery and connection of peripherals.\nCBCentralManagerOptionShowPowerAlertKey - An NSNumber (Boolean) indicating that the system should, if Bluetooth is powered off when CBCentralManager is instantiated, display a warning dialog to the user.\nThird Step The third step is to scanForPeripherals after centralManager changes its state to poweredOn.\nfunc centralManagerDidUpdateState(_ central: CBCentralManager) { switch central.state { case .poweredOn: print(\u0026#34;CBManager is powered on\u0026#34;) centralManager.scanForPeripherals(withServices: nil) case .poweredOff: print(\u0026#34;CBManager is not powered on\u0026#34;) return case .resetting: print(\u0026#34;CBManager is resetting\u0026#34;) return case .unauthorized: print(\u0026#34;CBManager is unauthorized\u0026#34;) return case .unknown: print(\u0026#34;CBManager state is unknown\u0026#34;) return case .unsupported: print(\u0026#34;Bluetooth is not supported on this device\u0026#34;) return @unknown default: print(\u0026#34;A previously unknown central manager state occurred\u0026#34;) return } } Fourth Step The fourth step is to implement the didDiscover method that is called when the central manager discovers a peripheral.\nfunc centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) { // Reject if the signal strength is too low. // Change the minimum RSSI value depending on your app’s use case. guard RSSI.intValue \u0026gt;= -50 else { print(\u0026#34;Discovered peripheral not in expected range, at \\(RSSI.intValue)\u0026#34;) return } print(\u0026#34;Discovered \\(String(describing: peripheral.name)) at \\(RSSI.intValue)\u0026#34;) } The sample implementation of this method uses the RSSI (Received Signal Strength Indicator) parameter to determine whether the signal is strong enough. RSSI values are provided as negative numbers, with a theoretical maximum of 0.\nComplete Example import Foundation import CoreBluetooth final class CentralManager: NSObject { private var centralManager: CBCentralManager! override init() { super.init() centralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionShowPowerAlertKey: true]) } } // MARK: - CBCentralManagerDelegate extension CentralManager: CBCentralManagerDelegate { func centralManagerDidUpdateState(_ central: CBCentralManager) { switch central.state { case .poweredOn: print(\u0026#34;CBManager is powered on\u0026#34;) centralManager.scanForPeripherals(withServices: nil) case .poweredOff: print(\u0026#34;CBManager is not powered on\u0026#34;) return case .resetting: print(\u0026#34;CBManager is resetting\u0026#34;) return case .unauthorized: print(\u0026#34;CBManager is unauthorized\u0026#34;) return case .unknown: print(\u0026#34;CBManager state is unknown\u0026#34;) return case .unsupported: print(\u0026#34;Bluetooth is not supported on this device\u0026#34;) return @unknown default: print(\u0026#34;A previously unknown central manager state occurred\u0026#34;) return } } func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) { // Reject if the signal strength is too low. // Change the minimum RSSI value depending on your app’s use case. guard RSSI.intValue \u0026gt;= -50 else { print(\u0026#34;Discovered perhiperal not in expected range, at %d\u0026#34;, RSSI.intValue) print(\u0026#34;Discovered %s at %d\u0026#34;, String(describing: peripheral.name), RSSI.intValue) return } print(\u0026#34;Discovered %s at %d\u0026#34;, String(describing: peripheral.name), RSSI.intValue) } } Resources https://developer.apple.com/documentation/corebluetooth/transferring-data-between-bluetooth-low-energy-devices\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/scanning-for-peripheral-devices-using-ble-in-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI had the chance to work on a project where communication via BLE was at the heart of the project.\u003c/p\u003e\n\u003cp\u003eBefore adding any code to application, I always asked myself about two scenarios:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe first scenario is when the device acts as a central device while searching for and connecting to peripheral devices.\u003c/li\u003e\n\u003cli\u003eThe second scenario is when the device acts as a peripheral device by using \u003ccode\u003eCBCharacteristic\u003c/code\u003e and changes its value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this article, I will focus on the first scenario and will show how to scan for peripheral devices.\u003c/p\u003e","title":"Scanning for peripheral devices using BLE in an iOS app"},{"content":"Introduction Working with batteries on iOS devices for large applications has always been tricky. The amount of energy consumed by the screen, location services, network calls, processing, background tasks, etc., is significant. From a developer\u0026rsquo;s perspective, it seems complicated, but Xcode provides tools to address this problem.\nTo find the issue, you need to open Xcode and go to the Debug Navigator.\nIn the Debug Navigator, you will see the Energy Impact gauge. In the histogram, blue indicates good performance, while red indicates overhead. Based on this information, you can analyze the overhead and resolve potential issues by utilizing Instruments such as Network, Location, CPU Profile, etc. For each case, Xcode provides instruments that allow you to dive deeper and understand what is happening in detail. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/battery-performance-testing-for-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eWorking with batteries on iOS devices for large applications has always been tricky. The amount of energy consumed by the \u003ccode\u003escreen\u003c/code\u003e, \u003ccode\u003elocation services\u003c/code\u003e, \u003ccode\u003enetwork calls\u003c/code\u003e, \u003ccode\u003eprocessing\u003c/code\u003e, \u003ccode\u003ebackground tasks\u003c/code\u003e, etc., is significant. From a developer\u0026rsquo;s perspective, it seems complicated, but Xcode provides tools to address this problem.\u003c/p\u003e\n\u003cp\u003eTo find the issue, you need to open Xcode and go to the \u003ccode\u003eDebug Navigator\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eDebug Navigator\u003c/code\u003e, you will see the \u003ccode\u003eEnergy Impact\u003c/code\u003e gauge.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f7bcf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f7bcf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nIn the histogram, \u003ccode\u003eblue\u003c/code\u003e indicates good performance, while \u003ccode\u003ered\u003c/code\u003e indicates overhead.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-793fa\" hidden\u003e\n    \u003clabel for=\"zoomCheck-793fa\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/1.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nBased on this information, you can analyze the overhead and resolve potential issues by utilizing \u003ccode\u003eInstruments\u003c/code\u003e such as \u003ccode\u003eNetwork\u003c/code\u003e, \u003ccode\u003eLocation\u003c/code\u003e, \u003ccode\u003eCPU Profile\u003c/code\u003e, etc. For each case, Xcode provides instruments that allow you to dive deeper and understand what is happening in detail.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-ebb98\" hidden\u003e\n    \u003clabel for=\"zoomCheck-ebb98\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/2.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"Battery Performance Testing for iOS App"},{"content":"Introduction In the previous chapter, I started talking about the video game creation process, from project setup to adding the background. Now, I\u0026rsquo;m going to add the player and physics to it.\nYou can download the project here.\nFirst Step The first step is to initialize player using SKSpriteNode, set up player.position, and add player as a child node.\nSKSpriteNode - is an onscreen graphical element that can be initialized from an image or a solid color.\nself.player = SKSpriteNode(imageNamed: \u0026#34;shuttle\u0026#34;) player.position = CGPoint(x: self.frame.size.width / 2, y: player.size.height / 2 + 20) self.addChild(player) Second Step The second step is to remove Earth\u0026rsquo;s gravity effect from the physics world, because the player will be looking into the screen from a top-down perspective and gravity effects make no difference for it.\nself.physicsWorld.gravity = CGVector(dx: 0, dy: 0) Third Step The third step is to add contactDelegate to be able to respond when physics bodies come into contact.\nSKPhysicsContactDelegate - An object that implements the SKPhysicsContactDelegate protocol can respond when two physics bodies with overlapping contactTestBitMask values are in contact with each other in a physics world. You can use the contact delegate to play a sound or execute game logic, such as increasing a player’s score when a contact event occurs.\nself.physicsWorld.contactDelegate = self private let alienCategory: UInt32 = 0x1 \u0026lt;\u0026lt; 1 private let photonTorpedoCategory: UInt32 = 0x1 \u0026lt;\u0026lt; 0 alien.physicsBody?.categoryBitMask = alienCategory alien.physicsBody?.contactTestBitMask = photonTorpedoCategory alien.physicsBody?.collisionBitMask = 0 torpedoNode.physicsBody?.categoryBitMask = photonTorpedoCategory torpedoNode.physicsBody?.contactTestBitMask = alienCategory torpedoNode.physicsBody?.collisionBitMask = 0 torpedoNode.physicsBody?.usesPreciseCollisionDetection = true // MARK: - SKPhysicsContactDelegate extension GameScene: SKPhysicsContactDelegate { func didBegin(_ contact: SKPhysicsContact) { var firstBody: SKPhysicsBody var secondBody: SKPhysicsBody if contact.bodyA.categoryBitMask \u0026lt; contact.bodyB.categoryBitMask { firstBody = contact.bodyA secondBody = contact.bodyB } else { firstBody = contact.bodyB secondBody = contact.bodyA } if (firstBody.categoryBitMask \u0026amp; photonTorpedoCategory) != 0 \u0026amp;\u0026amp; (secondBody.categoryBitMask \u0026amp; alienCategory) != 0 { torpedoDidCollideWithAlien(torpedoNode: firstBody.node as! SKSpriteNode, alienNode: secondBody.node as! SKSpriteNode) } } } didBegin(_:) is an instance method called when two bodies first contact each other.\nAdditionally We need to add scoreLabel to track the player\u0026rsquo;s score:\nself.scoreLabel = SKLabelNode(text: \u0026#34;Score: 0\u0026#34;) scoreLabel.position = CGPoint(x: self.frame.size.width / 2, y: self.frame.size.height - 50) scoreLabel.fontName = \u0026#34;AmericanTypewriter-Bold\u0026#34; scoreLabel.fontSize = 36 scoreLabel.fontColor = UIColor.white score = 0 self.addChild(scoreLabel) gameTimer to add an alien every 0.75 milliseconds:\nself.gameTimer = Timer.scheduledTimer(timeInterval: 0.75, target: self, selector: #selector(addAlien), userInfo: nil, repeats: true) motionManager to change the user\u0026rsquo;s position using the accelerometer:\nself.motionManager = CMMotionManager() motionManager.accelerometerUpdateInterval = 0.1 motionManager.startAccelerometerUpdates(to: OperationQueue.current!) { (data: CMAccelerometerData?, error: Error?) in if let accelerometerData = data { let acceleration = accelerometerData.acceleration self.xAcceleration = CGFloat(acceleration.x) * 0.75 + self.xAcceleration * 0.25 } } touchesEnded method to fire a torpedo:\noverride func touchesEnded(_ touches: Set\u0026lt;UITouch\u0026gt;, with event: UIEvent?) { fireTorpedo() } didSimulatePhysics method to change the player\u0026rsquo;s position:\noverride func didSimulatePhysics() { player.position.x += xAcceleration * 50 if player.position.x \u0026lt; 0 { player.position = CGPoint(x: self.frame.size.width, y: player.position.y) } else if player.position.x \u0026gt; self.frame.size.width { player.position = CGPoint(x: 0, y: player.position.y) } } Summarizing It was an amazing experience. I was surprised that the entire game was less than 200 lines of code. I tried my best to create a step-by-step instruction of the game creation process. I hope this article will be helpful for you.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/creating-2d-space-game-for-ios-using-spritekit-part-2/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn the \u003ca href=\"https://dmytros.blog/posts/creating-2d-space-game-for-ios-using-spritekit-part-1/\"\u003eprevious chapter\u003c/a\u003e, I started talking about the video game creation process, from project setup to adding the background. Now, I\u0026rsquo;m going to add the player and physics to it.\u003c/p\u003e\n\u003cp\u003eYou can \u003ca href=\"https://github.com/dmytrochumakov/2d-space-game-ios/archive/refs/heads/main.zip\"\u003edownload the project here\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is to initialize \u003ccode\u003eplayer\u003c/code\u003e using \u003ca href=\"https://developer.apple.com/documentation/spritekit/skspritenode\"\u003e\u003ccode\u003eSKSpriteNode\u003c/code\u003e\u003c/a\u003e, set up \u003ccode\u003eplayer.position\u003c/code\u003e, and add \u003ccode\u003eplayer\u003c/code\u003e as a child node.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSKSpriteNode\u003c/strong\u003e - is an onscreen graphical element that can be initialized from an image or a solid color.\u003c/p\u003e","title":"Creating a 2D Space Game for iOS Using SpriteKit - Part 2"},{"content":"Introduction I have never tried creating a game before; it feels like magic to me. I know that games have an enormous amount of underlying layers of abstractions and tools such as game engines, rendering, and so on. I have always been eager to learn at least 1% of the game creation process. In this article, I\u0026rsquo;m going to explore step-by-step instructions for creating a game for the iOS platform using SpriteKit.\nFirst Step The first step is to create an Xcode project using the iOS game template and SpriteKit Game Technology. Second Step The second step is to add resources like images and sounds. You can find assets inside the Assets folder Download Project.\nThird Step The third step is to override the didMove(to:) method - it tells you when the scene is presented by a view. This method is similar to viewDidLoad for UIViewController. We will be implementing logic inside it.\noverride func didMove(to view: SKView) { } Creating and Adding Starfield Background The next step is to create and add a starfield using SKEmitterNode as a child to SKScene. After that, you will be able to see the starfield in the background.\nself.starfield = SKEmitterNode(fileNamed: \u0026#34;Starfield\u0026#34;) starfield.position = CGPoint(x: self.frame.size.width / 2, y: self.frame.size.height) starfield.advanceSimulationTime(10) self.addChild(starfield) starfield.zPosition = -1 Let\u0026rsquo;s Dive a Little Deeper Custom Particles Creation If you were wondering how to create custom particles similar to the starfield background, you need to:\nCreate a new SpriteKit Particle File: Choose a particle template: Select the created file -\u0026gt; Open the Inspectors side menu and configure it with settings that you like. SKEmitterNode Initialization of SKEmitterNode(fileNamed: \u0026quot;Starfield\u0026quot;) helps create a starfield background.\nSKEmitterNode is a node that automatically creates and renders small particle sprites. Particles are privately owned by SpriteKit—your game cannot access the generated sprites. For example, you cannot add physics shapes to particles. Emitter nodes are often used to create smoke, fire, sparks, and other particle effects.\nadvanceSimulationTime advanceSimulationTime(10) - Advances the emitter particle simulation. In other words, you do not need to wait until the particles reach the bottom of the screen. addChild self.addChild(starfield) - Adds a node to the end of the receiver’s list of child nodes. After that, you will be able to see the starfield background.\nzPosition zPosition = -1 - Moves the starfield to the back of the screen.\nResources Enormous appreciation for Brian Advent for his comprehensive video. Without it, I would still be surfing the internet and collecting pieces of the puzzle.\nDownload Materials Download Project\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/creating-2d-space-game-for-ios-using-spritekit-part-1/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI have never tried creating a game before; it feels like magic to me. I know that games have an enormous amount of underlying layers of abstractions and tools such as game engines, rendering, and so on. I have always been eager to learn at least 1% of the game creation process. In this article, I\u0026rsquo;m going to explore step-by-step instructions for creating a game for the iOS platform using SpriteKit.\u003c/p\u003e","title":"Creating a 2D Space Game for iOS Using SpriteKit - Part 1"},{"content":"Introduction When working in a large codebase with a significant number of async events, I often found myself in situations where I couldn\u0026rsquo;t combine events effectively. This resulted in optimization problems and inefficient consumption of OS resources.\nThe codebase contained closures and async/await, so it wasn\u0026rsquo;t possible to use operators like merge or combineLatest. After discovering this limitation, I decided to add new methods using Combine.\nI will be demonstrating this with a simple NetworkService responsible only for executing and validating requests using Combine. Let\u0026rsquo;s dive into the implementation.\nFirst Step The first step is to create the NetworkService with request(_ endpoint: Endpoint) method.\nfunc request\u0026lt;T: Decodable\u0026gt;(_ endpoint: Endpoint) -\u0026gt; AnyPublisher\u0026lt;T, Error\u0026gt; {} Quick Explanation of What AnyPublisher Is The AnyPublisher returns a publisher from a method without exposing the specific type of publisher you are using internally. It helps hide implementation details.\nSecond Step The second step is to add a few helpers such as Endpoint and NetworkError.\nstruct Endpoint { let url: String let headers: [String: String]? let body: Data? let httpMethod: HTTPMethod func urlRequest(with url: URL) -\u0026gt; URLRequest { var urlRequest = URLRequest(url: url) urlRequest.httpMethod = httpMethod.rawValue urlRequest.allHTTPHeaderFields = headers ?? [:] urlRequest.httpBody = body return urlRequest } enum HTTPMethod: String { case GET case POST case PUT case DELETE } } enum NetworkError: Error { case invalidURL case invalidResponseType case jsonDecoderError(_ error: Error) } Third Step The third step is to implement the request method.\nfunc request\u0026lt;T: Decodable\u0026gt;(_ endpoint: Endpoint) -\u0026gt; AnyPublisher\u0026lt;T, Error\u0026gt; { guard let url = URL(string: endpoint.url) else { return Fail\u0026lt;T, Error\u0026gt;(error: NetworkError.invalidURL).eraseToAnyPublisher() } return URLSession.shared .dataTaskPublisher(for: endpoint.urlRequest(with: url)) .tryMap { output in guard output.response is HTTPURLResponse else { throw NetworkError.invalidResponseType } return output.data } .decode(type: T.self, decoder: JSONDecoder()) .mapError { error in NetworkError.jsonDecoderError(error) } .eraseToAnyPublisher() } Fourth Step The fourth step is to test if NetworkService works as expected.\nimport Combine import Inject import SwiftUI public struct ContentView: View { @ObserveInjection var inject private let networkService: NetworkService = .init() @State private var cancellables = Set\u0026lt;AnyCancellable\u0026gt;() @State private var post: Post? public init() {} public var body: some View { VStack { Button(\u0026#34;Fetch Data\u0026#34;) { networkService .request(Endpoint(url: \u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34;, httpMethod: .GET)) .sink(receiveCompletion: { completion in switch completion { case .finished: break case let .failure(error): print(error) } }, receiveValue: { (post: Post) in self.post = post }) .store(in: \u0026amp;cancellables) } Text(post?.title ?? \u0026#34;\u0026#34;) } .enableInjection() } } Summary Combine is best suited for handling multiple async events by using event-processing operators. Before integrating it into your codebase, make sure to weigh all the pros and cons.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/combine-practical-usage-examples/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eWhen working in a large codebase with a significant number of async events, I often found myself in situations where I couldn\u0026rsquo;t combine events effectively. This resulted in optimization problems and inefficient consumption of OS resources.\u003c/p\u003e\n\u003cp\u003eThe codebase contained \u003ccode\u003eclosures\u003c/code\u003e and \u003ccode\u003easync/await\u003c/code\u003e, so it wasn\u0026rsquo;t possible to use operators like \u003ccode\u003emerge\u003c/code\u003e or \u003ccode\u003ecombineLatest\u003c/code\u003e. After discovering this limitation, I decided to add new methods using \u003ca href=\"https://developer.apple.com/documentation/combine\"\u003e\u003ccode\u003eCombine\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI will be demonstrating this with a simple \u003ccode\u003eNetworkService\u003c/code\u003e responsible only for executing and validating requests using Combine. Let\u0026rsquo;s dive into the implementation.\u003c/p\u003e","title":"Combine practical usage examples"},{"content":"Introduction I always wondered how I could automate testing the push notification process. Even when Apple introduced the possibility of dragging a configured file to the simulator to display a notification, it is still a manual process. I\u0026rsquo;ll skip testing via the terminal because I think it takes more time than using an APNS file or the RocketSim app.\nBefore I was first introduced to the RocketSim app, I used an APNS file for testing push notifications. It worked for me and my teammates, but I knew it could be better. It looks something like this:\nTesting Using an APNS File To test push notifications using an APNS file, you need to create a file with a .apns extension and put JSON into it.\n{ \u0026#34;Simulator Target Bundle\u0026#34;: \u0026#34;dev.mt.Demo\u0026#34;, \u0026#34;aps\u0026#34;: { \u0026#34;alert\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Body\u0026#34; } } } You also need to specify the Simulator Target Bundle; without it, you will receive an error. After that, you can drag this file to the simulator. When I found the RocketSim app and learned about its ability to send push notifications from the simulator side menu, it was a game changer for me. No more dragging files or terminal commands—it’s all in one place. The only thing you need to do is create the payload.\nTesting Using the RocketSim App To test push notifications using the RocketSim app, all you need to do is:\nOpen the RocketSim app. Go to the simulator side menu. Click on the bell button. Click on the “Configure Push Notifications” button. The last step is to add groups, set the bundle identifier, switch to push notifications, and add a push notification. Now you have configured the push notification, and from now on, you can send it with just a tap in the RocketSim app\u0026rsquo;s simulator side menu. Summary Using the RocketSim app saved me a lot of time and effort. Without it, I would still be testing manually and spending time on work that could be automated. I would recommend this tool to anyone.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/testing-push-notifications-locally-in-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI always wondered how I could automate testing the push notification process. Even when Apple introduced the possibility of dragging a configured file to the simulator to display a notification, it is still a manual process. I\u0026rsquo;ll skip testing via the terminal because I think it takes more time than using an APNS file or the \u003ca href=\"https://www.rocketsim.app/\"\u003eRocketSim app\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBefore I was first introduced to the RocketSim app, I used an APNS file for testing push notifications. It worked for me and my teammates, but I knew it could be better. It looks something like this:\u003c/p\u003e","title":"Testing push notifications locally in an iOS app"},{"content":"Introduction If you start a project from scratch, you need to always create some kind of service like PushNotificationService that will be responsible for handling push notification events. In this article, I want to explore a simple implementation of PushNotificationService to be able to reuse and customize it in future projects.\nFirst Step The first step is to add the Push Notifications capability to your project. Go to your project -\u0026gt; Signing \u0026amp; Capabilities -\u0026gt; Tap + Capability -\u0026gt; Search for Push Notifications.\nSecond Step The second step is to register push notifications.\nfunc application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]? = nil) -\u0026gt; Bool { pushNotificationService.registerPushNotifications() return true } Third Step The third step is to add didRegisterForRemoteNotificationsWithDeviceToken and didFailToRegisterForRemoteNotificationsWithError to the AppDelegate file and pass the information that occurred to PushNotificationService.\nfunc application(_: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) { pushNotificationService.didRegisterForRemoteNotificationsWithDeviceToken(deviceToken: deviceToken) } func application(_: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) { pushNotificationService.didFailToRegisterForRemoteNotificationsWithError(error: error) } Complete Example import UIKit class AppDelegate: NSObject, UIApplicationDelegate { private let pushNotificationService = PushNotificationService() func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]? = nil) -\u0026gt; Bool { pushNotificationService.registerPushNotifications() return true } func application(_: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) { pushNotificationService.didRegisterForRemoteNotificationsWithDeviceToken(deviceToken: deviceToken) } func application(_: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: any Error) { pushNotificationService.didFailToRegisterForRemoteNotificationsWithError(error: error) } } import UIKit public final class PushNotificationService: NSObject { public func registerPushNotifications() { UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, _ in guard granted else { return } DispatchQueue.main.async { UIApplication.shared.registerForRemoteNotifications() } } } public func didRegisterForRemoteNotificationsWithDeviceToken(deviceToken: Data) { let token = deviceToken.map { String(format: \u0026#34;%02.2hhx\u0026#34;, $0) }.joined() print(\u0026#34;Device token: \\(token)\u0026#34;) } public func didFailToRegisterForRemoteNotificationsWithError(error: any Error) { print(\u0026#34;Failed to register for remote notifications: \\(error)\u0026#34;) } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/adding-push-notifications-to-an-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIf you start a project from scratch, you need to always create some kind of service like \u003ccode\u003ePushNotificationService\u003c/code\u003e that will be responsible for handling push notification events. In this article, I want to explore a simple implementation of \u003ccode\u003ePushNotificationService\u003c/code\u003e to be able to reuse and customize it in future projects.\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is to add the Push Notifications capability to your project. Go to your project -\u0026gt; Signing \u0026amp; Capabilities -\u0026gt; Tap \u003ccode\u003e+ Capability\u003c/code\u003e -\u0026gt; Search for Push Notifications.\u003c/p\u003e","title":"Adding Push Notifications to an iOS App"},{"content":"Introduction I was curious about caching data using NSCache for an iOS app. So, I did some digging. Here is what I found:\nQuick Overview NSCache helps store data in memory. When the application gets killed, it frees memory; it’s not persisted on disk. Storing data is carried out using a key-value pair mechanism like Dictionary. You can set automatic eviction to delete objects automatically. NSCache has multi-platform support: iOS, iPadOS, watchOS, macOS, and tvOS. Caveats NSCache has Objective-C roots. It can’t use struct because it is constrained to conform to AnyObject, meaning you must use class and NSString instead of String.\nStore Object You can store an object by setting it in the cache:\nfunc storeImage(_ image: UIImage, for key: String) { cache.setObject(image, forKey: key as NSString) } Retrieve Object You can retrieve an object by getting the object for the key:\nfunc retrieveImage(for key: String) -\u0026gt; UIImage? { cache.object(forKey: key as NSString) } Removing Object You can remove an object by removing the object for the key, or remove all objects:\nfunc removeImage(for key: String) { cache.removeObject(forKey: key as NSString) } func removeAllImages() { cache.removeAllObjects() } Automatically Cache Cleaning You can limit the number of objects in memory by setting countLimit. countLimit depends on the size of the object that you need to store in the cache. If it’s a large image, the limit can be less.\ncache.countLimit = 5 Another way to do automatic cleaning is to set up totalCostLimit. NSCache will automatically delete objects until the total cost of the cache is under the totalCostLimit.\ncache.totalCostLimit = 10 * 1024 * 1024 // 10 MB Caveats Even if you don’t set any deletion conditions, NSCache will automatically clean up when the system really needs memory.\nNSCacheDelegate cache(_:willEvictObject:) notifies when an object is being removed. It helps in cases when you need to react to these changes.\nextension CacheService: NSCacheDelegate { func cache(_ cache: NSCache\u0026lt;AnyObject, AnyObject\u0026gt;, willEvictObject obj: Any) { print(\u0026#34;Object will be evicted: \\(obj)\u0026#34;) } } Complete Sample final class CacheService: NSObject { private let cache: NSCache\u0026lt;NSString, UIImage\u0026gt; override init() { cache = NSCache() cache.name = \u0026#34;Remote Image Cache\u0026#34; cache.countLimit = 5 cache.totalCostLimit = 10 * 1024 * 1024 // 10 MB } func storeImage(_ image: UIImage, for key: String) { cache.setObject(image, forKey: key as NSString) } func retrieveImage(for key: String) -\u0026gt; UIImage? { cache.object(forKey: key as NSString) } func removeImage(for key: String) { cache.removeObject(forKey: key as NSString) } func removeAllImages() { cache.removeAllObjects() } } // MARK: - NSCacheDelegate extension CacheService: NSCacheDelegate { func cache(_ cache: NSCache\u0026lt;AnyObject, AnyObject\u0026gt;, willEvictObject obj: Any) { print(\u0026#34;Object will be evicted: \\(obj)\u0026#34;) } } Resources Thanks to Andy Ibanez for his amazing straightforward explanation with examples. It helped a lot to quickly understand this topic.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/caching-data-using-nscache-in-ios/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was curious about caching data using \u003ca href=\"https://developer.apple.com/documentation/foundation/nscache\"\u003e\u003ccode\u003eNSCache\u003c/code\u003e\u003c/a\u003e for an iOS app. So, I did some digging. Here is what I found:\u003c/p\u003e\n\u003ch3 id=\"quick-overview\"\u003eQuick Overview\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eNSCache\u003c/code\u003e helps store data in memory. When the application gets killed, it frees memory; it’s not persisted on disk.\u003c/li\u003e\n\u003cli\u003eStoring data is carried out using a key-value pair mechanism like \u003ccode\u003eDictionary\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eYou can set automatic eviction to delete objects automatically.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNSCache\u003c/code\u003e has multi-platform support: iOS, iPadOS, watchOS, macOS, and tvOS.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"caveats\"\u003eCaveats\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eNSCache\u003c/code\u003e has Objective-C roots. It can’t use \u003ccode\u003estruct\u003c/code\u003e because it is constrained to conform to \u003ccode\u003eAnyObject\u003c/code\u003e, meaning you must use \u003ccode\u003eclass\u003c/code\u003e and \u003ccode\u003eNSString\u003c/code\u003e instead of \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e","title":"Caching data using NSCache in iOS"},{"content":"Introduction Previously, I posted about Accessibility for UIKit. The idea behind this post is to find differences between UIKit Accessibility and SwiftUI features.\nSimilarities: Both UIKit and SwiftUI have accessibilityLabel and accessibilityHints APIs.\nDifferences: To use dynamic type for fonts, you need additional modifiers in SwiftUI. struct ScaledFont: ViewModifier { @Environment(\\.sizeCategory) var sizeCategory var name: String var size: Double func body(content: Content) -\u0026gt; some View { let scaledSize = UIFontMetrics.default.scaledValue(for: size) return content.font(.custom(name, size: scaledSize)) } } extension View { func scaledFont(name: String, textSize size: Double) -\u0026gt; some View { return self.modifier(ScaledFont(name: name, size: size)) } } To step over elements in a list, you need to add .accessibilityElement(children: .combine) to each row in SwiftUI. struct FruitCaloriesCounter: View { var body: some View { NavigationView { List(fruits) { fruit in FruitRow(fruit: fruit) .accessibilityElement(children: .combine) } .navigationTitle(\u0026#34;Fruits Calories Counter\u0026#34;) .accessibilityElement(children: .contain) .navigationBarTitleDisplayMode(.inline) } } } In UIKit, you can insert and remove accessibilityTraits depending on the button state: if button.isSelected { button.accessibilityTraits.insert(.header) } else { button.accessibilityTraits.remove(.header) } In SwiftUI, you need to pass .accessibilityAddTraits(selected ? [.isSelected, .isButton] : .isButton) to one modifier. Button(action: { selected.toggle() }) { Image(systemName: selected ? \u0026#34;star.fill\u0026#34; : \u0026#34;star\u0026#34;) .frame(width: 44, height: 44) .accessibilityLabel(\u0026#34;favourite\u0026#34;) .accessibilityHint(selected ? \u0026#34;removes favourite\u0026#34; : \u0026#34;makes favourite\u0026#34;) .accessibilityAddTraits(selected ? [.isSelected, .isButton] : .isButton) } .buttonStyle(.plain) Complete Sample import SwiftUI let fruits = [ Fruit(name: \u0026#34;Apple\u0026#34;, calories: 52), Fruit(name: \u0026#34;Banana\u0026#34;, calories: 89), Fruit(name: \u0026#34;Orange\u0026#34;, calories: 47), Fruit(name: \u0026#34;Pineapple\u0026#34;, calories: 50), Fruit(name: \u0026#34;Strawberry\u0026#34;, calories: 32) ] struct Fruit: Identifiable { var id: String { name } let name: String let calories: Int } struct FruitRow: View { @State private var selected = false let fruit: Fruit var body: some View { HStack(spacing: 8) { VStack(alignment: .leading, spacing: 8) { Text(fruit.name) .scaledFont(name: \u0026#34;Helvetica\u0026#34;, textSize: 20) .accessibilityLabel(fruit.name) Text(\u0026#34;\\(fruit.calories) per 100g\u0026#34;) .scaledFont(name: \u0026#34;Helvetica\u0026#34;, textSize: 15) .accessibilityLabel(\u0026#34;\\(fruit.calories) calories per 100 grams\u0026#34;) } Spacer() Button(action: { selected.toggle() }) { Image(systemName: selected ? \u0026#34;star.fill\u0026#34; : \u0026#34;star\u0026#34;) .frame(width: 44, height: 44) .accessibilityLabel(\u0026#34;favourite\u0026#34;) .accessibilityHint(selected ? \u0026#34;removes favourite\u0026#34; : \u0026#34;makes favourite\u0026#34;) .accessibilityAddTraits(selected ? [.isSelected, .isButton] : .isButton) } .buttonStyle(.plain) } } } struct FruitCaloriesCounter: View { var body: some View { NavigationView { List(fruits) { fruit in FruitRow(fruit: fruit) .accessibilityElement(children: .combine) } .navigationTitle(\u0026#34;Fruits Calories Counter\u0026#34;) .accessibilityElement(children: .contain) .navigationBarTitleDisplayMode(.inline) } } } struct ContentView: View { var body: some View { FruitCaloriesCounter() } } #Preview { ContentView() } struct ScaledFont: ViewModifier { @Environment(\\.sizeCategory) var sizeCategory var name: String var size: Double func body(content: Content) -\u0026gt; some View { let scaledSize = UIFontMetrics.default.scaledValue(for: size) return content.font(.custom(name, size: scaledSize)) } } extension View { func scaledFont(name: String, textSize size: Double) -\u0026gt; some View { return self.modifier(ScaledFont(name: name, size: size)) } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/accessibility-ios-swiftui/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003ePreviously, I posted about \u003ca href=\"https://dmytros.blog/posts/accessibility-ios-uikit/\"\u003eAccessibility for UIKit\u003c/a\u003e. The idea behind this post is to find differences between UIKit Accessibility and SwiftUI features.\u003c/p\u003e\n\u003ch3 id=\"similarities\"\u003eSimilarities:\u003c/h3\u003e\n\u003cp\u003eBoth UIKit and SwiftUI have \u003ca href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615181-accessibilitylabel\"\u003e\u003ccode\u003eaccessibilityLabel\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint\"\u003e\u003ccode\u003eaccessibilityHints\u003c/code\u003e\u003c/a\u003e APIs.\u003c/p\u003e\n\u003ch3 id=\"differences\"\u003eDifferences:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTo use dynamic type for fonts, you need additional modifiers in SwiftUI.\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eScaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eViewModifier\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eEnvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esizeCategory\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003esizeCategory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eContent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escaledSize\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIFontMetrics\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escaledValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efont\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecustom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003escaledSize\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003escaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etextSize\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emodifier\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eScaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eTo step over elements in a list, you need to add \u003ccode\u003e.accessibilityElement(children: .combine)\u003c/code\u003e to each row in SwiftUI.\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eFruitCaloriesCounter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"n\"\u003eNavigationView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efruits\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003efruit\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"n\"\u003eFruitRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecombine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enavigationTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fruits Calories Counter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enavigationBarTitleDisplayMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003einline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eIn UIKit, you can insert and remove \u003ccode\u003eaccessibilityTraits\u003c/code\u003e depending on the button state:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisSelected\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityTraits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eheader\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityTraits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eheader\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eIn SwiftUI, you need to pass \u003ccode\u003e.accessibilityAddTraits(selected ? [.isSelected, .isButton] : .isButton)\u003c/code\u003e to one modifier.\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eselected\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eImage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esystemName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e44\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e44\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityLabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;favourite\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityHint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;removes favourite\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;makes favourite\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityAddTraits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e[.\u003c/span\u003e\u003cspan class=\"n\"\u003eisSelected\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisButton\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisButton\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuttonStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eplain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"complete-sample\"\u003eComplete Sample\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eimport\u003c/span\u003e \u003cspan class=\"nc\"\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efruits\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFruit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Apple\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e52\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFruit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Banana\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e89\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFruit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Orange\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e47\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFruit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Pineapple\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFruit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Strawberry\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eFruit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIdentifiable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecalories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eFruitRow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eFruit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eHStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003espacing\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eVStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ealignment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eleading\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003espacing\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Helvetica\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etextSize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityLabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e per 100g\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Helvetica\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etextSize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityLabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecalories\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e calories per 100 grams\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eSpacer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eselected\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eImage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esystemName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e44\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e44\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityLabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;favourite\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityHint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;removes favourite\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;makes favourite\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityAddTraits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eselected\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e[.\u003c/span\u003e\u003cspan class=\"n\"\u003eisSelected\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisButton\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisButton\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuttonStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eplain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eFruitCaloriesCounter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eNavigationView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efruits\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003efruit\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eFruitRow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efruit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecombine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enavigationTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fruits Calories Counter\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccessibilityElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enavigationBarTitleDisplayMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003einline\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eContentView\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eFruitCaloriesCounter\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e#\u003c/span\u003e\u003cspan class=\"n\"\u003ePreview\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eContentView\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eScaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eViewModifier\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eEnvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esizeCategory\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003esizeCategory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eContent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escaledSize\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eUIFontMetrics\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escaledValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efont\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecustom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003escaledSize\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003escaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etextSize\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emodifier\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eScaledFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"Accessibility iOS SwiftUI"},{"content":"Introduction I was curious to find out how to make an application more accessible. You can look at popular applications like YouTube or Netflix; they all have accessibility features like VoiceOver and dynamic fonts. I decided to create this example for a fruit calorie counter. It contains a list of fruits with the fruit name, fruit calories, and a favorite button.\nWhere to Start Before diving into implementation details, I want to highlight some information about the existing accessibility features and what I will be focusing on.\nExisting Accessibility Features Apple provides a variety of tools; here are the most important ones:\nVoiceOver: A screen reader that allows visually impaired users to interact with their devices. Dynamic Type: Support for adjustable text sizes. Users can choose larger text sizes in the system settings, and apps should respond appropriately by scaling text and UI elements. Contrast and Color: Ensuring sufficient contrast between text and background to make content readable for users with visual impairments. Switch Control: A feature that allows users with limited mobility to control their device using adaptive accessories. AssistiveTouch: A feature that helps users with physical disabilities perform actions that would otherwise require gestures. Labels and Hints: Using accessibility labels and hints to provide descriptive text for UI elements, which helps VoiceOver users understand what an element does. Focus Areas I will be focusing on Labels and Hints, VoiceOver, and Dynamic Type.\nImplementation First Step The first step would be to mark yourUIElement.isAccessibilityElement = true to enable your component\u0026rsquo;s visibility for VoiceOver.\nSecond Step The second step would be to define accessibilityElements for UI components that you want to access for VoiceOver. VoiceOver will read elements from top to bottom.\noverride var accessibilityElements: [Any]? { get { return [ nameLabel as Any, caloriesLabel as Any, favouriteButton as Any ] } set { } } Third Step The third step would be to add an accessibilityLabel; it will help identify the control or view.\nfavouriteButton.accessibilityLabel = \u0026#34;favourite\u0026#34; Fourth Step The fourth step would be to add an accessibilityHint; it describes the result of performing an action on the element.\nfavouriteButton.accessibilityHint = favouriteButton.isSelected ? \u0026#34;makes favourite\u0026#34; : \u0026#34;removes favourite\u0026#34; Adding Dynamic Type to Font Size If you run your application and go to the Accessibility Inspector and Run Audit for it, you will probably see an error like Dynamic font sizes are unsupported. This means if you go and change the Text Size for your entire system, your application\u0026rsquo;s font size will not change.\nTo fix it, you need to add adjustsFontForContentSizeCategory = true - it indicates whether the corresponding element should automatically update its font when the device’s UIContentSizeCategory is changed.\nnameLabel.adjustsFontForContentSizeCategory = true caloriesLabel.adjustsFontForContentSizeCategory = true If you need a custom font in your application, you need to transform the custom font to Dynamic Type by using UIFontMetrics.default.scaledFont.\nNow you can actually test it from the Accessibility Inspector settings page.\nCaveats The last thing is to make the table view automatically calculate row size because your content can potentially be clipped, as it happened to me 😊 You just need to add UITableView.automaticDimension to the heightForRowAt method of UITableViewDelegate.\nDownload Materials Download\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/accessibility-ios-uikit/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was curious to find out how to make an application more accessible. You can look at popular applications like YouTube or Netflix; they all have accessibility features like VoiceOver and dynamic fonts. I decided to create this example for a fruit calorie counter. It contains a list of fruits with the fruit name, fruit calories, and a favorite button.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f7bcf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f7bcf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003ch3 id=\"where-to-start\"\u003eWhere to Start\u003c/h3\u003e\n\u003cp\u003eBefore diving into implementation details, I want to highlight some information about the existing accessibility features and what I will be focusing on.\u003c/p\u003e","title":"Accessibility iOS UIKit"},{"content":"Introduction I was eager to learn how converting Text To Speech works in iOS. Here is what I discovered:\nFirst Step The first step is to add AVSpeechSynthesizer, an object that produces synthesized speech from text utterances.\n@State private var speechSynthesizer = AVSpeechSynthesizer() Second Step The second step is to add AVSpeechUtterance, an object that encapsulates the text for speech synthesis.\nprivate var utterance: AVSpeechUtterance { let inputMessage = \u0026#34;Hello world!\u0026#34; let utterance = AVSpeechUtterance(string: inputMessage) utterance.voice = AVSpeechSynthesisVoice(language: \u0026#34;en-US\u0026#34;) return utterance } Optional You can configure pitch, rate, and voice parameters.\nThird Step The third step is to add a speak method that actually allows you to convert Text To Speech.\nspeechSynthesizer.speak(utterance) Complete Example import SwiftUI import AVFoundation struct ContentView: View { @State private var speechSynthesizer = AVSpeechSynthesizer() private var utterance: AVSpeechUtterance { let inputMessage = \u0026#34;Hello world!\u0026#34; let utterance = AVSpeechUtterance(string: inputMessage) utterance.voice = AVSpeechSynthesisVoice(language: \u0026#34;en-US\u0026#34;) return utterance } var body: some View { VStack { Button(\u0026#34;Speak\u0026#34;) { speechSynthesizer.speak(utterance) } } .padding() } } #Preview { ContentView() } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/text-to-speech-ios/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was eager to learn how converting Text To Speech works in iOS. Here is what I discovered:\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is to add \u003ca href=\"https://developer.apple.com/documentation/avfaudio/avspeechsynthesizer/\"\u003e\u003ccode\u003eAVSpeechSynthesizer\u003c/code\u003e\u003c/a\u003e, an object that produces synthesized speech from text utterances.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003espeechSynthesizer\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAVSpeechSynthesizer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"second-step\"\u003eSecond Step\u003c/h3\u003e\n\u003cp\u003eThe second step is to add \u003ca href=\"https://developer.apple.com/documentation/avfaudio/avspeechutterance\"\u003e\u003ccode\u003eAVSpeechUtterance\u003c/code\u003e\u003c/a\u003e, an object that encapsulates the text for speech synthesis.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eutterance\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eAVSpeechUtterance\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003einputMessage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello world!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eutterance\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAVSpeechUtterance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einputMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eutterance\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evoice\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAVSpeechSynthesisVoice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elanguage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;en-US\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eutterance\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"optional\"\u003eOptional\u003c/h4\u003e\n\u003cp\u003eYou can configure \u003ccode\u003epitch\u003c/code\u003e, \u003ccode\u003erate\u003c/code\u003e, and \u003ccode\u003evoice\u003c/code\u003e parameters.\u003c/p\u003e","title":"Text To Speech iOS"},{"content":"Introduction I always wanted an iOS app that would allow me to economize my time by converting speech to text. I know this option is built into the keyboard, but you first need to click the text field, then tap on the microphone, and finally speak. I wanted a one-click option with the possibility to integrate it into all my daily routines. Here is what I discovered:\nFirst Step The first step is to request authorization to access the device\u0026rsquo;s microphone using the Privacy - Speech Recognition Usage Description key and the Privacy - Microphone Usage Description key.\nSecond Step The second step is to add a SpeechRecognizerService that will detect and transcribe speech. It consists of SFSpeechRecognizer, AVAudioSession, and AVAudioEngine. Your transcribed speech will be stored in the transcript property.\nimport Foundation import AVFoundation import Speech /// A helper for transcribing speech to text using SFSpeechRecognizer and AVAudioEngine. actor SpeechRecognizerService: ObservableObject { enum RecognizerError: Error { case nilRecognizer case notAuthorizedToRecognize case notPermittedToRecord case recognizerIsUnavailable var message: String { switch self { case .nilRecognizer: return \u0026#34;Can\u0026#39;t initialize speech recognizer\u0026#34; case .notAuthorizedToRecognize: return \u0026#34;Not authorized to recognize speech\u0026#34; case .notPermittedToRecord: return \u0026#34;Not permitted to record audio\u0026#34; case .recognizerIsUnavailable: return \u0026#34;Recognizer is unavailable\u0026#34; } } } @MainActor @Published private(set) var transcript: String = \u0026#34;\u0026#34; private var audioEngine: AVAudioEngine? private var request: SFSpeechAudioBufferRecognitionRequest? private var task: SFSpeechRecognitionTask? private let recognizer: SFSpeechRecognizer? /** Initializes a new speech recognizer. If this is the first time you\u0026#39;ve used the class, it requests access to the speech recognizer and the microphone. */ init() { recognizer = SFSpeechRecognizer() guard recognizer != nil else { transcribe(RecognizerError.nilRecognizer) return } Task { do { guard await SFSpeechRecognizer.hasAuthorizationToRecognize() else { throw RecognizerError.notAuthorizedToRecognize } guard await AVAudioSession.sharedInstance().hasPermissionToRecord() else { throw RecognizerError.notPermittedToRecord } } catch { transcribe(error) } } } @MainActor func startTranscribing() { Task { await transcribe() } } @MainActor func resetTranscript() { Task { await reset() } } @MainActor func stopTranscribing() { Task { await reset() } } } private extension SpeechRecognizerService { /** Begin transcribing audio. Creates a `SFSpeechRecognitionTask` that transcribes speech to text until you call `stopTranscribing()`. The resulting transcription is continuously written to the published `transcript` property. */ func transcribe() { guard let recognizer, recognizer.isAvailable else { self.transcribe(RecognizerError.recognizerIsUnavailable) return } do { let (audioEngine, request) = try Self.prepareEngine() self.audioEngine = audioEngine self.request = request self.task = recognizer.recognitionTask(with: request, resultHandler: { [weak self] result, error in self?.recognitionHandler(audioEngine: audioEngine, result: result, error: error) }) } catch { self.reset() self.transcribe(error) } } /// Reset the speech recognizer. func reset() { task?.cancel() audioEngine?.stop() audioEngine = nil request = nil task = nil } static func prepareEngine() throws -\u0026gt; (AVAudioEngine, SFSpeechAudioBufferRecognitionRequest) { let audioEngine = AVAudioEngine() let request = SFSpeechAudioBufferRecognitionRequest() request.shouldReportPartialResults = true let audioSession = AVAudioSession.sharedInstance() try audioSession.setCategory(.playAndRecord, mode: .measurement, options: .duckOthers) try audioSession.setActive(true, options: .notifyOthersOnDeactivation) let inputNode = audioEngine.inputNode let recordingFormat = inputNode.outputFormat(forBus: 0) inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { (buffer: AVAudioPCMBuffer, when: AVAudioTime) in request.append(buffer) } audioEngine.prepare() try audioEngine.start() return (audioEngine, request) } nonisolated func recognitionHandler(audioEngine: AVAudioEngine, result: SFSpeechRecognitionResult?, error: Error?) { let receivedFinalResult = result?.isFinal ?? false let receivedError = error != nil if receivedFinalResult || receivedError { audioEngine.stop() audioEngine.inputNode.removeTap(onBus: 0) } if let result { transcribe(result.bestTranscription.formattedString) } } nonisolated func transcribe(_ message: String) { Task { @MainActor in transcript = message } } nonisolated func transcribe(_ error: Error) { var errorMessage = \u0026#34;\u0026#34; if let error = error as? RecognizerError { errorMessage += error.message } else { errorMessage += error.localizedDescription } Task { @MainActor [errorMessage] in transcript = \u0026#34;\u0026lt;\u0026lt; \\(errorMessage) \u0026gt;\u0026gt;\u0026#34; } } } extension SFSpeechRecognizer { static func hasAuthorizationToRecognize() async -\u0026gt; Bool { await withCheckedContinuation { continuation in requestAuthorization { status in continuation.resume(returning: status == .authorized) } } } } extension AVAudioSession { func hasPermissionToRecord() async -\u0026gt; Bool { await withCheckedContinuation { continuation in requestRecordPermission { authorized in continuation.resume(returning: authorized) } } } } Third Step The third step is to integrate speech recognition.\nimport SwiftUI struct ContentView: View { @StateObject private var speechRecognizerService: SpeechRecognizerService = SpeechRecognizerService() var body: some View { ScrollView { VStack { Button(\u0026#34;Start\u0026#34;) { speechRecognizerService.startTranscribing() } Divider() Button(\u0026#34;Stop\u0026#34;) { speechRecognizerService.stopTranscribing() } Divider() Text(speechRecognizerService.transcript) } } .padding() } } #Preview { ContentView() } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/speech-to-text-ios/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI always wanted an iOS app that would allow me to economize my time by converting speech to text.\nI know this option is built into the keyboard, but you first need to click the text field, then tap on the microphone, and finally speak.\nI wanted a one-click option with the possibility to integrate it into all my daily routines. Here is what I discovered:\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3215a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3215a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"Speech To Text iOS"},{"content":"Introduction I was curious about creating animations in UIKit. I wanted to animate different properties such as color and path. Here is what I found:\nIt’s impossible to create complex animations only by using the block-based animation API. To do that, you need the Core Animation API and CAPropertyAnimation with its various subclasses.\nComplex animation in UIKit is based on a few key components:\nCAShapeLayer - provides extensive customization options: path, stroke, fill, shadow CABasicAnimation - helps animate color or change the path Implementation First Step The first step is to create a shape layer that will draw an arrow using CAShapeLayer.\nprivate lazy var arrowShapeLayer: CAShapeLayer = { let arrowShapeLayer = CAShapeLayer() arrowShapeLayer.strokeColor = direction.arrowColour.cgColor arrowShapeLayer.lineWidth = ArrowView.arrowLineWidth arrowShapeLayer.lineCap = .round arrowShapeLayer.fillColor = UIColor.clear.cgColor return arrowShapeLayer }() Second Step The second step is to animate the arrow direction by changing the shape layer\u0026rsquo;s path and stroke color.\nvar direction: Direction = .up { didSet { guard oldValue != direction else { return } let pathAnimation = CABasicAnimation(keyPath: \u0026#34;path\u0026#34;) pathAnimation.fromValue = arrowShapeLayer.presentation()?.path pathAnimation.duration = 0.5 arrowShapeLayer.add(pathAnimation, forKey: \u0026#34;pathAnimation\u0026#34;) let strokeColourAnimation = CABasicAnimation(keyPath: \u0026#34;strokeColor\u0026#34;) strokeColourAnimation.fromValue = arrowShapeLayer.presentation()?.strokeColor strokeColourAnimation.duration = 0.5 arrowShapeLayer.add(strokeColourAnimation, forKey: \u0026#34;strokeColourAnimation\u0026#34;) arrowShapeLayer.path = direction.arrowPath(in: bounds).cgPath arrowShapeLayer.strokeColor = direction.arrowColour.cgColor } } Third Step The third step is to synchronize Core Animation with UIKit animation by requesting the CAAction property.\nvar direction: Direction = .up { didSet { guard oldValue != direction else { return } if let backgroundColourAnimation = action(for: layer, forKey: \u0026#34;backgroundColor\u0026#34;) as? CABasicAnimation { let pathAnimation = backgroundColourAnimation.copy(forKeyPath: \u0026#34;path\u0026#34;) pathAnimation.fromValue = arrowShapeLayer.presentation()?.path arrowShapeLayer.add(pathAnimation, forKey: \u0026#34;pathAnimation\u0026#34;) let strokeColourAnimation = backgroundColourAnimation.copy(forKeyPath: \u0026#34;strokeColor\u0026#34;) strokeColourAnimation.fromValue = arrowShapeLayer.presentation()?.strokeColor arrowShapeLayer.add(strokeColourAnimation, forKey: \u0026#34;strokeColourAnimation\u0026#34;) } arrowShapeLayer.path = direction.arrowPath(in: bounds).cgPath arrowShapeLayer.strokeColor = direction.arrowColour.cgColor } } Resources If you are curious, I would recommend you read a more detailed explanation from Darjeeling Steve\u0026rsquo;s blog. I found this resource incredible and full of comprehensive information.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/animation-uikit/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was curious about creating animations in UIKit. I wanted to animate different properties such as \u003ccode\u003ecolor\u003c/code\u003e and \u003ccode\u003epath\u003c/code\u003e.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3215a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3215a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cp\u003eHere is what I found:\u003c/p\u003e\n\u003cp\u003eIt’s impossible to create complex animations only by using the \u003ca href=\"https://developer.apple.com/documentation/uikit/uiview#1654491\"\u003eblock-based animation API\u003c/a\u003e. To do that, you need the \u003ca href=\"https://developer.apple.com/documentation/quartzcore\"\u003e\u003ccode\u003eCore Animation\u003c/code\u003e\u003c/a\u003e API and \u003ca href=\"https://developer.apple.com/documentation/quartzcore/capropertyanimation/\"\u003e\u003ccode\u003eCAPropertyAnimation\u003c/code\u003e\u003c/a\u003e with its various subclasses.\u003c/p\u003e\n\u003cp\u003eComplex animation in UIKit is based on a few key components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/documentation/quartzcore/cashapelayer\"\u003e\u003ccode\u003eCAShapeLayer\u003c/code\u003e\u003c/a\u003e - provides extensive customization options: \u003ccode\u003epath\u003c/code\u003e, \u003ccode\u003estroke\u003c/code\u003e, \u003ccode\u003efill\u003c/code\u003e, \u003ccode\u003eshadow\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/documentation/quartzcore/cabasicanimation\"\u003e\u003ccode\u003eCABasicAnimation\u003c/code\u003e\u003c/a\u003e - helps animate \u003ccode\u003ecolor\u003c/code\u003e or change the \u003ccode\u003epath\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003ch4 id=\"first-step\"\u003eFirst Step\u003c/h4\u003e\n\u003cp\u003eThe first step is to create a shape layer that will draw an arrow using \u003ca href=\"https://developer.apple.com/documentation/quartzcore/cashapelayer\"\u003e\u003ccode\u003eCAShapeLayer\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e","title":"Animation - UIKit"},{"content":"Introduction I was eager to learn about creating complex animations in SwiftUI. The few questions that were on my mind included what types of animations exist and what I can animate. Here is what I found:\nTypes of Animation SwiftUI has explicit and implicit animation types.\nImplicit Animation: This is specified with the .animation() modifier. SwiftUI will animate changes in old and new values.\nstruct ImplicitAnimation: View { @State private var half = false @State private var dim = false var body: some View { Image(\u0026#34;tower\u0026#34;) .scaleEffect(half ? 0.5 : 1.0) .opacity(dim ? 0.2 : 1.0) .animation(.easeInOut(duration: 1.0)) .onTapGesture { self.dim.toggle() self.half.toggle() } } } Explicit Animation: This is specified with the withAnimation closure. Only those parameters that depend on a value changed inside the withAnimation closure will be animated.\nstruct ExplicitAnimation: View { @State private var half = false @State private var dim = false var body: some View { Image(\u0026#34;tower\u0026#34;) .scaleEffect(half ? 0.5 : 1.0) .opacity(dim ? 0.5 : 1.0) .onTapGesture { self.half.toggle() withAnimation(.easeInOut(duration: 1.0)) { self.dim.toggle() } } } } What is Possible to Animate You can animate single parameters such as size, offset, color, scale, etc. You can conform to the Animatable protocol and describe how to animate a property of a view. You can also animate multiple parameters with AnimatablePair. Resources An invaluable resource is The SwiftUI Lab, which has more than 5 posts only about animation in SwiftUI.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/animation-swiftui/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was eager to learn about creating complex animations in SwiftUI. The few questions that were on my mind included what types of animations exist and what I can animate. Here is what I found:\u003c/p\u003e\n\u003ch3 id=\"types-of-animation\"\u003eTypes of Animation\u003c/h3\u003e\n\u003cp\u003eSwiftUI has \u003ccode\u003eexplicit\u003c/code\u003e and \u003ccode\u003eimplicit\u003c/code\u003e animation types.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImplicit Animation:\u003c/strong\u003e This is specified with the \u003ccode\u003e.animation()\u003c/code\u003e modifier. SwiftUI will animate changes in old and new values.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eImplicitAnimation\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ehalf\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edim\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eImage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;tower\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escaleEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehalf\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopacity\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edim\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eanimation\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eeaseInOut\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eduration\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eonTapGesture\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edim\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehalf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f4c55\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f4c55\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/implicit.gif#center\" alt=\"Implicit Animation\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"Animation - SwiftUI"},{"content":"Introduction I previously never had a chance to work with GraphQL. I was excited to learn when to apply this technology, what tools I can use, and how I can implement it. Here’s what I found:\nFor testing, I used the Star Wars GraphQL API with AllFilmsQuery:\nquery AllFilmsQuery { allFilms { films { title director created producers releaseDate } } } I requested allFilms with title, director, created, producers, and releaseDate information.\nWhen to Apply This Technology The best way to use GraphQL is when you have multiple platform applications such as web, mobile, and TV, and each client needs to request the specific data they require. It\u0026rsquo;s also beneficial when you need to fetch complex, nested, or related data from multiple sources. What Tools to Use GraphiQL Live Demo - A graphical interactive in-browser GraphQL IDE. Apollo iOS Docs - Apollo iOS is an open-source GraphQL client for native client applications, written in Swift. Apollo iOS Code Generation CLI - A CLI to generate boilerplate code. Caveats Before diving into implementation, I would like to highlight a few nuances.\nYou need to add NetworkInterceptorProvider and AuthorizationInterceptor to authenticate your operations. Without them, you won\u0026rsquo;t be able to access the data on your server.\nHow to Implement It Client class NetworkInterceptorProvider: DefaultInterceptorProvider { override func interceptors\u0026lt;Operation\u0026gt;(for operation: Operation) -\u0026gt; [ApolloInterceptor] where Operation : GraphQLOperation { var interceptors = super.interceptors(for: operation) interceptors.insert(AuthorizationInterceptor(), at: 0) return interceptors } } class AuthorizationInterceptor: ApolloInterceptor { let id: String = UUID().uuidString func interceptAsync\u0026lt;Operation\u0026gt;( chain: RequestChain, request: HTTPRequest\u0026lt;Operation\u0026gt;, response: HTTPResponse\u0026lt;Operation\u0026gt;?, completion: @escaping (Result\u0026lt;GraphQLResult\u0026lt;Operation.Data\u0026gt;, Error\u0026gt;) -\u0026gt; Void ) where Operation : GraphQLOperation { chain.proceedAsync(request: request, response: response, completion: completion) } } private let apollo: ApolloClient = { let client = URLSessionClient() let cache = InMemoryNormalizedCache() let store = ApolloStore(cache: cache) let provider = NetworkInterceptorProvider(client: client, store: store) let url = URL(string: \u0026#34;https://swapi-graphql.netlify.app/.netlify/functions/index\u0026#34;)! let transport = RequestChainNetworkTransport(interceptorProvider: provider, endpointURL: url) return ApolloClient(networkTransport: transport, store: store) }() UI import SwiftUI import Apollo import StarWarsAPI struct ContentView: View { @State private var list: [AllFilmsQuery.Data.AllFilms.Film?] = [] var body: some View { VStack { ForEach(list, id: \\.self) { row in Text(row?.title ?? \u0026#34;\u0026#34;) } }.onAppear(perform: { apollo.fetch(query: AllFilmsQuery()) { result in switch result { case .success(let response): self.list = response.data?.allFilms?.films ?? [] case .failure(let error): print(error) } } }) .padding() } } #Preview { ContentView() } References You can find more detailed information in the amazing post Unleashing the Power of GraphQL in Your iOS App where you can find step-by-step instructions on how to use Apollo iOS and GraphQL. I also recommend watching the video “Adopting GraphQL\u0026quot; by Carola Nitz, hosted by Swiftable. Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-graphql-in-an-ios-application/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI previously never had a chance to work with GraphQL. I was excited to learn when to apply this technology, what tools I can use, and how I can implement it. Here’s what I found:\u003c/p\u003e\n\u003cp\u003eFor testing, I used the \u003ca href=\"https://studio.apollographql.com/public/star-wars-swapi/variant/current/home\"\u003eStar Wars GraphQL API\u003c/a\u003e with \u003ccode\u003eAllFilmsQuery\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-graphql\" data-lang=\"graphql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003equery\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nc\"\u003eAllFilmsQuery\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"py\"\u003eallFilms\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"py\"\u003efilms\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"py\"\u003etitle\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"py\"\u003edirector\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"py\"\u003ecreated\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"py\"\u003eproducers\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"py\"\u003ereleaseDate\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI requested \u003ccode\u003eallFilms\u003c/code\u003e with \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003edirector\u003c/code\u003e, \u003ccode\u003ecreated\u003c/code\u003e, \u003ccode\u003eproducers\u003c/code\u003e, and \u003ccode\u003ereleaseDate\u003c/code\u003e information.\u003c/p\u003e","title":"Implementing GraphQL in an iOS application"},{"content":"Introduction I was eager to learn about securing user data using Keychain and biometric authentication. Here are a few steps I found:\nCaveats You can test accessing Keychain data using Touch ID and Face ID only on a real device.\nFirst Step The first step is to add the Privacy - Face ID Usage Description key to your Info.plist. Without it, you would not be able to retrieve data from Keychain using Face ID.\nSecond Step The second step would be to add the addCredentials method to be able to save user data to Keychain.\n/// Stores credentials for the given server. func addCredentials(_ credentials: Credentials, server: String) throws { // Use the username as the account, and get the password as data. let account = credentials.username let password = credentials.password.data(using: String.Encoding.utf8)! // Create an access control instance that dictates how the item can be read later. let access = SecAccessControlCreateWithFlags(nil, // Use the default allocator. kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, .userPresence, nil) // Ignore any error. // Allow a device unlock in the last 10 seconds to be used to get at keychain items. let context = LAContext() context.touchIDAuthenticationAllowableReuseDuration = 10 // Build the query for use in the add operation. let query: [String: Any] = [kSecClass as String: kSecClassInternetPassword, kSecAttrAccount as String: account, kSecAttrServer as String: server, kSecAttrAccessControl as String: access as Any, kSecUseAuthenticationContext as String: context, kSecValueData as String: password] let status = SecItemAdd(query as CFDictionary, nil) guard status == errSecSuccess else { throw KeychainError(status: status) } } Third Step The third step is to add the readCredentials method to be capable of retrieving user data from Keychain.\n/// Reads the stored credentials for the given server. func readCredentials(server: String) throws -\u0026gt; Credentials { let context = LAContext() context.localizedReason = \u0026#34;Access your password on the keychain\u0026#34; let query: [String: Any] = [kSecClass as String: kSecClassInternetPassword, kSecAttrServer as String: server, kSecMatchLimit as String: kSecMatchLimitOne, kSecReturnAttributes as String: true, kSecUseAuthenticationContext as String: context, kSecReturnData as String: true] var item: CFTypeRef? let status = SecItemCopyMatching(query as CFDictionary, \u0026amp;item) guard status == errSecSuccess else { throw KeychainError(status: status) } guard let existingItem = item as? [String: Any], let passwordData = existingItem[kSecValueData as String] as? Data, let password = String(data: passwordData, encoding: String.Encoding.utf8), let account = existingItem[kSecAttrAccount as String] as? String else { throw KeychainError(status: errSecInternalError) } return Credentials(username: account, password: password) } Fourth Step The fourth step is to add the deleteCredentials method to have the ability to delete user data from Keychain.\n/// Deletes credentials for the given server. func deleteCredentials(server: String) throws { let query: [String: Any] = [kSecClass as String: kSecClassInternetPassword, kSecAttrServer as String: server] let status = SecItemDelete(query as CFDictionary) guard status == errSecSuccess else { throw KeychainError(status: status) } } UI import SwiftUI import LocalAuthentication struct ContentView: View { @State private var status: String = \u0026#34;\u0026#34; var body: some View { VStack { ForEach(Command.allCases) { command in Button(command.rawValue) { switch command { case .add: // Normally, username and password would come from the user interface. let credentials = Credentials(username: \u0026#34;appleseed\u0026#34;, password: \u0026#34;1234\u0026#34;) do { try addCredentials(credentials, server: server) status = statusMessage(.add, nil) } catch { status = error.localizedDescription } case .read: do { status = statusMessage(.read, try readCredentials(server: server)) } catch { status = error.localizedDescription } case .delete: do { try deleteCredentials(server: server) status = statusMessage(.delete, nil) } catch { status = error.localizedDescription } } } if command != .delete { Spacer() } } Spacer() Text(status) } } } Helpers enum Command: String, CaseIterable, Identifiable { var id: String { rawValue } case add case read case delete } /// The username and password that we want to store or read. struct Credentials { var username: String var password: String } /// Keychain errors we might encounter. struct KeychainError: Error { var status: OSStatus var localizedDescription: String { return SecCopyErrorMessageString(status, nil) as String? ?? \u0026#34;Unknown error.\u0026#34; } } /// The server we are accessing with the credentials. let server = \u0026#34;www.example.com\u0026#34; func statusMessage(_ command: Command, _ credentials: Credentials? = nil) -\u0026gt; String { switch command { case .add: return \u0026#34;Added credentials.\u0026#34; case .read: return \u0026#34;Read credentials: \\(credentials!.username)/\\(credentials!.password)\u0026#34; case .delete: return \u0026#34;Deleted credentials.\u0026#34; } } You can find more detailed information and project details in the Apple Developer Documentation.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/securing-user-data-with-keychain-touch-id-and-face-id/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was eager to learn about securing user data using \u003ccode\u003eKeychain\u003c/code\u003e and \u003ccode\u003ebiometric authentication\u003c/code\u003e. Here are a few steps I found:\u003c/p\u003e\n\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\u003cp\u003eYou can test accessing Keychain data using Touch ID and Face ID only on a real device.\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is to add the \u003ccode\u003ePrivacy - Face ID Usage Description\u003c/code\u003e key to your \u003ccode\u003eInfo.plist\u003c/code\u003e. Without it, you would not be able to retrieve data from \u003ccode\u003eKeychain\u003c/code\u003e using \u003ccode\u003eFace ID\u003c/code\u003e.\u003c/p\u003e","title":"Securing user data with Keychain, Touch ID, and Face ID"},{"content":"Introduction I was wondering how to add in-app purchases to my app. I chose non-consumable in-app purchase because you can pay one time for this item. Here are a few steps on how I did it.\nFirst Step Set up In-App Purchases for your app in App Store Connect account or add a .storekit configuration file and start from there. If you\u0026rsquo;ve already set up In-App Purchases in your account, you can sync the StoreKit config with that data.\nCaveats Be aware that if you choose to set up the StoreKit configuration file first, you will not find that file in the Xcode 15.3.0 iOS template. Instead, switch to macOS and search for it there.\nSecond Step fetchProducts by identifiers to retrieve data and by using an SKProductsRequestDelegate to receive and display products.\nfunc fetchProducts() { let productIDs: Set\u0026lt;String\u0026gt; = [\u0026#34;com.remove.ads.nonconsumable\u0026#34;] let request = SKProductsRequest(productIdentifiers: productIDs) request.delegate = self request.start() } // MARK: - SKProductsRequestDelegate extension ViewModel: SKProductsRequestDelegate { func productsRequest(_ request: SKProductsRequest, didReceive response: SKProductsResponse) { DispatchQueue.main.async { self.products = response.products.map { product in Product(id: product.productIdentifier, title: product.localizedTitle, price: product.price.doubleValue) } for product in response.products { self.productsMap[product.productIdentifier] = product } } } } Third Step Add a purchaseProduct method and connect the view model with the UI.\nfunc purchaseProduct(product: Product) { guard SKPaymentQueue.canMakePayments() else { errorMessage = \u0026#34;In-app purchases are disabled on this device.\u0026#34; return } guard let skProduct = productsMap[product.id] else { errorMessage = \u0026#34;Product information not available.\u0026#34; return } let payment = SKPayment(product: skProduct) SKPaymentQueue.default().add(payment) } UI var body: some View { ZStack(alignment: .top) { VStack(spacing: 10) { Text(\u0026#34;With StoreKit 2\u0026#34;) .padding() ForEach(viewModel.products) { product in Button { viewModel.purchaseProduct(product: product) } label: { Text(product.title) } } } .padding() } .onAppear(perform: { viewModel.fetchProducts() }) } ViewModel final class ViewModel: NSObject, ObservableObject { @Published var products: [Product] = [] private var productsMap: [String: SKProduct] = [:] @Published var errorMessage: String? func fetchProducts() { let productIDs: Set\u0026lt;String\u0026gt; = [\u0026#34;com.remove.ads.nonconsumable\u0026#34;] let request = SKProductsRequest(productIdentifiers: productIDs) request.delegate = self request.start() } func purchaseProduct(product: Product) { guard SKPaymentQueue.canMakePayments() else { errorMessage = \u0026#34;In-app purchases are disabled on this device.\u0026#34; return } guard let skProduct = productsMap[product.id] else { errorMessage = \u0026#34;Product information not available.\u0026#34; return } let payment = SKPayment(product: skProduct) SKPaymentQueue.default().add(payment) } } // MARK: - SKProductsRequestDelegate extension ViewModel: SKProductsRequestDelegate { func productsRequest(_ request: SKProductsRequest, didReceive response: SKProductsResponse) { DispatchQueue.main.async { self.products = response.products.map { product in Product(id: product.productIdentifier, title: product.localizedTitle, price: product.price.doubleValue) } for product in response.products { self.productsMap[product.productIdentifier] = product } } } } Helpers struct Product: Identifiable { let id: String let title: String let price: Double } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-in-app-purchases-to-swiftui-app-using-storekit-2/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was wondering how to add in-app purchases to my app. I chose \u003ca href=\"https://support.apple.com/en-us/108813#:~:text=What%20is%20a%20non%2Dconsumable%20in%2Dapp%20purchase%3F\"\u003enon-consumable in-app purchase\u003c/a\u003e because you can pay one time for this item. Here are a few steps on how I did it.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3215a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3215a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://learn.buildfire.com/en/articles/2534672-how-to-create-a-single-in-app-purchase-for-ios\"\u003eSet up In-App Purchases\u003c/a\u003e for your app in \u003ca href=\"https://appstoreconnect.apple.com/login\"\u003eApp Store Connect\u003c/a\u003e account or add a \u003ccode\u003e.storekit\u003c/code\u003e configuration file and start from there. If you\u0026rsquo;ve already set up In-App Purchases in your account, you can sync the \u003ccode\u003eStoreKit config\u003c/code\u003e with that data.\u003c/p\u003e","title":"Implementing In-App Purchases to SwiftUI app using StoreKit 2"},{"content":"Introduction Sometime ago, I was working on a marketplace app, and I needed to add Apple Pay to make purchases more easily. Here are a few steps on how I did it: First Step You need to add Apple Pay capability to your project. You will need to Register a Merchant ID. I will skip this step; you can find info by following this link Setting up Apple Pay. Second Step You will need to import PassKit and create PKPaymentRequest to interact with PKPaymentAuthorizationController and PKPaymentAuthorizationControllerDelegate. func initiateApplePay() { // Create payment request let paymentRequest = PKPaymentRequest() paymentRequest.merchantIdentifier = \u0026#34;your_merchant_identifier\u0026#34; paymentRequest.countryCode = \u0026#34;US\u0026#34; paymentRequest.currencyCode = \u0026#34;USD\u0026#34; paymentRequest.supportedNetworks = [.visa, .masterCard, .amex] paymentRequest.merchantCapabilities = .threeDSecure // Add payment items from cart for item in cartItems { let paymentItem = PKPaymentSummaryItem(label: item.name, amount: item.price) paymentRequest.paymentSummaryItems.append(paymentItem) } // Add total amount let totalItem = PKPaymentSummaryItem(label: \u0026#34;Total\u0026#34;, amount: totalAmount) paymentRequest.paymentSummaryItems.append(totalItem) // Present Apple Pay sheet let paymentController = PKPaymentAuthorizationController(paymentRequest: paymentRequest) paymentController.delegate = self paymentController.present(completion: nil) } Third Step Add UI and connect it with the view model.\nUI import SwiftUI struct ContentView: View { @StateObject private var viewModel = MarketplaceViewModel() var body: some View { VStack { List(viewModel.products) { product in HStack { Text(product.name) Spacer() Text(product.price.stringValue + \u0026#34;$\u0026#34;) Button(viewModel.inCart(product: product) ? \u0026#34;\u0026#34; : \u0026#34;Add to cart\u0026#34;) { viewModel.addToCart(product: product) } } } Text(\u0026#34;Total: \\(viewModel.totalAmount)\u0026#34;) Button(\u0026#34;Pay with Apple Pay\u0026#34;) { viewModel.initiateApplePay() } .padding() } } } #Preview { ContentView() } ViewModel final class MarketplaceViewModel: NSObject, ObservableObject { private var cartItems: [Product] = [] @Published private(set) var totalAmount: NSDecimalNumber = 0.0 @Published private(set) var products: [Product] = [] func fetchProducts() { Task { self.products = await ProductService.getProducts() } } func inCart(product: Product) -\u0026gt; Bool { cartItems.contains(product) } override init() { super.init() fetchProducts() } private func calculateTotalAmount() { totalAmount = cartItems.reduce(0) { $0.adding($1.price) } } func addToCart(product: Product) { cartItems.append(product) calculateTotalAmount() } func initiateApplePay() { // Create payment request let paymentRequest = PKPaymentRequest() paymentRequest.merchantIdentifier = \u0026#34;your_merchant_identifier\u0026#34; paymentRequest.countryCode = \u0026#34;US\u0026#34; paymentRequest.currencyCode = \u0026#34;USD\u0026#34; paymentRequest.supportedNetworks = [.visa, .masterCard, .amex] paymentRequest.merchantCapabilities = .threeDSecure // Add payment items from cart for item in cartItems { let paymentItem = PKPaymentSummaryItem(label: item.name, amount: item.price) paymentRequest.paymentSummaryItems.append(paymentItem) } // Add total amount let totalItem = PKPaymentSummaryItem(label: \u0026#34;Total\u0026#34;, amount: totalAmount) paymentRequest.paymentSummaryItems.append(totalItem) // Present Apple Pay sheet let paymentController = PKPaymentAuthorizationController(paymentRequest: paymentRequest) paymentController.delegate = self paymentController.present(completion: nil) } } // MARK: - PKPaymentAuthorizationControllerDelegate extension MarketplaceViewModel: PKPaymentAuthorizationControllerDelegate { func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController, didAuthorizePayment payment: PKPayment, handler completion: @escaping (PKPaymentAuthorizationResult) -\u0026gt; Void) { let paymentResult = PKPaymentAuthorizationResult(status: .success, errors: nil) completion(paymentResult) } func paymentAuthorizationControllerDidFinish(_ controller: PKPaymentAuthorizationController) { controller.dismiss(completion: nil) } } Helpers struct Product: Identifiable, Equatable { let id: UUID let name: String let price: NSDecimalNumber } final class ProductService { static func getProducts() async -\u0026gt; [Product] { let products: [Product] = [ Product(id: UUID(), name: \u0026#34;Product 1\u0026#34;, price: 10.0), Product(id: UUID(), name: \u0026#34;Product 2\u0026#34;, price: 20.0), Product(id: UUID(), name: \u0026#34;Product 3\u0026#34;, price: 15.0) ] return products } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/implementing-apple-pay-in-a-swiftui-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eSometime ago, I was working on a marketplace app, and I needed to add Apple Pay to make purchases more easily. Here are a few steps on how I did it:\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3215a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3215a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eYou need to add \u003ca href=\"https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/apple_pay/offering_apple_pay_in_your_app\"\u003eApple Pay\u003c/a\u003e capability to your project.\u003c/li\u003e\n\u003cli\u003eYou will need to \u003ccode\u003eRegister a Merchant ID\u003c/code\u003e. I will skip this step; you can find info by following this link \u003ca href=\"https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/apple_pay/setting_up_apple_pay\"\u003eSetting up Apple Pay\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"second-step\"\u003eSecond Step\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eYou will need to \u003ccode\u003eimport PassKit\u003c/code\u003e and create \u003ca href=\"https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/pkpaymentrequest\"\u003e\u003ccode\u003ePKPaymentRequest\u003c/code\u003e\u003c/a\u003e to interact with \u003ca href=\"https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/pkpaymentauthorizationcontroller\"\u003e\u003ccode\u003ePKPaymentAuthorizationController\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/pkpaymentauthorizationcontrollerdelegate\"\u003e\u003ccode\u003ePKPaymentAuthorizationControllerDelegate\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einitiateApplePay\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Create payment request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epaymentRequest\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePKPaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerchantIdentifier\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;your_merchant_identifier\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecountryCode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;US\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrencyCode\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;USD\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esupportedNetworks\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[.\u003c/span\u003e\u003cspan class=\"n\"\u003evisa\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emasterCard\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eamex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerchantCapabilities\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ethreeDSecure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Add payment items from cart\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ecartItems\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epaymentItem\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePKPaymentSummaryItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epaymentSummaryItems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epaymentItem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Add total amount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etotalItem\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePKPaymentSummaryItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Total\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etotalAmount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epaymentSummaryItems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etotalItem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Present Apple Pay sheet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epaymentController\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePKPaymentAuthorizationController\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epaymentRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentController\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelegate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epaymentController\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epresent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"third-step\"\u003eThird Step\u003c/h3\u003e\n\u003cp\u003eAdd UI and connect it with the view model.\u003c/p\u003e","title":"Implementing Apple Pay in a SwiftUI app"},{"content":"Introduction I have been looking for information about implementation details of integration testing. I found a lot of information, but it was theoretical and all information looked the same. I did not find a meaningful example, so I tried to come up with my own definition and sample.\nIntegration testing means testing the behavior between modules or views to ensure they work as expected after user actions.\nThere are two ways of conducting integration testing: The first is by unit tests, where you try to test the flowing data between view models. The second is UI tests, where you try to test if the UI items exist and navigation works correctly. I will focus on testing the flowing data between view models.\nSample: List View and Detail View When you tap on a row in the list, you expect that:\nThe selected item will pass to the detail view. The detail view will receive this item. The selected item will be equal to the passed item. import XCTest @testable import IntegrationTesting final class IntegrationTestingTests: XCTestCase { func testItemSelection() { let viewModel = MockItemListViewModel(service: MockItemService()) let selectedIndex = 1 let itemListView = ItemListView(viewModel: viewModel, didSelectItem: { let itemDetailView = ItemDetailView(selectedItem: $0) XCTAssertEqual(itemDetailView.selectedItem?.name, viewModel.items[selectedIndex].name) }) itemListView.didSelectItem(viewModel.items[selectedIndex]) } } Helpers import Combine final class MockItemListViewModel: ItemListViewModel { var selectedItem: Item? = nil } class ItemListViewModel: ObservableObject { @Published var items: [Item] = [] private var cancellables: Set\u0026lt;AnyCancellable\u0026gt; = [] private let service: ItemService init(service: ItemService) { self.service = service fetchItems() } func fetchItems() { service.fetchItems() .sink { completion in // Handle error or completion if necessary } receiveValue: { [weak self] items in self?.items = items } .store(in: \u0026amp;cancellables) } } import Combine protocol ItemService { func fetchItems() -\u0026gt; AnyPublisher\u0026lt;[Item], Error\u0026gt; } final class MockItemService: ItemService { func fetchItems() -\u0026gt; AnyPublisher\u0026lt;[Item], Error\u0026gt; { return Just([Item(name: \u0026#34;Item 1\u0026#34;), Item(name: \u0026#34;Item 2\u0026#34;)]) .setFailureType(to: Error.self) .eraseToAnyPublisher() } } import SwiftUI struct ItemListView: View { @ObservedObject var viewModel: ItemListViewModel var didSelectItem: (Item) -\u0026gt; Void var body: some View { List(viewModel.items) { item in Button(action: { didSelectItem(item) }) { Text(item.name) } }.accessibilityIdentifier(\u0026#34;ItemListView\u0026#34;) } } import SwiftUI struct ItemDetailView: View { var selectedItem: Item? var body: some View { if let item = selectedItem { Text(\u0026#34;Item Detail: \\(item.name)\u0026#34;) } else { Text(\u0026#34;No item selected\u0026#34;) } } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/integration-testing-for-swiftui-views/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI have been looking for information about implementation details of integration testing.\nI found a lot of information, but it was theoretical and all information looked the same.\nI did not find a meaningful example, so I tried to come up with my own definition and sample.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIntegration testing means testing the behavior between modules or views to ensure they work as expected after user actions.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"there-are-two-ways-of-conducting-integration-testing\"\u003eThere are two ways of conducting integration testing:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe first is by unit tests, where you try to test the flowing data between view models.\u003c/li\u003e\n\u003cli\u003eThe second is UI tests, where you try to test if the UI items exist and navigation works correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI will focus on testing the flowing data between view models.\u003c/p\u003e","title":"Integration testing for SwiftUI views"},{"content":"Introduction After spending some time developing my personal iOS app, I found myself in a position where I needed to add UI tests to my application. The reason behind this decision was the necessity to change the architecture to make it more scalable. However, this task proved to be challenging due to certain parts of the code being tightly coupled. The situation was quite frustrating. To address this problem, I decided to incorporate UI tests that could help identify issues during the refactoring process.\nCaveats Make sure to run UI tests from a generated bundle specifically designed for UI testing. If you attempt to test the UI using a bundle intended for Unit tests, you will consistently encounter the error: No target application path specified via test configuration: \u0026lt;XCTestConfiguration: 0x102b051f0\u0026gt;. Also, don\u0026rsquo;t forget to hide the keyboard when necessary. If you need to tap on the tab bar and forget to close it, the operation will not succeed because it won\u0026rsquo;t be able to locate the tab bar button. To resolve this, simply add the following code: app.buttons[\u0026#34;Return\u0026#34;].tap() Implementation Here\u0026rsquo;s an example of a To-Do list with functionalities for listing and adding tasks.\nUI Tests var app: XCUIApplication! override func setUpWithError() throws { continueAfterFailure = false app = XCUIApplication() app.launch() } func testAddTask() throws { let addTaskTab = app.tabBars.buttons[\u0026#34;Add Task\u0026#34;] addTaskTab.tap() let textField = app.textFields[\u0026#34;Enter task\u0026#34;] textField.tap() textField.typeText(\u0026#34;New Task\u0026#34;) // Dismiss the keyboard app.buttons[\u0026#34;Return\u0026#34;].tap() let addTaskButton = app.buttons[\u0026#34;AddTaskButton\u0026#34;] addTaskButton.tap() app.tabBars.buttons[\u0026#34;Tasks\u0026#34;].tap() XCTAssertTrue(app.staticTexts[\u0026#34;New Task\u0026#34;].exists) } UI struct ContentView: View { @StateObject var viewModel = TaskViewModel() var body: some View { TabView { TaskListView(viewModel: viewModel) .tabItem { Image(systemName: \u0026#34;list.bullet\u0026#34;) Text(\u0026#34;Tasks\u0026#34;) } AddTaskView(viewModel: viewModel) .tabItem { Image(systemName: \u0026#34;plus.circle\u0026#34;) Text(\u0026#34;Add Task\u0026#34;) } } } } struct TaskListView: View { @ObservedObject var viewModel: TaskViewModel var body: some View { NavigationView { List(viewModel.tasks) { task in Text(task.title) } .navigationBarTitle(\u0026#34;Tasks\u0026#34;) } } } struct AddTaskView: View { @ObservedObject var viewModel: TaskViewModel @State private var newTaskTitle = \u0026#34;\u0026#34; var body: some View { VStack { TextField(\u0026#34;Enter task\u0026#34;, text: $newTaskTitle) .padding() Button(\u0026#34;Add Task\u0026#34;) { viewModel.addTask(title: newTaskTitle) newTaskTitle = \u0026#34;\u0026#34; } .accessibilityIdentifier(\u0026#34;AddTaskButton\u0026#34;) .padding() } .navigationTitle(\u0026#34;Add Task\u0026#34;) } } final class TaskViewModel: ObservableObject { @Published var tasks: [Task] = [] func addTask(title: String) { let newTask = Task(title: title) tasks.append(newTask) } } struct Task: Identifiable { let id = UUID() var title: String var isCompleted: Bool = false } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/ui-testing-swiftui-views-using-xctest-framework/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eAfter spending some time developing my personal iOS app, I found myself in a position where I needed to add UI tests to my application.\nThe reason behind this decision was the necessity to change the architecture to make it more scalable.\nHowever, this task proved to be challenging due to certain parts of the code being tightly coupled.\nThe situation was quite frustrating.\nTo address this problem, I decided to incorporate UI tests that could help identify issues during the refactoring process.\u003c/p\u003e","title":"UI testing SwiftUI views using XCTest Framework"},{"content":"Introduction I was curious about how to add Dynamic Island and implement it into a Video Streaming App. Here are a few steps on how you can achieve this.\nCaveats Debugging Dynamic Island can be a bit tricky; it only works when the main app is running. If you try to run it separately, you will encounter the error SendProcessControlEvent:toPid: encountered an error: Error Domain=com.apple.dt.deviceprocesscontrolservice Code=8 \u0026quot;Failed to show Widget\u0026quot;. The solution is to configure live activities and run them through the main app. Be aware that when you add a widget to the project, in some cases, it adds all main target files to Compile Sources. Implementation Dynamic Islands are divided into different sizes: minimal, compactTrailing, compactLeading, and expanded. Before proceeding, you need to add LiveActivityManager to be able to display Dynamic Islands.\nimport Foundation import ActivityKit struct VideoStreamingWidgetActivityAttributes: ActivityAttributes { struct ContentState: Codable, Hashable { var isPlaying: String = \u0026#34;0\u0026#34; } } final class LiveActivityManager { @discardableResult static func startActivity(isPlaying: String) throws -\u0026gt; String { var activity: Activity\u0026lt;VideoStreamingWidgetActivityAttributes\u0026gt;? let initialState = VideoStreamingWidgetActivityAttributes.ContentState(isPlaying: isPlaying) do { activity = try Activity.request(attributes: VideoStreamingWidgetActivityAttributes(), contentState: initialState, pushType: nil) guard let id = activity?.id else { throw LiveActivityErrorType.failedToGetID } return id } catch { throw error } } } enum LiveActivityErrorType: Error { case failedToGetID } UI compactTrailing compactTrailing: { Text(\u0026#34;0:33\u0026#34;) .foregroundColor(.red) .padding(.trailing, 8) } compactLeading compactLeading: { Image(systemName: \u0026#34;waveform\u0026#34;) .resizable() .aspectRatio(contentMode: .fit) .foregroundColor(.red) .padding(.leading, 8) } expanded DynamicIsland { DynamicIslandExpandedRegion(.center) { HStack { Text(\u0026#34;0:33\u0026#34;) .foregroundStyle(.gray) .frame(height: 4) ProgressView(value: 33, total: 344) .progressViewStyle(.linear) Text(\u0026#34;-2:33\u0026#34;) .foregroundStyle(.gray) .frame(height: 4) } } DynamicIslandExpandedRegion(.bottom) { HStack(spacing: 24) { ForEach(Command.allCases) { command in Button(intent: ButtonIntent(id: command.id)) { Image(systemName: imageSystemName(isPlaying: true, command: command)) } } } } } Helpers enum Command: String, CaseIterable { case previous case playPause case next } extension Command: Identifiable { var id: String { rawValue } } func imageSystemName(isPlaying: Bool, command: Command) -\u0026gt; String { switch command { case .playPause: if isPlaying { return \u0026#34;pause.fill\u0026#34; } else { return \u0026#34;play.fill\u0026#34; } case .next: return \u0026#34;forward.fill\u0026#34; case .previous: return \u0026#34;backward.fill\u0026#34; } } import AppIntents struct ButtonIntent: AppIntent { static let title: LocalizedStringResource = \u0026#34;ButtonIntent\u0026#34; @Parameter(title: \u0026#34;id\u0026#34;) var id: String init(id: String) { self.id = id } init() {} func perform() async throws -\u0026gt; some IntentResult { if id == Command.playPause.rawValue { } return .result() } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/building-dynamic-island-for-video-streaming-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was curious about how to add Dynamic Island and implement it into a Video Streaming App.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f7bcf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f7bcf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nHere are a few steps on how you can achieve this.\u003c/p\u003e\n\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDebugging Dynamic Island can be a bit tricky; it only works when the main app is running. If you try to run it separately, you will encounter the error \u003ccode\u003eSendProcessControlEvent:toPid: encountered an error: Error Domain=com.apple.dt.deviceprocesscontrolservice Code=8 \u0026quot;Failed to show Widget\u0026quot;.\u003c/code\u003e The solution is to configure live activities and run them through the main app.\u003c/li\u003e\n\u003cli\u003eBe aware that when you add a widget to the project, in some cases, it adds all main target files to \u003ccode\u003eCompile Sources\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eDynamic Islands are divided into different sizes: \u003ccode\u003eminimal\u003c/code\u003e, \u003ccode\u003ecompactTrailing\u003c/code\u003e, \u003ccode\u003ecompactLeading\u003c/code\u003e, and \u003ccode\u003eexpanded\u003c/code\u003e.\nBefore proceeding, you need to add \u003ccode\u003eLiveActivityManager\u003c/code\u003e to be able to display Dynamic Islands.\u003c/p\u003e","title":"Building Dynamic Island for Video Streaming App"},{"content":"Introduction I was exploring the idea of creating a YouTube-like widget for the lock screen on iOS devices. It wasn\u0026rsquo;t easy because most articles on the Internet discussed general implementations, such as for a coffee shop or a to-do list. Even when I found some similar versions, the project wouldn\u0026rsquo;t compile. I made the decision to approach it my way, so here\u0026rsquo;s what I found out:\nCaveats After being stuck for two or more hours without understanding why, after tapping on a button, I wasn't able to receive a callback from it and the widget always opened the main iOS app, I realized that I forgot to add AppIntent - without it, you can\u0026rsquo;t handle actions for iOS 17. import AppIntents struct ButtonIntent: AppIntent { static let title: LocalizedStringResource = \u0026#34;ButtonIntent\u0026#34; @Parameter(title: \u0026#34;id\u0026#34;) var id: String func perform() async throws -\u0026gt; some IntentResult { if id == Command.playPause.rawValue { DataModel.shared.isPlaying.toggle() } return .result() } } Another crucial point is not to forget to add an explicit init. If you don\u0026rsquo;t implement it explicitly, it will not work. import AppIntents struct ButtonIntent: AppIntent { static let title: LocalizedStringResource = \u0026#34;ButtonIntent\u0026#34; @Parameter(title: \u0026#34;id\u0026#34;) var id: String init(id: String) { self.id = id } init() {} func perform() async throws -\u0026gt; some IntentResult { if id == Command.playPause.rawValue { DataModel.shared.isPlaying.toggle() } return .result() } } Lastly, I attempted to add a Slider, but I found that it\u0026rsquo;s not supported by the widget. My solution was to choose a ProgressView instead. Implementation struct YouTubeLockScreenWidget: View { var body: some View { VStack { Spacer() ProgressView(value: DataModel.shared.currentTime, total: DataModel.shared.totalTime) .progressViewStyle(.linear) Spacer() HStack { ForEach(Command.allCases) { command in Button(intent: ButtonIntent(id: command.id)) { Image(systemName: imageSystemName(isPlaying: DataModel.shared.isPlaying, command: command)) } } } } } } final class DataModel { static let shared = DataModel() var isPlaying: Bool = false var currentTime: TimeInterval = 34 var totalTime: TimeInterval = 304 } enum Command: String, CaseIterable { case previous case playPause case next } extension Command: Identifiable { var id: String { rawValue } } func imageSystemName(isPlaying: Bool, command: Command) -\u0026gt; String { switch command { case .playPause: if isPlaying { return \u0026#34;pause.fill\u0026#34; } else { return \u0026#34;play.fill\u0026#34; } case .next: return \u0026#34;forward.fill\u0026#34; case .previous: return \u0026#34;backward.fill\u0026#34; } } I had not replaced default generated code when I was adding widget to the project. I just added YouTubeLockScreenWidget to generated VideoStreamingWidgetEntryView.\nstruct VideoStreamingWidgetEntryView : View { var entry: Provider.Entry var body: some View { YouTubeLockScreenWidget() } } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/building-video-streaming-widget-for-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was exploring the idea of creating a YouTube-like widget for the lock screen on iOS devices.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-f7bcf\" hidden\u003e\n    \u003clabel for=\"zoomCheck-f7bcf\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.png#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nIt wasn\u0026rsquo;t easy because most articles on the Internet discussed general implementations, such as for a coffee shop or a to-do list.\nEven when I found some similar versions, the project wouldn\u0026rsquo;t compile.\nI made the decision to approach it my way, so here\u0026rsquo;s what I found out:\u003c/p\u003e\n\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAfter being stuck for two or more hours without understanding \u003ccode\u003ewhy, after tapping on a button, I wasn't able to receive a callback from it and the widget always opened the main iOS app\u003c/code\u003e, I realized that I forgot to add \u003ccode\u003eAppIntent\u003c/code\u003e - without it, you can\u0026rsquo;t handle actions for iOS 17.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eimport\u003c/span\u003e \u003cspan class=\"nc\"\u003eAppIntents\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eButtonIntent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppIntent\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eLocalizedStringResource\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ButtonIntent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eParameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eperform\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"kr\"\u003ethrows\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eIntentResult\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eplayPause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erawValue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eDataModel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshared\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisPlaying\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eAnother crucial point is not to forget to add an explicit \u003ccode\u003einit\u003c/code\u003e. If you don\u0026rsquo;t implement it explicitly, it will not work.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eimport\u003c/span\u003e \u003cspan class=\"nc\"\u003eAppIntents\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eButtonIntent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eAppIntent\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eLocalizedStringResource\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;ButtonIntent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eParameter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eperform\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"kr\"\u003ethrows\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eIntentResult\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eplayPause\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erawValue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eDataModel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshared\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisPlaying\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoggle\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eLastly, I attempted to add a \u003ccode\u003eSlider\u003c/code\u003e, but I found that it\u0026rsquo;s not supported by the widget. My solution was to choose a \u003ccode\u003eProgressView\u003c/code\u003e instead.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eYouTubeLockScreenWidget\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esome\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eVStack\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eSpacer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eProgressView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDataModel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshared\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentTime\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDataModel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshared\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etotalTime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprogressViewStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003elinear\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eSpacer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eHStack\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eForEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eallCases\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003eButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eintent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eButtonIntent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        \u003cspan class=\"n\"\u003eImage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esystemName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eimageSystemName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eisPlaying\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDataModel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshared\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisPlaying\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003efinal\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDataModel\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eshared\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDataModel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eisPlaying\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurrentTime\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTimeInterval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003etotalTime\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTimeInterval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e304\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCaseIterable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eprevious\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eplayPause\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIdentifiable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003erawValue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eimageSystemName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eisPlaying\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eplayPause\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eisPlaying\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;pause.fill\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;play.fill\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;forward.fill\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprevious\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;backward.fill\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI had not replaced default generated code when I was adding widget to the project.\nI just added \u003ccode\u003eYouTubeLockScreenWidget\u003c/code\u003e to generated \u003ccode\u003eVideoStreamingWidgetEntryView\u003c/code\u003e.\u003c/p\u003e","title":"Building Video Streaming Widget for iOS App"},{"content":"Introduction I was looking for a way to add a video player to my iOS app that could be able to play remote videos.\nCaveats Problem I found that you can\u0026rsquo;t open Vimeo or Youtube videos because of AVFoundationErrorDomain Code=-11850 \u0026quot;Operation Stopped\u0026quot; UserInfo={NSLocalizedFailureReason=The server is not correctly configured Domain=NSOSStatusErrorDomain Code=-12939 error. I don’t know exactly what this means, but I\u0026rsquo;m speculating it\u0026rsquo;s related to some protection.\nSolution My solution was to find another video that is not related to those platforms.\nImplementation AVKit has a built-in video player called VideoPlayer. All you need to play a video is to pass AVPlayer with videoURL.\n@ViewBuilder var fullScreenVideoPlayer: some View { let avPlayer = AVPlayer(url: videoURL) VideoPlayer(player: avPlayer) .edgesIgnoringSafeArea(.all) .onAppear { avPlayer.play() } } I will dive a little deeper with widgets in the next chapters.\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/building-video-streaming-ios-app/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was looking for a way to add a video player to my iOS app that could be able to play remote videos.\u003c/p\u003e\n\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\u003ch4 id=\"problem\"\u003eProblem\u003c/h4\u003e\n\u003cp\u003eI found that you can\u0026rsquo;t open \u003ccode\u003eVimeo\u003c/code\u003e or \u003ccode\u003eYoutube\u003c/code\u003e videos because of \u003ccode\u003eAVFoundationErrorDomain Code=-11850 \u0026quot;Operation Stopped\u0026quot; UserInfo={NSLocalizedFailureReason=The server is not correctly configured Domain=NSOSStatusErrorDomain Code=-12939\u003c/code\u003e error.\nI don’t know exactly what this means, but I\u0026rsquo;m speculating it\u0026rsquo;s related to some protection.\u003c/p\u003e\n\u003ch4 id=\"solution\"\u003eSolution\u003c/h4\u003e\n\u003cp\u003eMy solution was to find another video that is not related to those platforms.\u003c/p\u003e","title":"Building Video Streaming iOS App"},{"content":"Introduction I never had a chance to work with WebSockets, so I decided to take a look and create a group chat. Here\u0026rsquo;s what I discovered:\nTo be able to send and receive messages, you need to create an interface for communication between a server and your application. In my case, I chose sendMessage and receiveMessage methods. For the server-side, I chose Node.js. For the iOS application, I chose the Socket.IO library. Implementation Let’s dive deeper into the implementation.\nFirst step The first step would be to create a server.js file to be able to handle incoming events.\nconst express = require(\u0026#39;express\u0026#39;); const app = express(); const server = require(\u0026#39;http\u0026#39;).Server(app); const io = require(\u0026#39;socket.io\u0026#39;)(server); const { randomUUID } = require(\u0026#39;crypto\u0026#39;); const users = new Map(); io.on(\u0026#39;connection\u0026#39;, (socket) =\u0026gt; { let username = socket.handshake.auth.username; console.log(\u0026#39;a user connected\u0026#39;); users.set(socket.id, username); io.emit(\u0026#39;receiveNewUser\u0026#39;, username, Object.fromEntries(users)); socket.on(\u0026#39;sendMessage\u0026#39;, (message) =\u0026gt; { const username = users.get(socket.id); io.emit(\u0026#39;receiveMessage\u0026#39;, randomUUID(), username, message); }); socket.on(\u0026#39;disconnect\u0026#39;, () =\u0026gt; { console.log(\u0026#39;user disconnected\u0026#39;); users.delete(socket.id); }); }); server.listen(3000, () =\u0026gt; { console.log(\u0026#39;listening on *:3000\u0026#39;); }); Second step The next step would be creating a ChatService that will be responsible for connect, disconnect, send, and receive data.\nimport SocketIO final class ChatService { private var manager: SocketManager! private var socket: SocketIOClient! private var username: String! init() { manager = SocketManager(socketURL: URL(string: \u0026#34;http://localhost:3000\u0026#34;)!) socket = manager.defaultSocket } func connect(username: String) { self.username = username socket.connect(withPayload: [\u0026#34;username\u0026#34;: username]) } func disconnect() { socket.disconnect() } func sendMessage(_ message: String) { socket.emit(\u0026#34;sendMessage\u0026#34;, message) } func sendUsername(_ username: String) { socket.emit(\u0026#34;sendUsername\u0026#34;, username) } func receiveMessage(_ completion: @escaping (String, String, UUID) -\u0026gt; Void) { socket.on(\u0026#34;receiveMessage\u0026#34;) { data, _ in if let text = data[2] as? String, let id = data[0] as? String, let username = data[1] as? String { completion(username, text, UUID.init(uuidString: id) ?? UUID()) } } } func receiveNewUser(_ completion: @escaping (String, [String:String]) -\u0026gt; Void) { socket.on(\u0026#34;receiveNewUser\u0026#34;) { data, _ in if let username = data[0] as? String, let users = data[1] as? [String:String] { completion(username, users) } } } } Third step The next step would be creating a ViewModel communicating with the ChatService.\nimport Foundation final class ViewModel: ObservableObject { private let chatService: ChatService = ChatService() @Published var message: String = \u0026#34;\u0026#34; @Published var messages: [Message] = [] @Published var username: String = \u0026#34;\u0026#34; @Published var users: [String:String] = [:] @Published var newUser: String = \u0026#34;\u0026#34; @Published var showUsernamePrompt: Bool = true @Published var isShowingNewUserAlert = false } extension ViewModel { func connect() { chatService.connect(username: username) chatService.receiveMessage { username, text, id in self.receiveMessage(username: username, text: text, id: id) } chatService.receiveNewUser { username, users in self.receiveNewUser(username: username, users: users) } showUsernamePrompt = false } func sendMessage() { chatService.sendMessage(message) message = \u0026#34;\u0026#34; } func receiveMessage(username: String, text: String, id: UUID) { messages.append(Message(username: username, text: text, id: id)) } func receiveNewUser(username: String, users: [String:String]) { self.users = users self.newUser = username self.isShowingNewUserAlert = self.username != username } func disconnect() { chatService.disconnect() message = \u0026#34;\u0026#34; messages = [] username = \u0026#34;\u0026#34; users = [:] newUser = \u0026#34;\u0026#34; showUsernamePrompt = true isShowingNewUserAlert = false } } Fourth step The last step would be creating UI and connecting it with the ViewModel.\nimport SwiftUI struct ChatView: View { @StateObject private var viewModel = ViewModel() var body: some View { NavigationView { VStack { if viewModel.showUsernamePrompt { HStack { TextField(\u0026#34;Enter your username\u0026#34;, text: $viewModel.username) .textFieldStyle(RoundedBorderTextFieldStyle()) Button(action: viewModel.connect) { Text(\u0026#34;Connect\u0026#34;) } } .padding() } else { List { ForEach(viewModel.messages, id: \\.self) { message in HStack { if message.username == viewModel.username { Text(\u0026#34;Me:\u0026#34;) .font(.subheadline) .foregroundColor(.blue) } else { Text(\u0026#34;\\(message.username):\u0026#34;) .font(.subheadline) .foregroundColor(.green) } Text(message.text) } } } HStack { TextField(\u0026#34;Enter a message\u0026#34;, text: $viewModel.message) .textFieldStyle(RoundedBorderTextFieldStyle()) HStack { Button(action: viewModel.sendMessage) { Text(\u0026#34;Send\u0026#34;) } Button(action: viewModel.disconnect) { Text(\u0026#34;Disconnect\u0026#34;) } } } .padding() } } .navigationBarTitle(\u0026#34;Group Chat \\(viewModel.users.count \u0026gt; 0 ? \u0026#34;(\\(viewModel.users.count) connected)\u0026#34; : \u0026#34;\u0026#34;)\u0026#34;) .navigationBarTitleDisplayMode(.inline) .alert(\u0026#34;\\(viewModel.newUser) just joined the chat!\u0026#34;, isPresented: $viewModel.isShowingNewUserAlert) { Button(\u0026#34;OK\u0026#34;, role: .cancel) { viewModel.isShowingNewUserAlert = false } } } } } #Preview { ChatView() } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/building-group-chat-using-websockets/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI never had a chance to work with WebSockets, so I decided to take a look and create a group chat. Here\u0026rsquo;s what I discovered:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo be able to send and receive messages, you need to create an interface for communication between a server and your application. In my case, I chose \u003ccode\u003esendMessage\u003c/code\u003e and \u003ccode\u003ereceiveMessage\u003c/code\u003e methods.\u003c/li\u003e\n\u003cli\u003eFor the server-side, I chose \u003ccode\u003eNode.js\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor the iOS application, I chose the \u003ca href=\"https://github.com/socketio/socket.io-client-swift\"\u003eSocket.IO\u003c/a\u003e library.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eLet’s dive deeper into the implementation.\u003c/p\u003e","title":"Building Group Chat using WebSockets"},{"content":"Introduction I find myself fascinated by the idea of creating an app for visionOS where I could possibly display 3D AirPods that I like. Here are a few steps on how you can do the same:\nFirst step The first step that you need to do is to create a visionOS project.\nSecond step The next step would be adding a 3D object to Reality Composer Pro and exporting it as a .usdz file. You can download free 3D objects here. All you need to do to download content is to register on this site.\nThird step The final step would be adding code to display the 3D object. To do that, we need to add Model3D. It helps asynchronously load and display a 3D model.\nimport SwiftUI import RealityKit import RealityKitContent struct AirPodsMaxAnimation: View { var body: some View { NavigationStack { VStack { Model3D(named: \u0026#34;Airpods_Max_Pink\u0026#34;) { model in model .resizable() .aspectRatio(contentMode: .fit) .scaleEffect(0.5) .phaseAnimator([false, true]) { AirPodsMax, threeDYRotate in AirPodsMax .rotation3DEffect(.degrees(threeDYRotate ? 0 : -360 * 5), axis: (x: 0, y: 1, z: 0)) } animation: { threeDYRotate in .linear(duration: 25).repeatForever(autoreverses: false) } } placeholder: { ProgressView() } } .navigationTitle(\u0026#34;Airpods Max Pink\u0026#34;) } } } #Preview(windowStyle: .automatic) { AirPodsMaxAnimation() } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/exploring-visionos/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI find myself fascinated by the idea of creating an app for \u003ccode\u003evisionOS\u003c/code\u003e where I could possibly display 3D AirPods that I like.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3215a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3215a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.gif#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\nHere are a few steps on how you can do the same:\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst step\u003c/h3\u003e\n\u003cp\u003eThe first step that you need to do is to create a \u003ccode\u003evisionOS\u003c/code\u003e project.\u003c/p\u003e\n\u003ch3 id=\"second-step\"\u003eSecond step\u003c/h3\u003e\n\u003cp\u003eThe next step would be adding a 3D object to \u003ccode\u003eReality Composer Pro\u003c/code\u003e and exporting it as a \u003ccode\u003e.usdz\u003c/code\u003e file. You can download free 3D objects \u003ca href=\"https://sketchfab.com/feed\"\u003ehere\u003c/a\u003e. All you need to do to download content is to register on this site.\u003c/p\u003e","title":"Exploring visionOS"},{"content":"Introduction I was searching for an AR implementation of a 3D guitar inside an iOS app. Here\u0026rsquo;s what I discovered:\nFirst Step The first step is not related to building the app. Before that you need to create a project using the Reality Composer Pro app (you can find it through Spotlight search).\nSecond Step After that, you need to visit https://developer.apple.com/augmented-reality/quick-look/ and download one of the USDZ files. In my case, I chose the 3D guitar.\nThird Step Now, you can start diving into AR implementation inside the iOS project:\nYou need to add the Privacy - Camera Usage Description key to be able to use the camera Put your_file_name.usdz into the iOS project Create an ARViewRepresentable struct ARViewRepresentable: UIViewRepresentable { func makeUIView(context: Context) -\u0026gt; some ARView { let arView = ARView(frame: .zero) return arView } func updateUIView(_ uiView: UIViewType, context: Context) { } } Load, and anchor the 3D model func makeUIView(context: Context) -\u0026gt; some ARView { let arView = ARView(frame: .zero) // Load 3D model guard let guitarModelURL = Bundle.main.url(forResource: \u0026#34;fender_stratocaster\u0026#34;, withExtension: \u0026#34;usdz\u0026#34;) else { fatalError(\u0026#34;Failed to load model file.\u0026#34;) } let guitarModel = try! Entity.load(contentsOf: guitarModelURL) // Anchor 3D model let anchorEntity = AnchorEntity(.plane(.horizontal, classification: .any, minimumBounds: .zero)) anchorEntity.addChild(guitarModel) return arView } and finally add it to arView.scene func makeUIView(context: Context) -\u0026gt; some ARView { let arView = ARView(frame: .zero) // Load 3D model guard let guitarModelURL = Bundle.main.url(forResource: \u0026#34;fender_stratocaster\u0026#34;, withExtension: \u0026#34;usdz\u0026#34;) else { fatalError(\u0026#34;Failed to load model file.\u0026#34;) } let guitarModel = try! Entity.load(contentsOf: guitarModelURL) // Anchor 3D model let anchorEntity = AnchorEntity(.plane(.horizontal, classification: .any, minimumBounds: .zero)) anchorEntity.addChild(guitarModel) // Add anchor to scene arView.scene.addAnchor(anchorEntity) return arView } That\u0026rsquo;s it! Play and enjoy 😊\nThank you for reading! 😊 ","permalink":"http://localhost:1313/posts/ios-ar-app-experience-3d-guitar/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was searching for an AR implementation of a 3D guitar inside an iOS app. Here\u0026rsquo;s what I discovered:\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst Step\u003c/h3\u003e\n\u003cp\u003eThe first step is not related to building the app.\nBefore that you need to create a project using the \u003ccode\u003eReality Composer Pro\u003c/code\u003e app (you can find it through \u003ccode\u003eSpotlight search\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"second-step\"\u003eSecond Step\u003c/h3\u003e\n\u003cp\u003eAfter that, you need to visit \u003ca href=\"https://developer.apple.com/augmented-reality/quick-look/\"\u003ehttps://developer.apple.com/augmented-reality/quick-look/\u003c/a\u003e and download one of the \u003ccode\u003eUSDZ\u003c/code\u003e files.\nIn my case, I chose the \u003ca href=\"https://developer.apple.com/augmented-reality/quick-look/models/stratocaster/fender_stratocaster.usdz\"\u003e3D guitar\u003c/a\u003e.\u003c/p\u003e","title":"iOS AR App: Experience 3D Guitar"},{"content":"Introduction I was wondering about how to create movie recommendations, so I decided to take a closer look and find out more about this topic. This is what I found:\nFirst step: You need to create a JSON file with the data that you will use to train the model and define the parameters for training the model.\n[ { \u0026#34;title\u0026#34;: \u0026#34;Avatar\u0026#34;, \u0026#34;year\u0026#34;: \u0026#34;2009\u0026#34;, \u0026#34;rated\u0026#34;: \u0026#34;PG-13\u0026#34;, \u0026#34;released\u0026#34;: \u0026#34;18 Dec 2009\u0026#34;, \u0026#34;runtime\u0026#34;: \u0026#34;162 min\u0026#34;, \u0026#34;genre\u0026#34;: \u0026#34;Action, Adventure, Fantasy\u0026#34;, \u0026#34;director\u0026#34;: \u0026#34;James Cameron\u0026#34;, \u0026#34;writer\u0026#34;: \u0026#34;James Cameron\u0026#34;, \u0026#34;actors\u0026#34;: \u0026#34;Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\u0026#34;, \u0026#34;plot\u0026#34;: \u0026#34;A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;English, Spanish\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;USA, UK\u0026#34;, \u0026#34;awards\u0026#34;: \u0026#34;Won 3 Oscars. Another 80 wins \u0026amp; 121 nominations.\u0026#34;, \u0026#34;poster\u0026#34;: \u0026#34;https://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\u0026#34;, \u0026#34;metascore\u0026#34;: \u0026#34;83\u0026#34;, \u0026#34;imdbrating\u0026#34;: \u0026#34;7.9\u0026#34;, \u0026#34;imdbvotes\u0026#34;: \u0026#34;890,617\u0026#34;, \u0026#34;imdbid\u0026#34;: \u0026#34;tt0499549\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;movie\u0026#34;, \u0026#34;response\u0026#34;: \u0026#34;True\u0026#34;, \u0026#34;keywords\u0026#34;: [\u0026#34;alien\u0026#34;, \u0026#34;avatar\u0026#34;, \u0026#34;fantasy world\u0026#34;, \u0026#34;soldier\u0026#34;, \u0026#34;battle\u0026#34;] }, ] When you have created the data, you can proceed to the next step.\nCreating a model with parameters Creating a model with parameters is essential for training. As an example, I chose the following parameters to create more realistic recommendations: director, actors, language, country, metascore, IMDb rating, and IMDb votes.\nstruct Movie: Decodable { var id: String { return imdbid } let title: String let keywords: [String] let director: String let actors: String let language: String let country: String let poster: String let metascore: String let imdbrating: String let imdbvotes: String let imdbid: String } extension Movie: Identifiable, TextImageProviding { var url: URL { return URL(string: poster)! } } When you have created the model, you can proceed to the next step:\nCreating a Recommendations service In this step, it\u0026rsquo;s important to specify the ML model you\u0026rsquo;ll utilize. I chose the MLLinearRegressor model because linear regression computes an output value for a given input value. I selected \u0026lsquo;favorite\u0026rsquo; as the target column for this model to create predictions based on the films I like.\nimport Foundation import TabularData #if canImport(CreateML) import CreateML #endif final class RecommendationService { private let queue = DispatchQueue(label: \u0026#34;com.recommendation-service.queue\u0026#34;, qos: .userInitiated) func computeRecommendations(basedOn items: [FavoriteWrapper\u0026lt;Movie\u0026gt;]) async throws -\u0026gt; [Movie] { return try await withCheckedThrowingContinuation { continuation in queue.async { #if targetEnvironment(simulator) continuation.resume(throwing: NSError(domain: \u0026#34;Simulator Not Supported\u0026#34;, code: -1)) #else let trainingData = items.filter { $0.isFavorite != nil } let trainingDataFrame = self.dataFrame(for: trainingData) let testData = items let testDataFrame = self.dataFrame(for: testData) do { let regressor = try MLLinearRegressor(trainingData: trainingDataFrame, targetColumn: \u0026#34;favorite\u0026#34;) let predictionsColumn = (try regressor.predictions(from: testDataFrame)).compactMap { value in value as? Double } let sorted = zip(testData, predictionsColumn) .sorted { lhs, rhs -\u0026gt; Bool in lhs.1 \u0026gt; rhs.1 } .filter { $0.1 \u0026gt; 0 } .prefix(10) print(sorted.map(\\.1)) let result = sorted.map(\\.0.model) continuation.resume(returning: result) } catch { continuation.resume(throwing: error) } #endif } } } private func dataFrame(for data: [FavoriteWrapper\u0026lt;Movie\u0026gt;]) -\u0026gt; DataFrame { var dataFrame = DataFrame() dataFrame.append( column: Column(name: \u0026#34;keywords\u0026#34;, contents: data.flatMap(\\.model.keywords).joined(separator: \u0026#34;, \u0026#34;)) ) dataFrame.append( column: Column(name: \u0026#34;director\u0026#34;, contents: data.map(\\.model.director)) ) dataFrame.append( column: Column(name: \u0026#34;actors\u0026#34;, contents: data.map(\\.model.actors)) ) dataFrame.append( column: Column(name: \u0026#34;language\u0026#34;, contents: data.map(\\.model.language)) ) dataFrame.append( column: Column(name: \u0026#34;country\u0026#34;, contents: data.map(\\.model.country)) ) dataFrame.append( column: Column\u0026lt;Int\u0026gt;( name: \u0026#34;metascore\u0026#34;, contents: data.map { return Int($0.model.metascore) } ) ) dataFrame.append( column: Column\u0026lt;Double\u0026gt;( name: \u0026#34;imdbrating\u0026#34;, contents: data.map { return Double($0.model.imdbrating) } ) ) dataFrame.append( column: Column(name: \u0026#34;imdbvotes\u0026#34;, contents: data.map(\\.model.imdbvotes)) ) dataFrame.append( column: Column\u0026lt;Int\u0026gt;( name: \u0026#34;favorite\u0026#34;, contents: data.map { if let isFavorite = $0.isFavorite { return isFavorite ? 1 : -1 } else { return 0 } } ) ) return dataFrame } } Once you\u0026rsquo;ve finished with the ML part, proceed to the next step:\nCreating a ViewModel to assemble all components At this stage, you handle user input and recompute recommendations based on user input.\n@MainActor final class MainViewModel: ObservableObject { private var allMovies: [FavoriteWrapper\u0026lt;Movie\u0026gt;] = [] @Published private(set) var movies: [Movie] = [] @Published private(set) var recommendations: [Movie] = [] private let recommendationService: RecommendationService private var recommendationsTask: Task\u0026lt;Void, Never\u0026gt;? init(recommendationService: RecommendationService = RecommendationService()) { self.recommendationService = recommendationService } func loadAllMovies() async { guard let url = Bundle.main.url(forResource: \u0026#34;movies\u0026#34;, withExtension: \u0026#34;json\u0026#34;) else { return } do { let data = try Data(contentsOf: url) allMovies = (try JSONDecoder().decode([Movie].self, from: data)).shuffled().map { FavoriteWrapper(model: $0) } movies = allMovies.map(\\.model) } catch { print(error.localizedDescription) } } func didRemove(_ item: Movie, isLiked: Bool) { movies.removeAll { $0.id == item.id } if let index = allMovies.firstIndex(where: { $0.model.id == item.id }) { allMovies[index] = FavoriteWrapper(model: item, isFavorite: isLiked) } recommendationsTask?.cancel() recommendationsTask = Task { do { let result = try await recommendationService.computeRecommendations(basedOn: allMovies) if !Task.isCancelled { recommendations = result } } catch { print(error.localizedDescription) } } } func resetUserChoices() { movies = allMovies.map(\\.model) recommendations = [] } } The final step The final step is to create the UI and connect it with the ViewModel.\nimport SwiftUI struct ContentView: View { @StateObject private var viewModel: MainViewModel init() { _viewModel = StateObject(wrappedValue: MainViewModel()) } var body: some View { NavigationView { ScrollView { VStack(alignment: .leading) { SectionTitleView(text: \u0026#34;Swipe to Like or Dislike\u0026#34;) if viewModel.movies.isEmpty { HStack { Spacer() VStack { Text(\u0026#34;All Done!\u0026#34;) .multilineTextAlignment(.center) .font(.callout) .foregroundColor(.secondary) Button(\u0026#34;Try Again\u0026#34;) { withAnimation { viewModel.resetUserChoices() } } .font(.headline) .buttonStyle(.borderedProminent) } Spacer() } .padding(.horizontal) .padding(.vertical, 32) } else { CardsStackView(models: viewModel.movies) { item, isLiked in withAnimation(.spring()) { viewModel.didRemove(item, isLiked: isLiked) } } .zIndex(1) } RecommendationsView(recommendations: viewModel.recommendations) } } .navigationTitle(\u0026#34;Tmovie´inder!\u0026#34;) .task { await viewModel.loadAllMovies() } } .navigationViewStyle(.stack) } } Resources 🔗 GitHub project 📥 Download materials Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/building-movie-recommendations-using-ml/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eI was wondering about how to create movie recommendations, so I decided to take a closer look and find out more about this topic. This is what I found:\u003c/p\u003e\n\u003ch3 id=\"first-step\"\u003eFirst step:\u003c/h3\u003e\n\u003cp\u003eYou need to create a JSON file with the data that you will use to train the model and define the parameters for training the model.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Avatar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;year\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;2009\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;rated\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;PG-13\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;released\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;18 Dec 2009\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;162 min\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;genre\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Action, Adventure, Fantasy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;director\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;James Cameron\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;writer\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;James Cameron\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;actors\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;plot\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;language\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;English, Spanish\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;country\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;USA, UK\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;awards\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Won 3 Oscars. Another 80 wins \u0026amp; 121 nominations.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;poster\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;metascore\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;83\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;imdbrating\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;7.9\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;imdbvotes\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;890,617\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;imdbid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;tt0499549\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;movie\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;response\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;True\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;keywords\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;alien\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;avatar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;fantasy world\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;soldier\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;battle\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen you have created the data, you can proceed to the next step.\u003c/p\u003e","title":"Building movie recommendations using ML"},{"content":"Introduction If you\u0026rsquo;re wondering how to test an Xcode project using GitHub Actions, here are a few steps:\nFirst, you need to create a .github/workflows folder with a CI.yml file inside your project directory. Next, you need to add configuration to the CI.yml file. name: CI on: push: branches: - main jobs: build: runs-on: macos-14 steps: - name: Checkout code uses: actions/checkout@v4 - name: Set up Xcode version run: sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer - name: Install xcpretty run: gem install xcpretty - name: Test project run: xcodebuild -project /Users/runner/work/YourProjectName/YourProjectName/YourProjectName/YourProjectName.xcodeproj -scheme YourSchemeName -destination \u0026#39;platform=iOS Simulator,OS=17.4,name=iPhone 15 Pro\u0026#39; clean build test | xcpretty Caveats If you don\u0026rsquo;t specify the path to the Xcode project, you will receive an error like this: xcodebuild: error: ‘YourProjectName.xcodeproj' does not exist.\nYou can debug project directory by adding this line to your config:\n- name: Debug Directory Contents run: ls -la /Users/runner/work/YourProjectName/YourProjectName Thank you for reading!\n","permalink":"http://localhost:1313/posts/testing-xcode-project-using-github-actions/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIf you\u0026rsquo;re wondering how to test an Xcode project using GitHub Actions, here are a few steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst, you need to create a \u003ccode\u003e.github/workflows\u003c/code\u003e folder with a \u003ccode\u003eCI.yml\u003c/code\u003e file inside your project directory.\u003c/li\u003e\n\u003cli\u003eNext, you need to add configuration to the \u003ccode\u003eCI.yml\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eCI\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ebranches\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"l\"\u003emain\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eruns-on\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003emacos-14\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003esteps\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eCheckout code\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003euses\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eactions/checkout@v4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eSet up Xcode version\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003esudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eInstall xcpretty\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003egem install xcpretty\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eTest project\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003excodebuild -project /Users/runner/work/YourProjectName/YourProjectName/YourProjectName/YourProjectName.xcodeproj -scheme YourSchemeName -destination \u0026#39;platform=iOS Simulator,OS=17.4,name=iPhone 15 Pro\u0026#39; clean build test | xcpretty      \u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\u003cp\u003eIf you don\u0026rsquo;t specify the path to the Xcode project, you will receive an error like this: \u003ccode\u003excodebuild: error: ‘YourProjectName.xcodeproj' does not exist\u003c/code\u003e.\u003c/p\u003e","title":"Testing Xcode project using Github Actions"},{"content":"Introduction If you\u0026rsquo;re wondering how to build an Xcode project using GitHub Actions, here are a few steps:\nFirst, you need to create a .github/workflows folder with a CI.yml file inside your project directory. Next, you need to add configuration to the CI.yml file. name: CI on: push: branches: - main jobs: build: runs-on: macos-14 steps: - name: Checkout code uses: actions/checkout@v4 - name: Set up Xcode version run: sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer - name: Install xcpretty run: gem install xcpretty - name: Build project run: xcodebuild -project /Users/runner/work/YourProjectName/YourProjectName/YourProjectName/YourProjectName.xcodeproj -scheme YourSchemeName -sdk iphonesimulator -destination \u0026#39;platform=iOS Simulator,name=iPhone 15 Pro\u0026#39; clean build | xcpretty Caveats If you don\u0026rsquo;t specify the path to the Xcode project, you will receive an error like this: xcodebuild: error: ‘YourProjectName.xcodeproj' does not exist.\nYou can debug project directory by adding this line to your config:\n- name: Debug Directory Contents run: ls -la /Users/runner/work/YourProjectName/YourProjectName Thank you for reading!\n","permalink":"http://localhost:1313/posts/building-xcode-project-using-github-actions/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIf you\u0026rsquo;re wondering how to build an Xcode project using GitHub Actions, here are a few steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst, you need to create a \u003ccode\u003e.github/workflows\u003c/code\u003e folder with a \u003ccode\u003eCI.yml\u003c/code\u003e file inside your project directory.\u003c/li\u003e\n\u003cli\u003eNext, you need to add configuration to the \u003ccode\u003eCI.yml\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eCI\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ebranches\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"l\"\u003emain\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eruns-on\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003emacos-14\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003esteps\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eCheckout code\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003euses\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eactions/checkout@v4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eSet up Xcode version\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003esudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eInstall xcpretty\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003egem install xcpretty\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eBuild project\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003excodebuild -project /Users/runner/work/YourProjectName/YourProjectName/YourProjectName/YourProjectName.xcodeproj -scheme YourSchemeName -sdk iphonesimulator -destination \u0026#39;platform=iOS Simulator,name=iPhone 15 Pro\u0026#39; clean build | xcpretty\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\u003cp\u003eIf you don\u0026rsquo;t specify the path to the Xcode project, you will receive an error like this: \u003ccode\u003excodebuild: error: ‘YourProjectName.xcodeproj' does not exist\u003c/code\u003e.\u003c/p\u003e","title":"Building Xcode project using Github Actions"},{"content":"Introduction You can easily deliver an iOS app in two ways: through beta and release lanes.\nThe First Way - TestFlight By creating a beta lane inside the Fastfile. It utilizes:\nbuild_app: To easily build and sign your app (via gym). pilot: Makes it easier to manage your app on Apple’s TestFlight. lane :beta do build_app(scheme: \u0026#34;YourScheme\u0026#34;) pilot end To run Fastlane:\nfastlane beta Attention Before proceeding, you need to have the ipa or pkg file generated.\nThe Second Way - App Store Connect By creating a release lane inside the Fastfile. It utilizes:\ngym: To build and package iOS apps for you. deliver: To upload screenshots, metadata, and binaries to App Store Connect. lane :release do gym # Builds the app deliver # Uploads the app to App Store Connect end To run Fastlane:\nfastlane release If you haven\u0026rsquo;t installed Fastlane yet, here are the steps: Outline of the Process\nInstall Fastlane: You can do so using RubyGems, which is the Ruby package manager: brew install fastlane Navigate to Project Directory: Open Terminal and navigate to the directory containing your Xcode project. Initialize Fastlane (Optional): If you haven\u0026rsquo;t initialized Fastlane in your project yet, you can do so by running: fastlane init ","permalink":"http://localhost:1313/posts/delivering-ios-app-using-fastlane/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eYou can easily deliver an iOS app in two ways: through \u003ccode\u003ebeta\u003c/code\u003e and \u003ccode\u003erelease\u003c/code\u003e lanes.\u003c/p\u003e\n\u003ch3 id=\"the-first-way---testflight\"\u003eThe First Way - TestFlight\u003c/h3\u003e\n\u003cp\u003eBy creating a \u003ccode\u003ebeta\u003c/code\u003e \u003ccode\u003elane\u003c/code\u003e inside the \u003ccode\u003eFastfile\u003c/code\u003e. It utilizes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebuild_app\u003c/code\u003e: To easily build and sign your app (via \u003ccode\u003egym\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epilot\u003c/code\u003e: Makes it easier to manage your app on Apple’s \u003ccode\u003eTestFlight\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003elane\u003c/span\u003e \u003cspan class=\"ss\"\u003e:beta\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003ebuild_app\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003escheme\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;YourScheme\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003epilot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo run Fastlane:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efastlane beta\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"attention\"\u003eAttention\u003c/h3\u003e\n\u003cp\u003eBefore proceeding, you need to have the \u003ccode\u003eipa\u003c/code\u003e or \u003ccode\u003epkg\u003c/code\u003e file generated.\u003c/p\u003e","title":"Delivering iOS app using Fastlane"},{"content":"Introduction When you are working on different projects sometimes you need to use different IDE’s. You need to find a way to archive a project in the fastest way.\nOne of such ways is by using the xcodebuild archive command Basic outline of the process Open Terminal: Open the Terminal application on your Mac. Navigate to Project Directory: Use the cd command to navigate to the directory containing your Xcode project. Run xcodebuild archive: Once you\u0026rsquo;re in the project directory, you can run xcodebuild archive with the appropriate parameters to build your project. Example: xcodebuild archive -scheme YourSchemeName -archivePath ~/Desktop/YourAppName.xcarchive Another way is by integrating fastlane into your workflow: Outline of the process Install Fastlane: If you haven\u0026rsquo;t already installed Fastlane, you can do so using RubyGems, which is the Ruby package manager:\nbrew install fastlane Navigate to Project Directory: Open Terminal and navigate to the directory containing your Xcode project. Initialize Fastlane (Optional): If you haven\u0026rsquo;t initialized Fastlane in your project yet, you can do so by running:\nfastlane init Create a lane for archiving: Open your Fastfile located in the fastlane directory of your project, and add a new lane for archiving:\nlane :archive do gym( scheme: \u0026#34;YourSchemeName\u0026#34;, output_directory: \u0026#34;/path/to/your/archive/directory\u0026#34;, output_name: \u0026#34;YourAppName\u0026#34; ) end Run the archive lane: Once you\u0026rsquo;ve defined the archive lane, you can run it using the following command:\nfastlane archive ","permalink":"http://localhost:1313/posts/archiving-xcode-project-using-the-cli/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eWhen you are working on different projects  sometimes  you need to use different  IDE’s. You need to find a way to archive a project in the fastest way.\u003c/p\u003e\n\u003ch3 id=\"one-of-such-ways-is-by-using-the-xcodebuild-archive-command\"\u003eOne of such ways is by using the \u003ccode\u003excodebuild archive\u003c/code\u003e command\u003c/h3\u003e\n\u003ch4 id=\"basic-outline-of-the-process\"\u003eBasic outline of the process\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOpen Terminal\u003c/strong\u003e: Open the Terminal application on your Mac.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNavigate to Project Directory\u003c/strong\u003e: Use the cd command to navigate to the directory containing your Xcode project.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRun\u003c/strong\u003e \u003ccode\u003excodebuild archive\u003c/code\u003e: Once you\u0026rsquo;re in the project directory, you can run \u003ccode\u003excodebuild archive\u003c/code\u003e with the appropriate parameters to build your project.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"example\"\u003eExample:\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003excodebuild archive -scheme YourSchemeName -archivePath ~/Desktop/YourAppName.xcarchive\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"another-way-is-by-integrating-fastlane-into-your-workflow\"\u003eAnother way is by integrating \u003ca href=\"https://fastlane.tools/\"\u003efastlane\u003c/a\u003e into your workflow:\u003c/h3\u003e\n\u003ch4 id=\"outline-of-the-process\"\u003eOutline of the process\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eInstall Fastlane\u003c/strong\u003e: If you haven\u0026rsquo;t already installed Fastlane, you can do so using RubyGems, which is the Ruby package manager:\u003c/p\u003e","title":"Archiving Xcode project using the CLI"},{"content":"Introduction When you are working on different projects sometimes you need to use different IDE’s. You need to find a way to test a project in the fastest way.\nOne of such ways is by using the xcodebuild command Basic outline of the process Open Terminal: Open the Terminal application on your Mac. Navigate to Project Directory: Use the cd command to navigate to the directory containing your Xcode project. Run xcodebuild: Once you\u0026rsquo;re in the project directory, you can run xcodebuild with the appropriate parameters to build your project. Example: xcodebuild -project YourProject.xcodeproj -scheme YourSchemeName test Another way is by integrating fastlane into your workflow: Outline of the process Install Fastlane: If you haven\u0026rsquo;t already installed Fastlane, you can do so using RubyGems, which is the Ruby package manager:\nbrew install fastlane Navigate to Project Directory: Open Terminal and navigate to the directory containing your Xcode project. Initialize Fastlane (Optional): If you haven\u0026rsquo;t initialized Fastlane in your project yet, you can do so by running:\nfastlane init Define a Lane for Testing: Open your Fastfile and define a lane for running tests. Here\u0026rsquo;s a basic example:\nlane :run_tests do scan(scheme: \u0026#34;YourSchemeName\u0026#34;) end Run Tests Using Fastlane: You can now run your tests using the lane you defined. In the terminal, navigate to your project directory and run:\nfastlane run_tests Testing a project through a project generation tools If you are testing a project through a project generation tool like tuist you do not need anything that was mentioned above because it already has build-in commands:\ntuist test YourSchemeName ","permalink":"http://localhost:1313/posts/testing-xcode-project-using-the-cli/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eWhen you are working on different projects  sometimes  you need to use different  IDE’s. You need to find a way to test a project in the fastest way.\u003c/p\u003e\n\u003ch3 id=\"one-of-such-ways-is-by-using-the-xcodebuild-command\"\u003eOne of such ways is by using the \u003ccode\u003excodebuild\u003c/code\u003e command\u003c/h3\u003e\n\u003ch4 id=\"basic-outline-of-the-process\"\u003eBasic outline of the process\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOpen Terminal\u003c/strong\u003e: Open the Terminal application on your Mac.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNavigate to Project Directory\u003c/strong\u003e: Use the cd command to navigate to the directory containing your Xcode project.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRun\u003c/strong\u003e \u003ccode\u003excodebuild\u003c/code\u003e: Once you\u0026rsquo;re in the project directory, you can run \u003ccode\u003excodebuild\u003c/code\u003e with the appropriate parameters to build your project.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"example\"\u003eExample:\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003excodebuild -project YourProject.xcodeproj -scheme YourSchemeName \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"another-way-is-by-integrating-fastlane-into-your-workflow\"\u003eAnother way is by integrating \u003ca href=\"https://fastlane.tools/\"\u003efastlane\u003c/a\u003e into your workflow:\u003c/h3\u003e\n\u003ch4 id=\"outline-of-the-process\"\u003eOutline of the process\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eInstall Fastlane\u003c/strong\u003e: If you haven\u0026rsquo;t already installed Fastlane, you can do so using RubyGems, which is the Ruby package manager:\u003c/p\u003e","title":"Testing Xcode project using the CLI"},{"content":"Introduction When you are working on different projects sometimes you need to use different IDE’s. You need to find a way to build a project in the fastest way.\nOne of such ways is by using the xcodebuild command Basic outline of the process Open Terminal: Open the Terminal application on your Mac. Navigate to Project Directory: Use the cd command to navigate to the directory containing your Xcode project. Run xcodebuild: Once you\u0026rsquo;re in the project directory, you can run xcodebuild with the appropriate parameters to build your project. Example: xcodebuild -project YourProjectName.xcodeproj -scheme YourSchemeName Another way is by integrating fastlane into your workflow: Outline of the process Install Fastlane: If you haven\u0026rsquo;t already installed Fastlane, you can do so using RubyGems, which is the Ruby package manager:\nbrew install fastlane Navigate to Project Directory: Open Terminal and navigate to the directory containing your Xcode project. Initialize Fastlane (Optional): If you haven\u0026rsquo;t initialized Fastlane in your project yet, you can do so by running:\nfastlane init Build with Fastlane: Once Fastlane is set up, you can use it to build your Xcode project. Fastlane provides a lane named build_app for building your app. You can run this lane with the following command:\nfastlane build_app Building a project through a project generation tools If you are building a project through a project generation tool like tuist you do not need anything that was mentioned above because it already has build-in commands tuist build.\n","permalink":"http://localhost:1313/posts/building-xcode-project-using-the-cli/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eWhen you are working on different projects  sometimes  you need to use different  IDE’s. You need to find a way to build a project in the fastest way.\u003c/p\u003e\n\u003ch3 id=\"one-of-such-ways-is-by-using-the-xcodebuild-command\"\u003eOne of such ways is by using the \u003ccode\u003excodebuild\u003c/code\u003e command\u003c/h3\u003e\n\u003ch4 id=\"basic-outline-of-the-process\"\u003eBasic outline of the process\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOpen Terminal\u003c/strong\u003e: Open the Terminal application on your Mac.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNavigate to Project Directory\u003c/strong\u003e: Use the cd command to navigate to the directory containing your Xcode project.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRun\u003c/strong\u003e \u003ccode\u003excodebuild\u003c/code\u003e: Once you\u0026rsquo;re in the project directory, you can run \u003ccode\u003excodebuild\u003c/code\u003e with the appropriate parameters to build your project.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"example\"\u003eExample:\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003excodebuild -project YourProjectName.xcodeproj -scheme YourSchemeName\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"another-way-is-by-integrating-fastlane-into-your-workflow\"\u003eAnother way is by integrating \u003ca href=\"https://fastlane.tools/\"\u003efastlane\u003c/a\u003e into your workflow:\u003c/h3\u003e\n\u003ch4 id=\"outline-of-the-process\"\u003eOutline of the process\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eInstall Fastlane\u003c/strong\u003e: If you haven\u0026rsquo;t already installed Fastlane, you can do so using RubyGems, which is the Ruby package manager:\u003c/p\u003e","title":"Building Xcode project using the CLI"},{"content":"What is a Visitor Pattern? The Visitor Pattern helps add new capabilities to a composite of objects.\nSource\nWhat problems does it solve? The Visitor Pattern helps solve following problems:\nSeparation of Concerns: The Visitor Pattern separates algorithms from the objects on which they operate. This allows for clean code organization by keeping algorithms and operations separate from the data structures they operate on. Extensibility: It allows you to add new operations to existing object structures without modifying those structures. This is especially useful when dealing with complex object hierarchies where adding new functionality directly to the classes would lead to code bloat and tight coupling. Traversal of Object Structures: It provides a way to traverse complex object structures while performing some action on each element of the structure. This is particularly useful in scenarios where you need to process every element of a data structure in a specific order or with a specific algorithm. Real-world code example // Element protocol representing the items on the menu protocol MenuItem { func accept(visitor: OrderVisitor) } // Concrete item types class Coffee: MenuItem { let name: String let price: Double init(name: String, price: Double) { self.name = name self.price = price } func accept(visitor: OrderVisitor) { visitor.visit(self) } } class Tea: MenuItem { let name: String let price: Double init(name: String, price: Double) { self.name = name self.price = price } func accept(visitor: OrderVisitor) { visitor.visit(self) } } class Pastry: MenuItem { let name: String let price: Double init(name: String, price: Double) { self.name = name self.price = price } func accept(visitor: OrderVisitor) { visitor.visit(self) } } // Visitor protocol defining the operations to be performed on menu items protocol OrderVisitor { func visit(_ item: Coffee) func visit(_ item: Tea) func visit(_ item: Pastry) } // Concrete visitor implementing operations on menu items class TotalCostVisitor: OrderVisitor { var totalCost = 0.0 func visit(_ item: Coffee) { totalCost += item.price } func visit(_ item: Tea) { totalCost += item.price } func visit(_ item: Pastry) { totalCost += item.price } } class ItemDetailsVisitor: OrderVisitor { var details = \u0026#34;\u0026#34; func visit(_ item: Coffee) { details += \u0026#34;Coffee: \\(item.name), Price: $\\(item.price)\\n\u0026#34; } func visit(_ item: Tea) { details += \u0026#34;Tea: \\(item.name), Price: $\\(item.price)\\n\u0026#34; } func visit(_ item: Pastry) { details += \u0026#34;Pastry: \\(item.name), Price: $\\(item.price)\\n\u0026#34; } } // Example usage let items: [MenuItem] = [Coffee(name: \u0026#34;Espresso\u0026#34;, price: 2.5), Tea(name: \u0026#34;Green Tea\u0026#34;, price: 2.0), Pastry(name: \u0026#34;Croissant\u0026#34;, price: 3.0)] let totalCostVisitor = TotalCostVisitor() for item in items { item.accept(visitor: totalCostVisitor) } print(\u0026#34;Total cost of the order: $\\(totalCostVisitor.totalCost)\u0026#34;) let itemDetailsVisitor = ItemDetailsVisitor() for item in items { item.accept(visitor: itemDetailsVisitor) } print(\u0026#34;Order details:\u0026#34;) print(itemDetailsVisitor.details) ","permalink":"http://localhost:1313/posts/the-visitor-pattern/","summary":"\u003ch3 id=\"what-is-a-visitor-pattern\"\u003eWhat is a Visitor Pattern?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Visitor Pattern helps add new capabilities to a composite of objects.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3a9c2\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3a9c2\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Visitor_pattern#/media/File:Visitor_design_pattern.svg\"\u003eSource\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cp\u003eThe Visitor Pattern helps solve following problems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSeparation of Concerns\u003c/strong\u003e: The Visitor Pattern separates algorithms from the objects on which they operate. This allows for clean code organization by keeping algorithms and operations separate from the data structures they operate on.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExtensibility\u003c/strong\u003e: It allows you to add new operations to existing object structures without modifying those structures. This is especially useful when dealing with complex object hierarchies where adding new functionality directly to the classes would lead to code bloat and tight coupling.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTraversal of Object Structures\u003c/strong\u003e: It provides a way to traverse complex object structures while performing some action on each element of the structure. This is particularly useful in scenarios where you need to process every element of a data structure in a specific order or with a specific algorithm.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Element protocol representing the items on the menu\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eMenuItem\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete item types\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMenuItem\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTea\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMenuItem\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePastry\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMenuItem\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Visitor protocol defining the operations to be performed on menu items\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eOrderVisitor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePastry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete visitor implementing operations on menu items\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTotalCostVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderVisitor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003etotalCost\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etotalCost\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etotalCost\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePastry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etotalCost\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eItemDetailsVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderVisitor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edetails\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edetails\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Coffee: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e, Price: $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edetails\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Tea: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e, Price: $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePastry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edetails\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Pastry: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e, Price: $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Example usage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eMenuItem\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eCoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Espresso\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eTea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Green Tea\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.0\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ePastry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Croissant\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etotalCostVisitor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTotalCostVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etotalCostVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Total cost of the order: $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003etotalCostVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etotalCost\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eitemDetailsVisitor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eItemDetailsVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eitemDetailsVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Order details:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eitemDetailsVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"The Visitor Pattern"},{"content":"What is a Memento Pattern? The Memento Pattern helps return an object to one of its previous states; for instance, if the user requests an “undo” operation.\nSource\nWhat problems does it solve? The Memento Pattern helps solve following problems:\nUndo/Redo Functionality: Memento allows you to capture an object’s state at a specific point in time and store it externally. This enables you to implement undo/redo functionality by restoring the object to its previous state. Checkpointing: In applications where users need to save progress or create checkpoints (such as in games or long processes), the Memento Pattern allows you to save the state of an object at various intervals so that users can return to those points later. Real-world code example // Memento: Represents the state of the TextEditor struct TextEditorMemento { let text: String } // Originator: Creates and stores states in Memento objects class TextEditor { private var text: String = \u0026#34;\u0026#34; func setText(_ text: String) { self.text = text } func getText() -\u0026gt; String { return text } func save() -\u0026gt; TextEditorMemento { return TextEditorMemento(text: text) } func restore(fromMemento memento: TextEditorMemento) { self.text = memento.text } } // Caretaker: Manages the mementos class TextEditorHistory { private var history: [TextEditorMemento] = [] private let editor: TextEditor init(editor: TextEditor) { self.editor = editor } func save() { let snapshot = editor.save() history.append(snapshot) } func undo() { guard let lastSnapshot = history.popLast() else { print(\u0026#34;Nothing to undo.\u0026#34;) return } editor.restore(fromMemento: lastSnapshot) } func printHistory() { print(\u0026#34;Text Editor History:\u0026#34;) for (index, snapshot) in history.enumerated() { print(\u0026#34;Step \\(index + 1): \\(snapshot.text)\u0026#34;) } print(\u0026#34;Current text: \\(editor.getText())\u0026#34;) } } // Example usage let textEditor = TextEditor() let history = TextEditorHistory(editor: textEditor) textEditor.setText(\u0026#34;Hello, World!\u0026#34;) history.save() textEditor.setText(\u0026#34;This is a Swift example.\u0026#34;) history.save() textEditor.setText(\u0026#34;Using Memento Pattern.\u0026#34;) history.save() history.printHistory() history.undo() print(\u0026#34;After Undo:\u0026#34;) history.printHistory() Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/the-memento-pattern/","summary":"\u003ch3 id=\"what-is-a-memento-pattern\"\u003eWhat is a Memento Pattern?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Memento Pattern helps return an object to one of its previous states; for instance, if the user requests an “undo” operation.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://www.learncsdesign.com/learn-the-memento-design-pattern/\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cp\u003eThe Memento Pattern helps solve following problems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUndo/Redo Functionality\u003c/strong\u003e: Memento allows you to capture an object’s state at a specific point in time and store it externally. This enables you to implement undo/redo functionality by restoring the object to its previous state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCheckpointing\u003c/strong\u003e: In applications where users need to save progress or create checkpoints (such as in games or long processes), the Memento Pattern allows you to save the state of an object at various intervals so that users can return to those points later.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Memento: Represents the state of the TextEditor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eTextEditorMemento\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Originator: Creates and stores states in Memento objects\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTextEditor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esetText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003egetText\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditorMemento\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditorMemento\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003erestore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efromMemento\u003c/span\u003e \u003cspan class=\"n\"\u003ememento\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditorMemento\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ememento\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Caretaker: Manages the mementos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTextEditorHistory\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTextEditorMemento\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eeditor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeditor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeditor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eeditor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esnapshot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eeditor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esnapshot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eundo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003elastSnapshot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epopLast\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Nothing to undo.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eeditor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erestore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efromMemento\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elastSnapshot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eprintHistory\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Text Editor History:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esnapshot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenumerated\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Step \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003esnapshot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Current text: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eeditor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetText\u003c/span\u003e\u003cspan class=\"si\"\u003e())\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Example usage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etextEditor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditor\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ehistory\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTextEditorHistory\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eeditor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etextEditor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etextEditor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etextEditor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;This is a Swift example.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003etextEditor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetText\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Using Memento Pattern.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintHistory\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eundo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;After Undo:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehistory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprintHistory\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"The Memento Pattern"},{"content":"What is an Interpreter Pattern? The Interpreter Pattern helps implement a simple language and defines a class based representation for its grammar along with an interpreter to interpret its sentences.\nSource\nWhat problems does it solve? The Interpreter Pattern helps solve following problems:\nLanguage Interpretation: When you have a language or syntax that needs to be interpreted, such as mathematical expressions, regular expressions, or domain-specific languages (DSLs), the Interpreter Pattern helps in implementing the logic to interpret and execute these expressions. Extensibility: The Interpreter Pattern allows for easy addition of new grammar rules or language constructs without modifying the core interpreter logic. This promotes extensibility, enabling the interpreter to support new features or languages with minimal changes. Separation of Concerns: It separates the grammar definition from the interpretation logic. This separation of concerns makes the codebase modular and easier to maintain. Changes to the grammar or language rules do not affect the interpretation logic, and vice versa. Real-world code example // Define the protocol for the expression protocol Expression { func interpret() -\u0026gt; Int } // Concrete expression for a number class NumberExpression: Expression { private var value: Int init(_ value: Int) { self.value = value } func interpret() -\u0026gt; Int { return value } } // Concrete expression for addition class AdditionExpression: Expression { private var left: Expression private var right: Expression init(_ left: Expression, _ right: Expression) { self.left = left self.right = right } func interpret() -\u0026gt; Int { return left.interpret() + right.interpret() } } // Concrete expression for subtraction class SubtractionExpression: Expression { private var left: Expression private var right: Expression init(_ left: Expression, _ right: Expression) { self.left = left self.right = right } func interpret() -\u0026gt; Int { return left.interpret() - right.interpret() } } // Concrete expression for multiplication class MultiplicationExpression: Expression { private var left: Expression private var right: Expression init(_ left: Expression, _ right: Expression) { self.left = left self.right = right } func interpret() -\u0026gt; Int { return left.interpret() * right.interpret() } } // Concrete expression for division class DivisionExpression: Expression { private var left: Expression private var right: Expression init(_ left: Expression, _ right: Expression) { self.left = left self.right = right } func interpret() -\u0026gt; Int { let divisor = right.interpret() if divisor != 0 { return left.interpret() / divisor } else { // Handle division by zero error fatalError(\u0026#34;Division by zero\u0026#34;) } } } // Usage let expression = AdditionExpression( MultiplicationExpression(NumberExpression(2), NumberExpression(3)), DivisionExpression(NumberExpression(10), NumberExpression(5)) ) // Interpret the expression let result = expression.interpret() print(\u0026#34;Result: \\(result)\u0026#34;) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/the-interpreter-pattern/","summary":"\u003ch3 id=\"what-is-an-interpreter-pattern\"\u003eWhat is an Interpreter Pattern?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Interpreter Pattern helps implement a simple language and defines a class based representation for its grammar along with an interpreter to interpret its sentences.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://www.cs.unc.edu/~stotts/GOF/hires/pat5cfso.htm\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cp\u003eThe Interpreter Pattern helps solve following problems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLanguage Interpretation\u003c/strong\u003e: When you have a language or syntax that needs to be interpreted, such as mathematical expressions, regular expressions, or domain-specific languages (DSLs), the Interpreter Pattern helps in implementing the logic to interpret and execute these expressions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExtensibility\u003c/strong\u003e: The Interpreter Pattern allows for easy addition of new grammar rules or language constructs without modifying the core interpreter logic. This promotes extensibility, enabling the interpreter to support new features or languages with minimal changes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSeparation of Concerns\u003c/strong\u003e: It separates the grammar definition from the interpretation logic. This separation of concerns makes the codebase modular and easier to maintain. Changes to the grammar or language rules do not affect the interpretation logic, and vice versa.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Define the protocol for the expression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete expression for a number\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNumberExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete expression for addition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAdditionExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete expression for subtraction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSubtractionExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete expression for multiplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMultiplicationExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete expression for division\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDivisionExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eleft\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eright\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edivisor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kr\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003edivisor\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kr\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003edivisor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Handle division by zero error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003efatalError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Division by zero\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Usage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eexpression\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAdditionExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMultiplicationExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNumberExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eNumberExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eDivisionExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNumberExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eNumberExpression\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Interpret the expression\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eresult\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Result: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"The Interpreter Pattern"},{"content":"What is a Flyweight Pattern? The Flyweight Pattern refers to an object that minimizes memory usage by sharing some of its data with other similar objects.\nSource\nWhat problems does it solve? The Flyweight Pattern helps solve following problems:\nLarge Memory Footprint: When dealing with a large number of objects, especially if these objects share a significant amount of common state, traditional object creation can lead to excessive memory consumption. The Flyweight Pattern reduces memory usage by sharing this common state among multiple objects. Performance Overhead: Creating and managing a large number of objects can also introduce performance overhead due to memory allocation, deallocation, and initialization. By reusing shared objects and minimizing the creation of new objects, the Flyweight Pattern can improve performance. Object Creation Cost: Creating new objects can be costly in terms of time and resources, especially if the objects require complex initialization. By reusing existing objects, the Flyweight Pattern reduces the need for creating new objects, thereby reducing object creation costs. Real-world code example // Flyweight protocol defining the interface for shapes protocol Shape { func draw(at point: CGPoint) } // Concrete flyweight class representing a circle class Circle: Shape { private let radius: CGFloat private let fillColor: UIColor init(radius: CGFloat, fillColor: UIColor) { self.radius = radius self.fillColor = fillColor } func draw(at point: CGPoint) { print(\u0026#34;Drawing Circle at (\\(point.x), \\(point.y)) with radius \\(radius) and fill color \\(fillColor)\u0026#34;) // Actual drawing logic would go here } } // Flyweight factory class responsible for creating and managing flyweight objects class ShapeFactory { private var flyweights = [String: Shape]() func getCircle(radius: CGFloat, fillColor: UIColor) -\u0026gt; Shape { let key = \u0026#34;Circle-\\(radius)-\\(fillColor)\u0026#34; if let existingShape = flyweights[key] { return existingShape } else { let newShape = Circle(radius: radius, fillColor: fillColor) flyweights[key] = newShape return newShape } } } // Client code let shapeFactory = ShapeFactory() // Request for circles with different properties let circle1 = shapeFactory.getCircle(radius: 10, fillColor: .red) let circle2 = shapeFactory.getCircle(radius: 10, fillColor: .red) // Reusing the same circle object let circle3 = shapeFactory.getCircle(radius: 20, fillColor: .blue) // Drawing circles circle1.draw(at: CGPoint(x: 100, y: 100)) circle2.draw(at: CGPoint(x: 200, y: 200)) circle3.draw(at: CGPoint(x: 300, y: 300)) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/the-flyweight-pattern/","summary":"\u003ch3 id=\"what-is-a-flyweight-pattern\"\u003eWhat is a Flyweight Pattern?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Flyweight Pattern refers to an object that minimizes memory usage by sharing some of its data with other similar objects.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://upload.wikimedia.org/wikipedia/commons/4/4e/W3sDesign_Flyweight_Design_Pattern_UML.jpg\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cp\u003eThe Flyweight Pattern helps solve following problems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLarge Memory Footprint\u003c/strong\u003e: When dealing with a large number of objects, especially if these objects share a significant amount of common state, traditional object creation can lead to excessive memory consumption. The Flyweight Pattern reduces memory usage by sharing this common state among multiple objects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePerformance Overhead\u003c/strong\u003e: Creating and managing a large number of objects can also introduce performance overhead due to memory allocation, deallocation, and initialization. By reusing shared objects and minimizing the creation of new objects, the Flyweight Pattern can improve performance.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eObject Creation Cost\u003c/strong\u003e: Creating new objects can be costly in terms of time and resources, especially if the objects require complex initialization. By reusing existing objects, the Flyweight Pattern reduces the need for creating new objects, thereby reducing object creation costs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Flyweight protocol defining the interface for shapes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edraw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete flyweight class representing a circle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGFloat\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eradius\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efillColor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edraw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e \u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Drawing Circle at (\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003epoint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e) with radius \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e and fill color \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Actual drawing logic would go here\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Flyweight factory class responsible for creating and managing flyweight objects\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShapeFactory\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eflyweights\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e]()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003egetCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIColor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ekey\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Circle-\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e-\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eexistingShape\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eflyweights\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eexistingShape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enewShape\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eflyweights\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enewShape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enewShape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Client code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eshapeFactory\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eShapeFactory\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Request for circles with different properties\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecircle1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eshapeFactory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecircle2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eshapeFactory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Reusing the same circle object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecircle3\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eshapeFactory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efillColor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Drawing circles\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecircle1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edraw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecircle2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edraw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecircle3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edraw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCGPoint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e300\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e300\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"The Flyweight Pattern"},{"content":"What is a Chain Of Responsibility Pattern? The Chain Of Responsibility Pattern helps create a chain of objects to examine requests. Each object in turn examines a request and either handles it or passes onto the next object in the chain.\nSource\nWhat problems does it solve? The Chain Of Responsibility Pattern (CoR) helps solve following problems:\nDynamic Request Handling: It enables dynamic assignment of responsibilities at runtime. Handlers can be added, removed, or reordered without affecting the client’s code. This flexibility allows for easier maintenance and extension of the system. Decoupling Sender and Receiver: In traditional systems, a sender often needs to know the exact receiver of a request, leading to tight coupling between them. The CoR pattern decouples senders from receivers by allowing multiple objects to handle a request without the sender knowing the specific handler. Real-world code example // Protocol defining the handler interface protocol PurchaseHandler { var next: PurchaseHandler? { get set } func handleRequest(amount: Double) } // Concrete handlers class SmallPurchaseHandler: PurchaseHandler { var next: PurchaseHandler? let maxAmount: Double = 100.0 func handleRequest(amount: Double) { if amount \u0026lt;= maxAmount { print(\u0026#34;SmallPurchaseHandler: Purchase approved for $\\(amount)\u0026#34;) } else if let nextHandler = next { print(\u0026#34;SmallPurchaseHandler: Passing request to next handler\u0026#34;) nextHandler.handleRequest(amount: amount) } else { print(\u0026#34;SmallPurchaseHandler: No handler available, purchase rejected\u0026#34;) } } } class MediumPurchaseHandler: PurchaseHandler { var next: PurchaseHandler? let maxAmount: Double = 500.0 func handleRequest(amount: Double) { if amount \u0026lt;= maxAmount { print(\u0026#34;MediumPurchaseHandler: Purchase approved for $\\(amount)\u0026#34;) } else if let nextHandler = next { print(\u0026#34;MediumPurchaseHandler: Passing request to next handler\u0026#34;) nextHandler.handleRequest(amount: amount) } else { print(\u0026#34;MediumPurchaseHandler: No handler available, purchase rejected\u0026#34;) } } } class LargePurchaseHandler: PurchaseHandler { var next: PurchaseHandler? func handleRequest(amount: Double) { print(\u0026#34;LargePurchaseHandler: Purchase approved for $\\(amount)\u0026#34;) } } // Usage func main() { let smallHandler = SmallPurchaseHandler() let mediumHandler = MediumPurchaseHandler() let largeHandler = LargePurchaseHandler() // Connecting handlers into a chain smallHandler.next = mediumHandler mediumHandler.next = largeHandler smallHandler.handleRequest(amount: 50.0) smallHandler.handleRequest(amount: 200.0) smallHandler.handleRequest(amount: 1000.0) } Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/the-chain-of-responsibility-pattern/","summary":"\u003ch3 id=\"what-is-a-chain-of-responsibility-pattern\"\u003eWhat is a Chain Of Responsibility Pattern?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Chain Of Responsibility Pattern helps create a chain of objects to examine requests. Each object in turn examines a request and either handles it or passes onto the next object in the chain.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://reactiveprogramming.io/blog/en/design-patterns/chain-of-responsability\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cp\u003eThe Chain Of Responsibility Pattern (CoR) helps solve following problems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDynamic Request Handling\u003c/strong\u003e: It enables dynamic assignment of responsibilities at runtime. Handlers can be added, removed, or reordered without affecting the client’s code. This flexibility allows for easier maintenance and extension of the system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDecoupling Sender and Receiver\u003c/strong\u003e: In traditional systems, a sender often needs to know the exact receiver of a request, leading to tight coupling between them. The CoR pattern decouples senders from receivers by allowing multiple objects to handle a request without the sender knowing the specific handler.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Protocol defining the handler interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003ePurchaseHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kr\"\u003eget\u003c/span\u003e \u003cspan class=\"kr\"\u003eset\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete handlers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSmallPurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emaxAmount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e100.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emaxAmount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SmallPurchaseHandler: Purchase approved for $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enextHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SmallPurchaseHandler: Passing request to next handler\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enextHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;SmallPurchaseHandler: No handler available, purchase rejected\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMediumPurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emaxAmount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e500.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emaxAmount\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;MediumPurchaseHandler: Purchase approved for $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enextHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;MediumPurchaseHandler: Passing request to next handler\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enextHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;MediumPurchaseHandler: No handler available, purchase rejected\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLargePurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eDouble\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;LargePurchaseHandler: Purchase approved for $\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Usage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esmallHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSmallPurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emediumHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMediumPurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003elargeHandler\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLargePurchaseHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Connecting handlers into a chain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esmallHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emediumHandler\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003emediumHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elargeHandler\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esmallHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e50.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esmallHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e200.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esmallHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehandleRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eamount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1000.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"The Chain Of Responsibility Pattern"},{"content":"What is a State Pattern? The State Pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.\nSource\nWhat problems does it solve? Complex conditional logic: When an object’s behavior depends on its internal state, it often leads to complex conditional statements. The State pattern simplifies this by encapsulating each state and its behavior in separate classes, making the code more readable and maintainable. State-specific behavior: Objects often need to change their behavior based on their state. The State pattern allows objects to delegate behavior to state objects, which can vary independently. This promotes better encapsulation and separation of concerns. Adding new states: When new states need to be added, the State pattern makes it easier to extend the functionality without modifying existing code. New states can be added by creating new state classes and integrating them into the existing context, without changing the context class itself. Real-world code example // Define the VendingMachine protocol protocol VendingMachineState { func insertCoin() func dispenseItem() } // Define concrete states class NoCoinState: VendingMachineState { private let vendingMachine: VendingMachine init(vendingMachine: VendingMachine) { self.vendingMachine = vendingMachine } func insertCoin() { print(\u0026#34;Coin inserted\u0026#34;) // Transition to the HasCoinState vendingMachine.changeState(newState: vendingMachine.hasCoinState) } func dispenseItem() { print(\u0026#34;Please insert a coin first\u0026#34;) } } class HasCoinState: VendingMachineState { private let vendingMachine: VendingMachine init(vendingMachine: VendingMachine) { self.vendingMachine = vendingMachine } func insertCoin() { print(\u0026#34;Coin already inserted\u0026#34;) } func dispenseItem() { if vendingMachine.inventoryCount \u0026gt; 0 { print(\u0026#34;Item dispensed\u0026#34;) vendingMachine.decreaseInventory() // Transition to the NoCoinState vendingMachine.changeState(newState: vendingMachine.noCoinState) } else { print(\u0026#34;Out of stock\u0026#34;) } } } // Define the VendingMachine class class VendingMachine { var inventoryCount: Int = 5 var currentState: VendingMachineState! var noCoinState: VendingMachineState! var hasCoinState: VendingMachineState! init() { noCoinState = NoCoinState(vendingMachine: self) hasCoinState = HasCoinState(vendingMachine: self) currentState = noCoinState } func changeState(newState: VendingMachineState) { currentState = newState } func insertCoin() { currentState.insertCoin() } func dispenseItem() { currentState.dispenseItem() } func decreaseInventory() { inventoryCount -= 1 } } // Usage let vendingMachine = VendingMachine() vendingMachine.dispenseItem() vendingMachine.insertCoin() vendingMachine.insertCoin() vendingMachine.dispenseItem() vendingMachine.dispenseItem() Thank you for reading!\n","permalink":"http://localhost:1313/posts/the-state-pattern/","summary":"\u003ch3 id=\"what-is-a-state-pattern\"\u003eWhat is a State Pattern?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe State Pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"https://en.wikipedia.org/wiki/State_pattern#/media/File:State_Design_Pattern_UML_Class_Diagram.svg\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComplex conditional logic\u003c/strong\u003e: When an object’s behavior depends on its internal state, it often leads to complex conditional statements. The State pattern simplifies this by encapsulating each state and its behavior in separate classes, making the code more readable and maintainable.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eState-specific behavior\u003c/strong\u003e: Objects often need to change their behavior based on their state. The State pattern allows objects to delegate behavior to state objects, which can vary independently. This promotes better encapsulation and separation of concerns.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAdding new states\u003c/strong\u003e: When new states need to be added, the State pattern makes it easier to extend the functionality without modifying existing code. New states can be added by creating new state classes and integrating them into the existing context, without changing the context class itself.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Define the VendingMachine protocol\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eVendingMachineState\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Define concrete states\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNoCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachineState\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Coin inserted\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Transition to the HasCoinState\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echangeState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehasCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Please insert a coin first\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHasCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachineState\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Coin already inserted\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einventoryCount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Item dispensed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecreaseInventory\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Transition to the NoCoinState\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003echangeState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enoCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Out of stock\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Define the VendingMachine class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eVendingMachine\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003einventoryCount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachineState\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003enoCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachineState\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ehasCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachineState\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enoCoinState\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNoCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ehasCoinState\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eHasCoinState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enoCoinState\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003echangeState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachineState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enewState\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edecreaseInventory\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003einventoryCount\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Usage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003evendingMachine\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsertCoin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evendingMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edispenseItem\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThank you for reading!\u003c/p\u003e","title":"The State Pattern"},{"content":"What is a Dependency Inversion Principle? The Dependency Inversion Principle means that high-level modules should not depend on low-level modules.\nSource\nSource\nWhat problems does it solve? The Dependency Inversion Principle (DIP) helps solve:\nRigidity Fragility Immobility problems Real-world code example Violation of DIP // High-level module directly depending on low-level modules class MessageService { func sendMessageViaEmail(message: String) { let emailSender = EmailSender() emailSender.sendMessage(message: message) } func sendMessageViaSMS(message: String) { let smsSender = SMSSender() smsSender.sendMessage(message: message) } func sendMessageViaPushNotification(message: String) { let pushNotificationSender = PushNotificationSender() pushNotificationSender.sendMessage(message: message) } } Adhering to DIP // Protocol defining the interface for sending messages protocol MessageSender { func sendMessage(message: String) } // High-level module depending on abstraction (MessageSender protocol) class MessageService { private let messageSender: MessageSender init(messageSender: MessageSender) { self.messageSender = messageSender } func sendMessage(message: String) { messageSender.sendMessage(message: message) } } // Concrete implementations of MessageSender protocol for different channels class EmailSender: MessageSender { func sendMessage(message: String) { print(\u0026#34;Sending email: \\(message)\u0026#34;) } } class SMSSender: MessageSender { func sendMessage(message: String) { print(\u0026#34;Sending SMS: \\(message)\u0026#34;) } } class PushNotificationSender: MessageSender { func sendMessage(message: String) { print(\u0026#34;Sending push notification: \\(message)\u0026#34;) } } // Example usage let emailSender = EmailSender() let smsSender = SMSSender() let pushNotificationSender = PushNotificationSender() let emailService = MessageService(messageSender: emailSender) let smsService = MessageService(messageSender: smsSender) let pushNotificationService = MessageService(messageSender: pushNotificationSender) emailService.sendMessage(message: \u0026#34;Hello via email\u0026#34;) smsService.sendMessage(message: \u0026#34;Hello via SMS\u0026#34;) pushNotificationService.sendMessage(message: \u0026#34;Hello via push notification\u0026#34;) Thank you for reading! 😊 ","permalink":"http://localhost:1313/posts/the-dependency-inversion-principle/","summary":"\u003ch3 id=\"what-is-a-dependency-inversion-principle\"\u003eWhat is a Dependency Inversion Principle?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Dependency Inversion Principle means that high-level modules should not depend on low-level modules.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"http://principles-wiki.net/principles:dependency_inversion_principle\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3a9c2\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3a9c2\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\n\u003ca href=\"http://principles-wiki.net/principles:dependency_inversion_principle\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"what-problems-does-it-solve\"\u003eWhat problems does it solve?\u003c/h3\u003e\n\u003cp\u003eThe Dependency Inversion Principle (DIP) helps solve:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRigidity\u003c/li\u003e\n\u003cli\u003eFragility\u003c/li\u003e\n\u003cli\u003eImmobility problems\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003ch4 id=\"violation-of-dip\"\u003eViolation of DIP\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// High-level module directly depending on low-level modules\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMessageService\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessageViaEmail\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eemailSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailSender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eemailSender\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessageViaSMS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esmsSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSMSSender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003esmsSender\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessageViaPushNotification\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epushNotificationSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePushNotificationSender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epushNotificationSender\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"adhering-to-dip\"\u003eAdhering to DIP\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Protocol defining the interface for sending messages\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eMessageSender\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// High-level module depending on abstraction (MessageSender protocol)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMessageService\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageSender\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Concrete implementations of MessageSender protocol for different channels\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmailSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageSender\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Sending email: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSMSSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageSender\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Sending SMS: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePushNotificationSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageSender\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Sending push notification: \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Example usage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eemailSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eEmailSender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esmsSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSMSSender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epushNotificationSender\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePushNotificationSender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eemailService\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageService\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eemailSender\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esmsService\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageService\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esmsSender\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003epushNotificationService\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageService\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessageSender\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epushNotificationSender\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eemailService\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello via email\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esmsService\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello via SMS\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epushNotificationService\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello via push notification\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"thank-you-for-reading-\"\u003eThank you for reading! 😊\u003c/h4\u003e","title":"The Dependency Inversion Principle"},{"content":"What is a Big O notation? The Big O notation helps identify algorithm efficiency. It can measure computation and memory growth with respect to input. Real-world code example O(n) — Linear Time\nfunc containsValue(array: [Int], value: Int) -\u0026gt; Bool { for element in array { if element == value { return true } } return false } O(1) — Constant Time\nfunc findFirstElement(array: [Int]) -\u0026gt; Int? { return array.first } Thank you for reading!\n","permalink":"http://localhost:1313/posts/big-o-notation/","summary":"\u003ch3 id=\"what-is-a-big-o-notation\"\u003eWhat is a Big O notation?\u003c/h3\u003e\n\u003cp\u003eThe Big O notation helps identify algorithm efficiency. It can measure computation and memory growth with respect to input.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003ch3 id=\"real-world-code-example\"\u003eReal-world code example\u003c/h3\u003e\n\u003cp\u003eO(n) — Linear Time\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003econtainsValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eO(1) — Constant Time\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efindFirstElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003efirst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThank you for reading!\u003c/p\u003e","title":"Big O notation"},{"content":"What is Combine? Combine Framework provides an API for processing async events over time such as user-input, network response, and other dynamic data.\nWhat is the purpose of Combine? The purpose of Combine is to simplify the management of async events and data streams.\nPublishers Publisher declares that a type can transit a sequence of values over time. A publisher delivers elements to one or more Subscriber instances.\nclass PostService { func fetchPosts() -\u0026gt; AnyPublisher\u0026lt;[Post], Error\u0026gt; { guard let url = URL(string: \u0026#34;https://jsonplaceholder.typicode.com/posts\u0026#34;) else { fatalError(\u0026#34;Invalid URL\u0026#34;) } return URLSession.shared.dataTaskPublisher(for: url) .map(\\.data) .decode(type: [Post].self, decoder: JSONDecoder()) .receive(on: DispatchQueue.main) .eraseToAnyPublisher() } } Subscribers Subscriber is a protocol that declares a type that can receive input from a publisher. A Subscriber instance receives a stream of elements from a Publisher.\nprivate var cancellable: AnyCancellable? let service = PostService() cancellable = service.fetchPosts() .sink(receiveCompletion: { completion in switch completion { case .finished: break case .failure(let error): print(error.localizedDescription) } }, receiveValue: { posts in print(\u0026#34;Received posts count:\u0026#34;, posts.count) }) AnyCancellable When you call a method like sink or assign on a publisher, it returns a type that conforms to the Cancellable protocol. Storing this return value in an instance of AnyCancellable keeps the subscription active. When the AnyCancellable instance is deallocated, its deinit method automatically cancels the subscription.\nvar cancellables = Set\u0026lt;AnyCancellable\u0026gt;() let publisher = Just(\u0026#34;Hello, Combine!\u0026#34;) publisher .sink { completion in print(\u0026#34;Completion: \\(completion)\u0026#34;) } receiveValue: { value in print(\u0026#34;Received value: \\(value)\u0026#34;) } .store(in: \u0026amp;cancellables) Operators Transforming Operators map: Transforms each value received from a publisher by applying a function. flatMap: Transforms each value received into a new publisher, then flattens the result into a single publisher stream. scan: Applies a closure over the previous result and the current value to produce a new value, useful for accumulating values. Filtering Operators filter: Emits only those values from a publisher that satisfy a given predicate. removeDuplicates: Suppresses duplicate consecutive values published by a publisher. first/last: Emits only the first or last value from a publisher that satisfies a predicate condition. Combining Operators combineLatest: Combines the latest value from two or more publishers and emits a combined value each time any of the publishers emit a value. merge: Combines multiple publishers of the same type into a single publisher stream, emitting values as they arrive. zip: Combines values from multiple publishers into tuples, emitting a tuple only when each of the publishers has emitted a new value. Error Handling Operators catch: Handles errors from a publisher by replacing the failed publisher with another publisher or a value. retry: Attempts to recreate a subscription to a failed publisher for a specified number of times. Utility Operators delay: Delays the emission of items from the publisher for a specified interval. subscribe(on:)/receive(on:): Specifies the dispatch queue for performing subscription work or receiving values. print: Prints log messages for all publisher events to the console, useful for debugging. Timing Operators debounce: Emits a value from a publisher only after a specified time interval has passed without receiving another value. throttle: Emits either the first or last value received in a specified time window. Collecting Operators collect: Collects received values and emits an array of those values either when the publisher completes or when a buffer size is reached. When to use Combine? I found great advice from Apple when it comes to Combine:\n“A Combine publisher fills a role similar to, but distinct from, the AsyncSequence in the Swift standard library. A Publisher and an AsyncSequence both produce elements over time. However, the pull model in Combine uses a Subscriber to request elements from a publisher, while Swift concurrency uses the for-await-in syntax to iterate over elements published by an AsyncSequence. Both APIs offer methods to modify the sequence by mapping or filtering elements, while only Combine provides time-based operations like debounce(for:scheduler:options:) and throttle(for:scheduler:latest:), and combining operations like merge(with:) and combineLatest(_:_:). To bridge the two approaches, the property values exposes a publisher’s elements as an AsyncSequence, allowing you to iterate over them with for-await-in rather than attaching a Subscriber.”\nThank you for reading!\n","permalink":"http://localhost:1313/posts/combine-basics/","summary":"\u003ch3 id=\"what-is-combine\"\u003eWhat is Combine?\u003c/h3\u003e\n\u003cp\u003eCombine Framework provides an API for processing async events over time such as user-input, network response, and other dynamic data.\u003c/p\u003e\n\u003ch3 id=\"what-is-the-purpose-of-combine\"\u003eWhat is the purpose of Combine?\u003c/h3\u003e\n\u003cp\u003eThe purpose of Combine is to simplify the management of async events and data streams.\u003c/p\u003e\n\u003ch3 id=\"publishers\"\u003ePublishers\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/documentation/combine/publisher\"\u003e\u003ccode\u003ePublisher\u003c/code\u003e\u003c/a\u003e declares that a type can transit a sequence of values over time. A publisher delivers elements to one or more \u003ca href=\"https://developer.apple.com/documentation/combine/subscriber\"\u003e\u003ccode\u003eSubscriber\u003c/code\u003e\u003c/a\u003e instances.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePostService\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003efetchPosts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eAnyPublisher\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ePost\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eurl\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eURL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;https://jsonplaceholder.typicode.com/posts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003efatalError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Invalid URL\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eURLSession\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshared\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edataTaskPublisher\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ePost\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eJSONDecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeraseToAnyPublisher\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"subscribers\"\u003eSubscribers\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/documentation/combine/subscriber\"\u003e\u003ccode\u003eSubscriber\u003c/code\u003e\u003c/a\u003e is a protocol that declares a type that can receive input from a publisher.\nA Subscriber instance receives a stream of elements from a Publisher.\u003c/p\u003e","title":"Combine — Basics"},{"content":"When was it introduced? It was introduced in Swift 5.5 at WWDC 2021.\nYou can find the more comprehensive info about Modern Concurrency in Swift Concurrency Manifesto.\nWhat are actors? Actors eliminate shared mutable state and explicit synchronization through deep copying of all the data that passed to an actor to a message sent and preventing direct access to actor state. Actors are reference types.\nactor DatabaseManager { private var data: [String: String] = [:] func readData(key: String) -\u0026gt; String? { data[key] } func writeData(key: String, value: String) { data[key] = value } } What is an asynchronous function? The asynchronous function or asynchronous method can be suspended while it is partway through execution. It can pause in the middle when it’s waiting for something.\nfunc someAsyncOperation(index: Int) async throws -\u0026gt; String { try await Task.sleep(nanoseconds: 1_000_000_000) return \u0026#34;Operation \\(index) Completed\u0026#34; } func performAsyncOperations() async throws { for index in 1...1000 { Task.detached { print(\u0026#34;Start of operation \\(index)\u0026#34;) let result = try await someAsyncOperation(index: index) print(\u0026#34;End of operation \\(index) with result: \\(result)\u0026#34;) return result } } } Task { print(\u0026#34;Start of example\u0026#34;) try await performAsyncOperationsWithYield() print(\u0026#34;End of example\u0026#34;) } What are Asynchronous Sequences? Asynchronous Sequences enable you to stop an async task until the next item is prepared, giving room for other tasks to progress. Crafting your own Asynchronous Sequence involves adhering to the AsyncSequence protocol.\nstruct AsyncCounter: AsyncSequence { typealias Element = Int struct AsyncCounterIterator: AsyncIteratorProtocol { var count = 0 mutating func next() async -\u0026gt; Int? { defer { count += 1 } return count } } func makeAsyncIterator() -\u0026gt; AsyncCounterIterator { return AsyncCounterIterator() } } let asyncCounter = AsyncCounter() for await count in asyncCounter { print(\u0026#34;Count: \\(count)\u0026#34;) try await Task.sleep(nanoseconds: 1 * 1_000_000_000) } What are Tasks and TaskGroups? You can draw a parallel between Tasks and DispatchQueue`s because they have similar concepts. If you want to execute your code asynchronously you should put your code into async context. Tasks and Queues help you solve this problem.\nfunc fetchData() async throws -\u0026gt; String { try await Task.sleep(nanoseconds: 2 * 1_000_000_000) return \u0026#34;Data fetched successfully!\u0026#34; } Task { print(\u0026#34;Start fetching data...\u0026#34;) do { let result = try await fetchData() print(result) } catch { print(\u0026#34;Error: \\(error)\u0026#34;) } print(\u0026#34;Data fetching completed.\u0026#34;) } let customQueue = DispatchQueue(label: \u0026#34;com.example.myqueue\u0026#34;, attributes: .concurrent) func performTask() { customQueue.async { print(\u0026#34;Task is starting...\u0026#34;) Thread.sleep(forTimeInterval: 2) print(\u0026#34;Task completed.\u0026#34;) } } for _ in 1...3 { performTask() } TaskGroup allows you to explicitly add child tasks and give you more control over priority and cancellation.\nfunc fetchImages(urls: [URL]) async throws -\u0026gt; [UIImage] { try await withThrowingTaskGroup(of: UIImage.self) { group in var images: [UIImage] = [] for url in urls { group.addTask { try await downloadImage(from: url) } } for try await result in group { images.append(result) } return images } } func downloadImage(from url: URL) async throws -\u0026gt; UIImage { // Download and return the image } What is Task.yield()? If you have a long-running operation you can call the Task.yield() method to explicitly add suspension points. By doing that you are letting other tasks make progress.\nfunc performAsyncOperationsWithYield() async throws { for index in 1...1000 { Task.detached { print(\u0026#34;Start of operation \\(index)\u0026#34;) // Yield control to the scheduler await Task.yield() let result = try await someAsyncOperation(index: index) print(\u0026#34;End of operation \\(index) with result: \\(result)\u0026#34;) return result } } } What are Sendable Types? A type that can be shared from one concurrency context to another is known as a sendable type. In other words it guarantees that the operation that you perform is thread-safe.\nimport Foundation struct WeatherData: Sendable { var temperature: Double var condition: String var city: String } func fetchWeatherData(forCity city: String) async -\u0026gt; WeatherData { try? await Task.sleep(nanoseconds: 1_000_000_000) return WeatherData(temperature: 72.0, condition: \u0026#34;Sunny\u0026#34;, city: city) } import SwiftUI @MainActor class WeatherViewModel: ObservableObject { @Published var currentWeather: WeatherData? func updateWeather(forCity city: String) { Task { let weatherData = await fetchWeatherData(forCity: city) // Since WeatherData conforms to Sendable, this is safe self.currentWeather = weatherData } } } Thank you for reading!\n","permalink":"http://localhost:1313/posts/modern-concurrency/","summary":"\u003ch3 id=\"when-was-it-introduced\"\u003eWhen was it introduced?\u003c/h3\u003e\n\u003cp\u003eIt was introduced in \u003ca href=\"https://github.com/apple/swift/tree/swift-5.5-RELEASE\"\u003eSwift 5.5\u003c/a\u003e at \u003ca href=\"https://developer.apple.com/videos/wwdc2021/\"\u003eWWDC 2021\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can find the more comprehensive info about Modern Concurrency in \u003ca href=\"https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782#swift-concurrency-manifesto\"\u003eSwift Concurrency Manifesto\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"what-are-actors\"\u003eWhat are actors?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/#Actors\"\u003eActors\u003c/a\u003e eliminate shared mutable state and explicit synchronization through deep copying of all the data that passed to an actor to a message sent and preventing direct access to actor state. Actors are \u003ca href=\"https://www.swift.org/documentation/articles/value-and-reference-types.html#:~:text=changing%20the%20value.-,Reference%20Types,-In%20Swift%2C%20classes\"\u003ereference types\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eactor\u003c/span\u003e \u003cspan class=\"n\"\u003eDatabaseManager\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[:]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereadData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ewriteData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"what-is-an-asynchronous-function\"\u003eWhat is an asynchronous function?\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/#Defining-and-Calling-Asynchronous-Functions\"\u003eThe asynchronous function\u003c/a\u003e or asynchronous method can be suspended while it is partway through execution. It can pause in the middle when it’s waiting for something.\u003c/p\u003e","title":"Modern Concurrency"},{"content":"What is the Thread? A Thread is a small set of instructions that can be executed independently from the main program. Threads are often used to improve program performance by allowing multiple tasks to be executed at the same time. The Thread has its own stack, registers, and program counters.\nThreads share memory address space, and it is possible to communicate between Threads using shared memory space. How to use it? You can create a single Thread by the following example:\n// Create a new thread and start it let newThread = Thread { } newThread.start() What else can you do? You can:\ncancel exit sleep etc You can check the current Thread execution state: isExecuting isFinished isCancelled You can subclass Thread and override the main() method if you need it.\nCaveats The main problem with Threads is that you must manually manage relationships between them. It can cause testability, readability, and potentially Thread Explosion issues.\nWhat is Thread Explosion? Thread Explosion occurs when a system has too many running Threads simultaneously. It can cause performance issues such as memory overhead and cost of context switching (CPU cycles).\nTips You can delegate your work with Threads to Grand Central Dispatch (GCD).\nGCD provides an API that manages the number of Threads automatically.\nYou can also use async/await and Task functionality from Swift 5.5 that helps manage the number of Threads in poll-based factors like system load and the number of available CPUs. If you have a long-running operation, you can call the Task.yield() method and let other tasks in your program make progress on their work.\nThank you for reading!\n","permalink":"http://localhost:1313/posts/what-are-threads-in-swift/","summary":"\u003ch3 id=\"what-is-the-thread\"\u003eWhat is the Thread?\u003c/h3\u003e\n\u003cp\u003eA \u003ca href=\"https://developer.apple.com/documentation/foundation/thread\"\u003eThread\u003c/a\u003e is a small set of instructions that can be executed independently from the main program.\nThreads are often used to improve program performance by allowing multiple tasks to be executed at the same time.\nThe Thread has its own \u003ccode\u003estack\u003c/code\u003e, \u003ccode\u003eregisters\u003c/code\u003e, and \u003ccode\u003eprogram counters\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-35972\" hidden\u003e\n    \u003clabel for=\"zoomCheck-35972\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/0.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003cp\u003eThreads share memory address space, and it is possible to communicate between Threads using shared memory space.\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3a9c2\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3a9c2\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"What are Threads in Swift?"},{"content":"What is DispatchGroup? DispatchGroup provides a mechanism to track the completion group of tasks.\nHow DispatchGroup works? DispatchGroup has three main methods, enter, leave and notify, that allow you to control the completion of a specific task.\nlet dispatchGroup = DispatchGroup() dispatchGroup.enter() dispatchGroup.leave() dispatchGroup.notify(queue: .main) {} Let`s talk about each of these methods. enter — manually indicate a block has entered group. leave — manually indicate a block in the group has been completed. notify(queue: ) — schedule a block to be submitted to a queue when all the blocks associated with a group have been completed. The queue parameter is the queue to which the supplied block will be submitted when the group is complete.\nHow to implement DispatchGroup? You can implement DispatchGroup following these steps:\nlet dispatchGroup = DispatchGroup() dispatchGroup.enter() fetchGitHubUser1 { print(\u0026#34;fetchGitHubUser1 task completed\u0026#34;) dispatchGroup.leave() } dispatchGroup.enter() fetchGitHubUser2 { print(\u0026#34;fetchGitHubUser2 task completed\u0026#34;) dispatchGroup.leave() } dispatchGroup.notify(queue: .main) { print(\u0026#34;All tasks completed\u0026#34;) } // prints fetchGitHubUser1 task started fetchGitHubUser2 task started fetchGitHubUser1 task completed fetchGitHubUser2 task completed All tasks completed Pros You can create a group of tasks and track when all tasks finish their work. You can specify a queue where you want to be notified about completed operations.\nCons You should manually manage enter and leave operations that increase complexity and the chance of error. You can accidentally forget to write the leave operation, which can cause unpredictable behavior.\n","permalink":"http://localhost:1313/posts/dispatchgroup-in-swift/","summary":"\u003ch3 id=\"what-is-dispatchgroup\"\u003eWhat is DispatchGroup?\u003c/h3\u003e\n\u003cp\u003eDispatchGroup provides a mechanism to track the completion group of tasks.\u003c/p\u003e\n\u003ch3 id=\"how-dispatchgroup-works\"\u003eHow DispatchGroup works?\u003c/h3\u003e\n\u003cp\u003eDispatchGroup has three main methods, \u003ccode\u003eenter\u003c/code\u003e, \u003ccode\u003eleave\u003c/code\u003e and \u003ccode\u003enotify\u003c/code\u003e, that allow you to control the completion of a specific task.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edispatchGroup\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edispatchGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenter\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edispatchGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eleave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edispatchGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enotify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"lets-talk-about-each-of-these-methods\"\u003eLet`s talk about each of these methods.\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eenter\u003c/code\u003e — manually indicate a block has entered group.\n\u003ccode\u003eleave\u003c/code\u003e — manually indicate a block in the group has been completed.\n\u003ccode\u003enotify(queue: )\u003c/code\u003e — schedule a block to be submitted to a queue when all the blocks associated with a group have been completed. The \u003ccode\u003equeue\u003c/code\u003e parameter is the queue to which the supplied block will be submitted when the group is complete.\u003c/p\u003e","title":"DispatchGroup in Swift"},{"content":"What is concurrency? The system can perform multiple tasks simultaneously. By tasks, I mean code or instructions. Modern computer chips have multiple cores that allow developers to create and run various tasks on multiple cores. Even if your chip has one core operating system it will provide context switching mechanism by enabling it to execute multiple tasks concurrently.\nMaterial about processes, threads I will skip explaining concepts about processes and threads because it is a vast topic, and it will take a lot of time to explain it. I attached links to the material to help you understand it more deeply. https://youtu.be/4rLW7zg21gI?si=49hq8Wrbpmeev41k https://youtu.be/r2__Rw8vu1M?si=b7b257Qu4Bty7OxA I will focus on implementation.\nThe old and modern way of implementing concurrency You can divide concurrency implementation into old or unstructured and modern or structured.\nBy old, I mean GCD (Grand Central Dispatch). By modern, I mean async/await, actor, and Task.\nIn this article, I will talk about the old way. GCD helps you keep your distance from manually managing threads and avoid unnecessary complexity, and it does it by providing API. One of these APIs is DispatchQueue.\nDispatchQueue By default, DispatchQueue is serial; all work on this queue will be executed sequentially. DispatchQueue has access to the main property and the global() method. The main property returns the serial queue associated with the main thread of the current process. The global() method returns a concurrent queue specified by quality-of-service level.\npublic class func global(qos: DispatchQoS.QoSClass = .default) -\u0026gt; DispatchQueue You can pass many parameters when you try to initialize a new queue.\npublic convenience init(label: String, qos: DispatchQoS = .unspecified, attributes: DispatchQueue.Attributes = [], autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency = .inherit, target: DispatchQueue? = nil) Let’s talk about three of them (label, qos, attributes). The first is label, which is used mainly for debugging and identification.\nlet queue = DispatchQueue(label: \u0026#34;com.example.myqueue\u0026#34;) The second one is qos (Quality Of Service) allows you to choose the priority in which you like to run your task. You can choose between background, utility, default, userInitiated, userIneractive, and unspecified priorities.\n/// qos_class_t public struct DispatchQoS : Equatable { public let qosClass: DispatchQoS.QoSClass public let relativePriority: Int @available(macOS 10.10, iOS 8.0, *) public static let background: DispatchQoS @available(macOS 10.10, iOS 8.0, *) public static let utility: DispatchQoS @available(macOS 10.10, iOS 8.0, *) public static let `default`: DispatchQoS @available(macOS 10.10, iOS 8.0, *) public static let userInitiated: DispatchQoS @available(macOS 10.10, iOS 8.0, *) public static let userInteractive: DispatchQoS public static let unspecified: DispatchQoS } userIneractive has the highest priority; it usually calls when you need to display UI almost immediately.\nbackground, on the other hand, has the lowest priority.\nHow to achieve concurrency with DispatchQueue API? You can use a serial queue with the following: sync functionality allows you to wait until the block you passed finishes its work.\nlet serialQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.serial\u0026#34;) serialQueue.sync {} async functionality will schedule your work and be executed later in time.\nlet serialQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.serial\u0026#34;) serialQueue.async {} Or you can use a concurrent queue with similar methods but running your task in parallel.\nlet concurrentQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.concurrent\u0026#34;, attributes: .concurrent) concurrentQueue.sync {} concurrentQueue.async {} The difference between serial queue and concurrent queue The difference between a serial and concurrent queue is that you should not wait until the concurrent operation finishes work in the async block.\nlet concurrentQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.concurrent\u0026#34;, attributes: .concurrent) concurrentQueue.sync { for i in 1...5 { print(\u0026#34;Task \\(i) is running on Concurrent Queue\u0026#34;) sleep(1) // Simulate some work } } concurrentQueue.sync { for i in 6...10 { print(\u0026#34;Task \\(i) is running on Concurrent Queue\u0026#34;) sleep(1) // Simulate some work } } // prints Task 1 is running on Concurrent Queue Task 6 is running on Concurrent Queue Task 2 is running on Concurrent Queue Task 7 is running on Concurrent Queue Task 3 is running on Concurrent Queue Task 8 is running on Concurrent Queue Task 4 is running on Concurrent Queue Task 9 is running on Concurrent Queue Task 5 is running on Concurrent Queue Task 10 is running on Concurrent Queue The serial queue executes tasks in order, and you should wait until the first async block finishes its work to start the second block.\nlet serialQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.serual\u0026#34;) serialQueue.sync { for i in 1...5 { print(\u0026#34;Task \\(i) is running on Serial Queue\u0026#34;) sleep(1) // Simulate some work } } serialQueue.sync { for i in 6...10 { print(\u0026#34;Task \\(i) is running on Serial Queue\u0026#34;) sleep(1) // Simulate some work } } // prints Task 1 is running on Serial Queue Task 2 is running on Serial Queue Task 3 is running on Serial Queue Task 4 is running on Serial Queue Task 5 is running on Serial Queue Task 6 is running on Serial Queue Task 7 is running on Serial Queue Task 8 is running on Serial Queue Task 9 is running on Serial Queue Task 10 is running on Serial Queue When you try to use the sync functionality, it behaves similarly on serial and concurrent queues by executing each task step by step and waiting till each block finishes its work.\nlet serialQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.serial\u0026#34;) serialQueue.sync { for i in 1...5 { print(\u0026#34;Task \\(i) is running on Serial Queue\u0026#34;) sleep(1) // Simulate some work } } serialQueue.sync { for i in 6...10 { print(\u0026#34;Task \\(i) is running on Serial Queue\u0026#34;) sleep(1) // Simulate some work } } // prints Task 1 is running on Serial Queue Task 2 is running on Serial Queue Task 3 is running on Serial Queue Task 4 is running on Serial Queue Task 5 is running on Serial Queue Task 6 is running on Serial Queue Task 7 is running on Serial Queue Task 8 is running on Serial Queue Task 9 is running on Serial Queue Task 10 is running on Serial Queue let concurrentQueue = DispatchQueue(label: \u0026#34;com.example.myqueue.concurrent\u0026#34;, attributes: .concurrent) concurrentQueue.sync { for i in 1...5 { print(\u0026#34;Task \\(i) is running on Concurrent Queue\u0026#34;) sleep(1) // Simulate some work } } concurrentQueue.sync { for i in 6...10 { print(\u0026#34;Task \\(i) is running on Concurrent Queue\u0026#34;) sleep(1) // Simulate some work } } // prints Task 1 is running on Concurrent Queue Task 2 is running on Concurrent Queue Task 3 is running on Concurrent Queue Task 4 is running on Concurrent Queue Task 5 is running on Concurrent Queue Task 6 is running on Concurrent Queue Task 7 is running on Concurrent Queue Task 8 is running on Concurrent Queue Task 9 is running on Concurrent Queue Task 10 is running on Concurrent Queue ","permalink":"http://localhost:1313/posts/concurrency-in-swift/","summary":"\u003ch3 id=\"what-is-concurrency\"\u003eWhat is concurrency?\u003c/h3\u003e\n\u003cp\u003eThe system can perform multiple tasks simultaneously. By tasks, I mean \u003ccode\u003ecode or instructions\u003c/code\u003e.\nModern computer chips have multiple cores that allow developers to create and run various tasks on multiple cores. Even if your chip has one core operating system it will provide context switching mechanism by enabling it to execute multiple tasks concurrently.\u003c/p\u003e\n\u003ch3 id=\"material-about-processes-threads\"\u003eMaterial about processes, threads\u003c/h3\u003e\n\u003cp\u003eI will skip explaining concepts about processes and threads because it is a vast topic, and it will take a lot of time to explain it. I attached links to the material to help you understand it more deeply.\n\u003ca href=\"https://youtu.be/4rLW7zg21gI?si=49hq8Wrbpmeev41k\"\u003ehttps://youtu.be/4rLW7zg21gI?si=49hq8Wrbpmeev41k\u003c/a\u003e\n\u003ca href=\"https://youtu.be/r2__Rw8vu1M?si=b7b257Qu4Bty7OxA\"\u003ehttps://youtu.be/r2__Rw8vu1M?si=b7b257Qu4Bty7OxA\u003c/a\u003e\nI will focus on implementation.\u003c/p\u003e","title":"Concurrency in Swift"},{"content":"What are value types? Value types play a central role in programming languages by grouping data values.\n`Value type” is a type of data copied when assigned to a new variable.\nstruct Storage { var data: String = \u0026#34;some data\u0026#34; } let originalStorage = Storage() var copiedStorage = originalStorage // `originalStorage` is copied to `copiedStorage` How can you pass value types? You can pass value type by copying value.\nstruct Storage { var data: String = \u0026#34;some data\u0026#34; } let originalStorage = Storage() var copiedStorage = originalStorage // `originalStorage` is copied to `copiedStorage` copiedStorage.data = \u0026#34;new data\u0026#34; // Changes `copiedStorage`, not `originalStorage` print(\u0026#34;\\(originalStorage.data), \\(copiedStorage.data)\u0026#34;) // prints \u0026#34;some data, new data\u0026#34; The effect of assignment, initialization, and argument passing creates an independent instance with a unique copy of its data.\nWhat types are value types? Value types can be struct, enum, tuple.\nWhat data types are value types? Strings, Arrays, Dictionaries, Numbers, Booleans, Floating-point numbers, and Integers are all value types.\nHow value types are stored in memory? The value types use Stack data structure for memory management.\nWhat is Copy-on-write mechanism? The copy-on-write mechanism is a resource-management technique used to optimize value types performance. It improves performance by avoiding unnecessary copies of value types. If resource is duplicated but not modified it’s unnecessary to create new resource.\nWhen to use value types? Choose value types if you don’t have shared mutable state.\n","permalink":"http://localhost:1313/posts/what-are-value-types-in-swift/","summary":"\u003ch3 id=\"what-are-value-types\"\u003eWhat are value types?\u003c/h3\u003e\n\u003cp\u003eValue types play a central role in programming languages by grouping data values.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e`Value type” is a type of data copied when assigned to a new variable.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;some data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eoriginalStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecopiedStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginalStorage\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// `originalStorage` is copied to `copiedStorage`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"how-can-you-pass-value-types\"\u003eHow can you pass value types?\u003c/h3\u003e\n\u003cp\u003eYou can pass value type by copying value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;some data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eoriginalStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecopiedStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eoriginalStorage\u003c/span\u003e                        \u003cspan class=\"c1\"\u003e// `originalStorage` is copied to `copiedStorage`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecopiedStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;new data\u0026#34;\u003c/span\u003e                            \u003cspan class=\"c1\"\u003e// Changes `copiedStorage`, not `originalStorage`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003eoriginalStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003ecopiedStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// prints \u0026#34;some data, new data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe effect of assignment, initialization, and argument passing creates an independent instance with a unique copy of its data.\u003c/p\u003e","title":"What are value types in Swift?"},{"content":"I was searching for tools that could help me find memory leaks faster and would be simple in implementation without affecting performance and memory size of application.\nI found a fantastic fit for this task LifetimeTracker developed by Krzysztof Zabłocki.\nAll you need is to add LifetimeTracker package to the project, inherit from LifetimeTrackable protocol, and add two lines of code.\nclass Department: LifetimeTrackable {} trackLifetime method to init of instance that you are going to verify, and lifetimeConfiguration property where you set max number of valid instances.\nclass Department: LifetimeTrackable { static var lifetimeConfiguration = LifetimeConfiguration(maxCount: 1, groupName: \u0026#34;Department\u0026#34;) let name: String init(name: String) { self.name = name print(\u0026#34;\\(Self.self) is being initialized\u0026#34;) trackLifetime() } var employee: Employee? deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } The final step is to add LifetimeTracker.setup to didFinishLaunchingWithOptions to be able to see Dashboard with detected issues.\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u0026gt; Bool { #if DEBUG LifetimeTracker.setup( onUpdate: LifetimeTrackerDashboardIntegration( visibility: .alwaysVisible, style: .bar, textColorForNoIssues: .systemGreen, textColorForLeakDetected: .systemRed ).refreshUI ) #else #endif return true } I hope this article will help you save time finding and debugging this tricky task :-).\n","permalink":"http://localhost:1313/posts/how-to-prevent-memory-leaks/","summary":"\u003cp\u003eI was searching for tools that could help me find memory leaks faster and would be simple in implementation without affecting performance and memory size of application.\u003c/p\u003e\n\u003cp\u003eI found a fantastic fit for this task \u003ca href=\"https://github.com/krzysztofzablocki/LifetimeTracker\"\u003e\u003ccode\u003eLifetimeTracker\u003c/code\u003e\u003c/a\u003e developed by \u003ca href=\"https://twitter.com/merowing_\"\u003eKrzysztof Zabłocki\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAll you need is to add \u003ccode\u003eLifetimeTracker\u003c/code\u003e package to the project, inherit from \u003ccode\u003eLifetimeTrackable\u003c/code\u003e protocol, and add two lines of code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDepartment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eLifetimeTrackable\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003etrackLifetime\u003c/code\u003e method to \u003ccode\u003einit\u003c/code\u003e of instance that you are going to verify, and \u003ccode\u003elifetimeConfiguration\u003c/code\u003e property where you set max number of valid instances.\u003c/p\u003e","title":"How to prevent memory leaks?"},{"content":"The common way to find memory leaks is by using Xcode Instruments. All you need is the following:\nOpen Xcode Instruments\nChoose Leaks option Select Simulator where you are going to test your application Select your installed application When you finish preparation, you can start immediate recoding and check application for leaks. To do that, you need to open Simulator and try some cases that could cause memory leaks.\nAfter you spend some time trying different scenarios, you can see that Instruments found Leaked Objects. Another way to find memory leaks is by using Debug Memory Graph in Xcode Debug Area. Inside Debug Memory Graph, you can find MemoryLeaks section. MemoryLeaks section displays what objects have strong reference cycles between themselves.\nAll tools above have opportunity to find and highlight potential issues and help you resolve them.\n","permalink":"http://localhost:1313/posts/how-to-find-memory-leaks/","summary":"\u003cp\u003eThe common way to find memory leaks is by using Xcode Instruments.\nAll you need is the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eOpen Xcode Instruments\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChoose Leaks option\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-3a9c2\" hidden\u003e\n    \u003clabel for=\"zoomCheck-3a9c2\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/1.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSelect Simulator where you are going to test your application\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-956ad\" hidden\u003e\n    \u003clabel for=\"zoomCheck-956ad\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/2.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSelect your installed application\n\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-1ab49\" hidden\u003e\n    \u003clabel for=\"zoomCheck-1ab49\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/3.jpg#center\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen you finish preparation, you can start immediate recoding and check application for leaks. To do that, you need to open Simulator and try some cases that could cause memory leaks.\u003c/p\u003e","title":"How to find memory leaks?"},{"content":"What is ARC? Swift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed. - Apple\nARC In Action In this example, we assign an instance to the reference1 property.\nnumber of references equals 1. class Storage { let data: Data init(data: Data) { self.data = data print(\u0026#34;\\(Self.self) is being initialized\u0026#34;) } deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } var reference1: Storage? var reference2: Storage? var reference3: Storage? reference1 = Storage(data: Data()) Now we can assign a reference to another two properties, reference2 and reference3. Whenever you assign a reference, you increase the counter.\nnumber of references equals 3. reference2 = reference1 reference3 = reference1 When you set reference2 and reference3 to nil, the number of references equals 1.\nreference2 = nil reference3 = nil Only when you set reference1 to nil object will be deinitialized.\nreference1 = nil Memory leaks Memory leaks appear when you have strong references between two instances that point to each other.\nIn this example, class Employee has optional department property, and class Department has optional employee property.\nclass Department { let name: String init(name: String) { self.name = name print(\u0026#34;\\(Self.self) is being initialized\u0026#34;) } var employee: Employee? deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } class Employee { let name: String init(name: String) { self.name = name print(\u0026#34;\\(Self.self) is being initialized\u0026#34;) } var department: Department? deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } var employee: Employee? var department: Department? employee = Employee(name: \u0026#34;John Doe\u0026#34;) department = Department(name: \u0026#34;Research and development\u0026#34;) If we try to assign Department reference to employee property and Employee reference to department property, it creates a memory leak by strong references that point to each other.\nemployee!.department = department department!.employee = employee If you try to set employee and department properties to nil, then these two objects can’t be deallocated because of the existing strong reference relationship between both objects.\nemployee = nil department = nil To avoid this unpleasant situation, we can use weak, unowned references.\nWeak reference If you use a weak keyword before a property, you say that this property should not keep a strong reference. Weak property should always be mutable and optional because ARC set the property to nil after the instance was deallocated.\nIn this example, Employee instance has department property with weak keyword. It means when we set employee property to nil ARC sets department property to nil and deallocates Department instance.\nclass Department { let name: String init(name: String) { self.name = name print(\u0026#34;\\(Self.self) is being initialized\u0026#34;) } var employee: Employee? deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } class Employee { let name: String init(name: String) { self.name = name print(\u0026#34;\\(Self.self) is being initialized\u0026#34;) } weak var department: Department? deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } var employee: Employee? var department: Department? employee = Employee(name: \u0026#34;John Doe\u0026#34;) department = Department(name: \u0026#34;Research and development\u0026#34;) employee!.department = department department!.employee = employee department = nil employee = nil Unowned reference Unowned reference can’t be optional, and it should always have value. If you try to access a deallocated property value, you will face a runtime error.\nIn this example, we have two instances: User and DiscountCard. DiscountCard has a relationship with the User that is marked as unowned to avoid a strong reference cycle.\nclass User { let name: String var discountCard: DiscountCard? init(name: String) { self.name = name } deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } class DiscountCard { let number: UInt64 unowned let user: User init(number: UInt64, user: User) { self.number = number self.user = user } deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } var user: User? user = User(name: \u0026#34;John Doe\u0026#34;) When you create DiscountCard instance and assign it as reference to user property, it no longer holds strong reference.\nuser!.discountCard = DiscountCard(number: 1234_5678_9012_3456, user: user!) After we set user property to nil, it will deallocate User and DiscountCard instances.\nuser = nil Strong Reference Cycles for Closures Strong reference cycle for closure can occur if you assign closure to property of instance. In this case, you assign reference to that closure. The strong reference cycle appears because closures are reference types.\nclass MemoryStorage { let text: String let additionalText: String? lazy var copy: () -\u0026gt; String = { if let additionalText = self.additionalText { self.text + \u0026#34;\\n\u0026#34; + additionalText } else { self.text } } init(text: String, additionalText: String? = nil) { self.text = text self.additionalText = additionalText } deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } var memoryStorage: MemoryStorage? = MemoryStorage(text: \u0026#34;Thank you for registration\u0026#34;, additionalText: \u0026#34;John Doe\u0026#34;) print(memoryStorage!.copy()) memoryStorage = nil In this example, closure captures self.text property and create strong reference cycle by referencing to self.\nBreaking Strong Reference Cycle in Closure To break strong reference cycle, we need to add capture list with unowned keyword to copy closure.\nclass MemoryStorage { let text: String let additionalText: String? lazy var copy: () -\u0026gt; String = { [unowned self] in if let additionalText = self.additionalText { self.text + \u0026#34;\\n\u0026#34; + additionalText } else { self.text } } init(text: String, additionalText: String? = nil) { self.text = text self.additionalText = additionalText } deinit { print(\u0026#34;\\(Self.self) is being deinitialized\u0026#34;) } } var memoryStorage: MemoryStorage? = MemoryStorage(text: \u0026#34;Thank you for registration\u0026#34;, additionalText: \u0026#34;John Doe\u0026#34;) print(memoryStorage!.copy()) memoryStorage = nil ","permalink":"http://localhost:1313/posts/arc-in-swift/","summary":"\u003ch3 id=\"what-is-arc\"\u003eWhat is ARC?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSwift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed. - Apple\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"arc-in-action\"\u003eARC In Action\u003c/h3\u003e\n\u003cp\u003eIn this example, we assign an instance to the \u003ccode\u003ereference1\u003c/code\u003e property.\u003c/p\u003e","title":"ARC in Swift"},{"content":"Introduction In this article, I’m going to briefly explain what closure is.\nClosures is self-conitained blocks of funcionality that can be passed around and used in your code. — Apple\nExpression:\n{ (params) -\u0026gt; return value in statements } @escaping When closure is marked as escaping, it will outlive or leave the scope you passed.\nfunc response(_ completionHandler: @escaping(Result) -\u0026gt; Void) { completionHandler(.success) } @nonescaping By default, closures are nonescaping, meaning closure will no longer exist in memory after complete execution in the scope you have passed it to.\nfunc filterImage(_ completionHandler: (Image) -\u0026gt; Void) { completionHandler(UIImage.filtered) } @autoclosure Autoclosures automatically create closure from the argument that you passed into a function.\nfunc animate(_ animation: @autoclosure @escaping () -\u0026gt; Void, duration: TimeInterval = 0.25) { UIView.animate(withDuration: duration, animations: animation) } Closure conceptualy looks like this first pointer points to the code that implements closure the second pointer pointed to the reference counted object.\nstruct Closure { var functionPointer: UnsafeRawPointer var closureContext: AnyObject? } ","permalink":"http://localhost:1313/posts/what-is-closure-in-swift-language/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn this article, I’m going to briefly explain what closure is.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eClosures is self-conitained blocks of funcionality that can be passed around and used in your code.\n— Apple\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eExpression:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003estatements\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"escaping\"\u003e@escaping\u003c/h3\u003e\n\u003cp\u003eWhen closure is marked as escaping, it will outlive or leave the scope you passed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletionHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eescaping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eVoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"n\"\u003ecompletionHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003esuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"nonescaping\"\u003e@nonescaping\u003c/h3\u003e\n\u003cp\u003eBy default, closures are nonescaping, meaning closure will no longer exist in memory after complete execution in the scope you have passed it to.\u003c/p\u003e","title":"What is closure in Swift language?"},{"content":"Introduction In Swift, classes, closures, and actors all reference types.\n\u0026lsquo;Reference type’ is instance that shares a single copy of data.\nAssigning a reference type to a constant or variable, or passing it into a function or method, it is always a reference to a shared instance that is assigned or passed in.\nExample You can pass your property value by sharing the same address in memory.\n// Reference type example class Storage { var data = “data-example” } var storage = Storage() print(\u0026#34;\\(storage.data)\u0026#34;) // prints \u0026#34;data-example\u0026#34; print(\u0026#34;storage address:\u0026#34;, Unmanaged.passUnretained(storage).toOpaque()) var copiedStorage = storage copiedStorage.data = “new-data” print(\u0026#34;\\(storage.data), \\(copiedStorage.data)\u0026#34;) // prints \u0026#34;new-data, new-data\u0026#34; print(\u0026#34;copiedStorage address:\u0026#34;, Unmanaged.passUnretained(copiedStorage).toOpaque()) As you can see, storage and copied storage property addresses are the same.\nSummary Copying data by reference refers to the same address in memory. This means that modifying data in one variable also affects another. It also means that multiple reference types may refer to the same object.\n","permalink":"http://localhost:1313/posts/what-is-reference-type-in-swift/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn Swift, classes, closures, and actors all reference types.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026lsquo;Reference type’ is instance that shares a single copy of data.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eAssigning a reference type to a constant or variable, or passing it into a function or method, it is always a reference to a shared instance that is assigned or passed in.\u003c/p\u003e\n\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\u003cp\u003eYou can pass your property value by sharing the same address in memory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Reference type example\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edata\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eexample\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003estorage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// prints \u0026#34;data-example\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;storage address:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eUnmanaged\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epassUnretained\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoOpaque\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecopiedStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estorage\u003c/span\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecopiedStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e, \u003c/span\u003e\u003cspan class=\"si\"\u003e\\(\u003c/span\u003e\u003cspan class=\"n\"\u003ecopiedStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// prints \u0026#34;new-data, new-data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;copiedStorage address:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eUnmanaged\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epassUnretained\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecopiedStorage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003etoOpaque\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-c7d1a\" hidden\u003e\n    \u003clabel for=\"zoomCheck-c7d1a\"\u003e\n        \u003cimg class=\"zoomCheck\" loading=\"lazy\" decoding=\"async\" \n            src=\"images/5.jpg\" alt=\"alt image\" \n             /\u003e\n    \u003c/label\u003e\n\u003c/p\u003e","title":"What is “reference type” in Swift?"},{"content":"Introduction The Composable Architecture (TCA) uses a unidirectional data flow (UDF). UDF is a design pattern where data and events move consistently and predictably. In UDF, data can only be transferred to other application parts in one way.\nIn TCA, the only way to mutate the state is by sending actions to a runtime store. The runtime store holds the entire app’s business logic and mutates the state inside.\nUDF can reduce data inconsistencies because of the single source of truth for the application.\nTCA is built around key components: Action State Reducer Effect Store Environment Code examples: Timer\nhttps://github.com/dmytrochumakov/TCA-Examples/tree/main/Timer/Timer/Timer Sources: https://github.com/pointfreeco/swift-composable-architecture https://www.youtube.com/watch?v=SfFDj6qT-xg\u0026ab_channel=SwiftandTips https://www.youtube.com/watch?v=XWZmgbylTpc\u0026ab_channel=SwiftHeroes https://www.youtube.com/watch?v=McmGb9sexMo\u0026ab_channel=SwiftandTips https://www.youtube.com/watch?v=McmGb9sexMo\u0026ab_channel=SwiftandTips https://markvillar.com/the-composable-architecture/ ","permalink":"http://localhost:1313/posts/lets-talk-about-composable-architecture/","summary":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe Composable Architecture (TCA) uses a unidirectional data flow (UDF).\nUDF is a design pattern where data and events move consistently and predictably. In UDF, data can only be transferred to other application parts in one way.\u003c/p\u003e\n\u003cp\u003eIn TCA, the only way to mutate the state is by sending actions to a runtime store. The runtime store holds the entire app’s business logic and mutates the state inside.\u003c/p\u003e\n\u003cp\u003eUDF can reduce data inconsistencies because of the single source of truth for the application.\u003c/p\u003e","title":"Let’s talk about Composable Architecture"}]