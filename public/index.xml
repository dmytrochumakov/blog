<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.123.3</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Sep 2024 07:12:55 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DSA - Binary Search Tree</title>
      <link>http://localhost:1313/posts/dsa-binary-search-tree/</link>
      <pubDate>Mon, 02 Sep 2024 07:12:55 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-binary-search-tree/</guid>
      <description>What is a Tree? A Tree is a data structure that has a root and subtrees of children, representing a set of linked nodes. Trees behave similarly to a LinkedList in that they have a collection of nodes starting with a head (root). The main difference is that Trees can have multiple children, whereas a LinkedList, on the other hand, can have only one next child.
I’m going to focus on a commonly used type of tree, the Binary Search Tree.</description>
    </item>
    <item>
      <title>DSA - Sliding Window</title>
      <link>http://localhost:1313/posts/dsa-sliding-window/</link>
      <pubDate>Wed, 28 Aug 2024 07:20:26 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-sliding-window/</guid>
      <description>What is the sliding window technique? The sliding window technique is a common algorithmic approach used to create a fixed-sized window that moves through the data one step at a time, typically from left to right, to perform specific operations or computations on the elements within the window.
What is the sliding window algorithm? The sliding window algorithm is a method for finding a subset of elements that satisfy certain conditions in a given problem.</description>
    </item>
    <item>
      <title>DSA - Linked List</title>
      <link>http://localhost:1313/posts/dsa-linked-list/</link>
      <pubDate>Tue, 27 Aug 2024 07:13:19 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-linked-list/</guid>
      <description>What is a Linked List? A linked list is a common data structure that is similar to an array, but its order is based on pointers to the next element in memory instead of using physical placement (indices).
A linked list has two main components:
ListNode class: This class has a val property that represents the value and a next property that represents a pointer to the next element in memory.</description>
    </item>
    <item>
      <title>DSA - Binary Search</title>
      <link>http://localhost:1313/posts/dsa-binary-search/</link>
      <pubDate>Mon, 26 Aug 2024 07:09:48 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-binary-search/</guid>
      <description>What is binary search? Binary search is an algorithm that helps find an element in a sorted array in O(log n) time.
Why should the input be sorted before performing binary search? The input array for binary search needs to be sorted because the algorithm eliminates half of the choices at each step. If the guessed value is greater than the target value, it knows that the right part can’t contain the target value.</description>
    </item>
    <item>
      <title>DSA - Stack</title>
      <link>http://localhost:1313/posts/dsa-stack/</link>
      <pubDate>Tue, 20 Aug 2024 07:17:01 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-stack/</guid>
      <description>What is a Stack? A stack is an abstract data type that serves as a collection of elements and implements operations like push, pop, and peek at the end in O(1) time. It uses the LIFO (last in, first out) order. For example, a stack can be a collection of items where adding or removing is practical at the top.
Code Example struct Stack&amp;lt;Element&amp;gt; { private var array: [Element] init(array: [Element] = []) { self.</description>
    </item>
    <item>
      <title>DSA - Two Pointers Technique</title>
      <link>http://localhost:1313/posts/dsa-two-pointers-technique/</link>
      <pubDate>Sat, 17 Aug 2024 07:00:23 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-two-pointers-technique/</guid>
      <description>What is the Two Pointers Technique? The two pointers technique helps track indices in a collection of elements to access objects in memory by index with O(1) space. This technique is very handy when you need to optimize the time and space of a solution.
What Problems Does It Solve? The two pointers technique solves problems involving collections. For example, it is useful when you need to compare each element to other elements in that collection.</description>
    </item>
    <item>
      <title>DSA - Merge Sorted Array Problem</title>
      <link>http://localhost:1313/posts/dsa-merge-sorted-array-problem/</link>
      <pubDate>Thu, 15 Aug 2024 07:04:16 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-merge-sorted-array-problem/</guid>
      <description>Introduction In the previous chapter, we discussed Data Structures and Algorithms, delved into an overview of Dynamic Arrays, and solved the &amp;ldquo;Remove Element&amp;rdquo; problem.
In this article, I&amp;rsquo;m going to show one of the ways to solve the 88. Merge Sorted Array problem.
Problem You are given two integer arrays, nums1 and nums2, sorted in non-decreasing order, and two integers, m and n, representing the number of elements in nums1 and nums2, respectively.</description>
    </item>
    <item>
      <title>Data Structures and Algorithms Arrays Swift</title>
      <link>http://localhost:1313/posts/data-structures-and-algorithms-arrays-swift/</link>
      <pubDate>Mon, 12 Aug 2024 07:01:34 +0300</pubDate>
      <guid>http://localhost:1313/posts/data-structures-and-algorithms-arrays-swift/</guid>
      <description>Introduction I’ve always been curious about data structures and algorithms, and how they can improve user experiences while saving money for businesses through optimized computations.
In this series of articles, I’m going to solve LeetCode problems and share my approach with you.
I’ve just started my journey in solving LeetCode problems, so my solutions might not be as efficient as they could be, but I’m always looking for improvement.
Before each topic, I’ll provide a brief introduction to the data structure, algorithm, or technique I’ll be using to solve a specific problem.</description>
    </item>
    <item>
      <title>Optimizing iOS App Performance - Common Techniques</title>
      <link>http://localhost:1313/posts/optimizing-ios-app-performance-common-techniques/</link>
      <pubDate>Wed, 31 Jul 2024 07:26:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/optimizing-ios-app-performance-common-techniques/</guid>
      <description>Introduction A well-performing application is the heart of a good user experience. If an application responds well, it helps attract more users and grow the business around it. On the other hand, if it performs poorly, it frustrates users and leads them to uninstall the app. To solve these issues, we need tools to monitor app behavior. Luckily for us, Xcode provides a list of tools that will help us resolve these problems.</description>
    </item>
    <item>
      <title>Implementing HealthKit in an iOS App</title>
      <link>http://localhost:1313/posts/implementing-healthkit-in-an-ios-app/</link>
      <pubDate>Fri, 26 Jul 2024 07:18:58 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-healthkit-in-an-ios-app/</guid>
      <description>Introduction Previously, I worked with a healthcare app that used the HealthKit framework, but I did not get the opportunity to implement it myself. I decided to look into it and share what I found. In this article, I will focus on the steps to integrate HealthKit, write, and access its data.
Preparation Before we dive into implementation, I assume that you have an active Apple Developer account; without it, you will not be able to access the HealthKit Store.</description>
    </item>
    <item>
      <title>Implementing Location Service</title>
      <link>http://localhost:1313/posts/implementing-location-service/</link>
      <pubDate>Tue, 23 Jul 2024 07:04:25 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-location-service/</guid>
      <description>Introduction Nowadays, location is an essential feature in almost every application. It&amp;rsquo;s very important to know the best ways to implement it without affecting performance and user experience. In this article, I will focus on how to implement general methods in location service.
Preparation Before we begin, let&amp;rsquo;s add location permission keys to Info.plist:
Privacy - Location When In Use Usage Description Privacy - Location Always and When In Use Usage Description First Step The first step is to create LocationService with the requestPermissions method to be able to receive location events.</description>
    </item>
    <item>
      <title>Implementing ChatGPT in an iOS App</title>
      <link>http://localhost:1313/posts/implementing-chatgpt-in-an-ios-app/</link>
      <pubDate>Sun, 21 Jul 2024 07:25:28 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-chatgpt-in-an-ios-app/</guid>
      <description>Introduction I haven&amp;rsquo;t had the opportunity to build a chatbot before. This topic was trending some time ago, and I always wanted to implement it myself. In this article, I will focus on the steps you need to know to successfully build and run a chatbot application.
First Step The first step is to add the OpenAI dependency to your project:
.package(url: &amp;#34;https://github.com/MacPaw/OpenAI.git&amp;#34;, branch: &amp;#34;main&amp;#34;) dependencies: [ .byNameItem( name: &amp;#34;OpenAI&amp;#34;, condition: .</description>
    </item>
    <item>
      <title>Implementing Apple Sign-In to an iOS App</title>
      <link>http://localhost:1313/posts/implementing-apple-sign-in-to-an-ios-app/</link>
      <pubDate>Thu, 18 Jul 2024 07:26:13 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-apple-sign-in-to-an-ios-app/</guid>
      <description>Introduction The Apple Sign-In feature is very helpful and offers users login functionality with one click. It could be highly beneficial from a business perspective to attract more potential customers by providing easy and secure access to application functionality. In this article, I will focus on how to implement Apple Sign-In.
Before implementation, let’s set up the necessary options to be able to run the app without errors.
Add Sign in with Apple Capability to the project &amp;#x1f4dd; Before testing on the simulator, you need to be signed in to an account with enabled two-factor authentication.</description>
    </item>
    <item>
      <title>Implementing gRPC Swift</title>
      <link>http://localhost:1313/posts/implementing-grpc-swift/</link>
      <pubDate>Tue, 16 Jul 2024 07:16:41 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-grpc-swift/</guid>
      <description>Introduction I&amp;rsquo;ve never had the chance to use this technology before. I&amp;rsquo;ve always wondered how gRPC operates. In this article, I will explore what gRPC is, how to install and use it, and when to use gRPC.
What is gRPC? gRPC is an open-source, high-performance framework that facilitates efficient communication in distributed systems. gRPC is an implementation of the RPC (Remote Procedure Call) protocol, which enables services to call functions on other machines as if they were local software methods.</description>
    </item>
    <item>
      <title>Scanning NFC tags using CoreNFC in an iOS app</title>
      <link>http://localhost:1313/posts/scanning-nfc-tags-using-corenfc-in-an-ios-app/</link>
      <pubDate>Fri, 12 Jul 2024 07:27:51 +0300</pubDate>
      <guid>http://localhost:1313/posts/scanning-nfc-tags-using-corenfc-in-an-ios-app/</guid>
      <description>Introduction I never had a chance to work with NFC (Near Field Communication), but I have always been curious to find out how it works. In this article, I will focus on scanning NFC tags using CoreNFC with NFCNDEFReaderSession.
Preparation Before we begin, let&amp;rsquo;s add the necessary objects:
Near Field Communication Tag Reading capability to the project. Privacy - NFC Scan Usage Description key to Info.plist. Near Field Communication Tag Reader Session Formats to the entitlements file.</description>
    </item>
    <item>
      <title>Scanning for peripheral devices using BLE in an iOS app</title>
      <link>http://localhost:1313/posts/scanning-for-peripheral-devices-using-ble-in-an-ios-app/</link>
      <pubDate>Wed, 10 Jul 2024 07:27:14 +0300</pubDate>
      <guid>http://localhost:1313/posts/scanning-for-peripheral-devices-using-ble-in-an-ios-app/</guid>
      <description>Introduction I had the chance to work on a project where communication via BLE was at the heart of the project.
Before adding any code to application, I always asked myself about two scenarios:
The first scenario is when the device acts as a central device while searching for and connecting to peripheral devices. The second scenario is when the device acts as a peripheral device by using CBCharacteristic and changes its value.</description>
    </item>
    <item>
      <title>Battery Performance Testing for iOS App</title>
      <link>http://localhost:1313/posts/battery-performance-testing-for-ios-app/</link>
      <pubDate>Sun, 07 Jul 2024 07:25:40 +0300</pubDate>
      <guid>http://localhost:1313/posts/battery-performance-testing-for-ios-app/</guid>
      <description>Introduction Working with batteries on iOS devices for large applications has always been tricky. The amount of energy consumed by the screen, location services, network calls, processing, background tasks, etc., is significant. From a developer&amp;rsquo;s perspective, it seems complicated, but Xcode provides tools to address this problem.
To find the issue, you need to open Xcode and go to the Debug Navigator.
In the Debug Navigator, you will see the Energy Impact gauge.</description>
    </item>
    <item>
      <title>Creating a 2D Space Game for iOS Using SpriteKit - Part 2</title>
      <link>http://localhost:1313/posts/creating-2d-space-game-for-ios-using-spritekit-part-2/</link>
      <pubDate>Wed, 03 Jul 2024 06:39:04 +0300</pubDate>
      <guid>http://localhost:1313/posts/creating-2d-space-game-for-ios-using-spritekit-part-2/</guid>
      <description>Introduction In the previous chapter, I started talking about the video game creation process, from project setup to adding the background. Now, I&amp;rsquo;m going to add the player and physics to it.
You can download the project here.
First Step The first step is to initialize player using SKSpriteNode, set up player.position, and add player as a child node.
SKSpriteNode - is an onscreen graphical element that can be initialized from an image or a solid color.</description>
    </item>
    <item>
      <title>Creating a 2D Space Game for iOS Using SpriteKit - Part 1</title>
      <link>http://localhost:1313/posts/creating-2d-space-game-for-ios-using-spritekit-part-1/</link>
      <pubDate>Fri, 28 Jun 2024 07:18:59 +0300</pubDate>
      <guid>http://localhost:1313/posts/creating-2d-space-game-for-ios-using-spritekit-part-1/</guid>
      <description>Introduction I have never tried creating a game before; it feels like magic to me. I know that games have an enormous amount of underlying layers of abstractions and tools such as game engines, rendering, and so on. I have always been eager to learn at least 1% of the game creation process. In this article, I&amp;rsquo;m going to explore step-by-step instructions for creating a game for the iOS platform using SpriteKit.</description>
    </item>
    <item>
      <title>Combine practical usage examples</title>
      <link>http://localhost:1313/posts/combine-practical-usage-examples/</link>
      <pubDate>Sat, 22 Jun 2024 07:13:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/combine-practical-usage-examples/</guid>
      <description>Introduction When working in a large codebase with a significant number of async events, I often found myself in situations where I couldn&amp;rsquo;t combine events effectively. This resulted in optimization problems and inefficient consumption of OS resources.
The codebase contained closures and async/await, so it wasn&amp;rsquo;t possible to use operators like merge or combineLatest. After discovering this limitation, I decided to add new methods using Combine.
I will be demonstrating this with a simple NetworkService responsible only for executing and validating requests using Combine.</description>
    </item>
    <item>
      <title>Testing push notifications locally in an iOS app</title>
      <link>http://localhost:1313/posts/testing-push-notifications-locally-in-an-ios-app/</link>
      <pubDate>Wed, 19 Jun 2024 07:13:19 +0300</pubDate>
      <guid>http://localhost:1313/posts/testing-push-notifications-locally-in-an-ios-app/</guid>
      <description>Introduction I always wondered how I could automate testing the push notification process. Even when Apple introduced the possibility of dragging a configured file to the simulator to display a notification, it is still a manual process. I&amp;rsquo;ll skip testing via the terminal because I think it takes more time than using an APNS file or the RocketSim app.
Before I was first introduced to the RocketSim app, I used an APNS file for testing push notifications.</description>
    </item>
    <item>
      <title>Adding Push Notifications to an iOS App</title>
      <link>http://localhost:1313/posts/adding-push-notifications-to-an-ios-app/</link>
      <pubDate>Fri, 14 Jun 2024 07:29:01 +0300</pubDate>
      <guid>http://localhost:1313/posts/adding-push-notifications-to-an-ios-app/</guid>
      <description>Introduction If you start a project from scratch, you need to always create some kind of service like PushNotificationService that will be responsible for handling push notification events. In this article, I want to explore a simple implementation of PushNotificationService to be able to reuse and customize it in future projects.
First Step The first step is to add the Push Notifications capability to your project. Go to your project -&amp;gt; Signing &amp;amp; Capabilities -&amp;gt; Tap + Capability -&amp;gt; Search for Push Notifications.</description>
    </item>
    <item>
      <title>Caching data using NSCache in iOS</title>
      <link>http://localhost:1313/posts/caching-data-using-nscache-in-ios/</link>
      <pubDate>Wed, 05 Jun 2024 07:13:58 +0300</pubDate>
      <guid>http://localhost:1313/posts/caching-data-using-nscache-in-ios/</guid>
      <description>Introduction I was curious about caching data using NSCache for an iOS app. So, I did some digging. Here is what I found:
Quick Overview NSCache helps store data in memory. When the application gets killed, it frees memory; it’s not persisted on disk. Storing data is carried out using a key-value pair mechanism like Dictionary. You can set automatic eviction to delete objects automatically. NSCache has multi-platform support: iOS, iPadOS, watchOS, macOS, and tvOS.</description>
    </item>
    <item>
      <title>Accessibility iOS SwiftUI</title>
      <link>http://localhost:1313/posts/accessibility-ios-swiftui/</link>
      <pubDate>Sun, 02 Jun 2024 09:04:06 +0300</pubDate>
      <guid>http://localhost:1313/posts/accessibility-ios-swiftui/</guid>
      <description>Introduction Previously, I posted about Accessibility for UIKit. The idea behind this post is to find differences between UIKit Accessibility and SwiftUI features.
Similarities: Both UIKit and SwiftUI have accessibilityLabel and accessibilityHints APIs.
Differences: To use dynamic type for fonts, you need additional modifiers in SwiftUI. struct ScaledFont: ViewModifier { @Environment(\.sizeCategory) var sizeCategory var name: String var size: Double func body(content: Content) -&amp;gt; some View { let scaledSize = UIFontMetrics.default.scaledValue(for: size) return content.</description>
    </item>
    <item>
      <title>Accessibility iOS UIKit</title>
      <link>http://localhost:1313/posts/accessibility-ios-uikit/</link>
      <pubDate>Thu, 30 May 2024 07:04:49 +0300</pubDate>
      <guid>http://localhost:1313/posts/accessibility-ios-uikit/</guid>
      <description>Introduction I was curious to find out how to make an application more accessible. You can look at popular applications like YouTube or Netflix; they all have accessibility features like VoiceOver and dynamic fonts. I decided to create this example for a fruit calorie counter. It contains a list of fruits with the fruit name, fruit calories, and a favorite button.
Where to Start Before diving into implementation details, I want to highlight some information about the existing accessibility features and what I will be focusing on.</description>
    </item>
    <item>
      <title>Text To Speech iOS</title>
      <link>http://localhost:1313/posts/text-to-speech-ios/</link>
      <pubDate>Fri, 24 May 2024 07:52:07 +0300</pubDate>
      <guid>http://localhost:1313/posts/text-to-speech-ios/</guid>
      <description>Introduction I was eager to learn how converting Text To Speech works in iOS. Here is what I discovered:
First Step The first step is to add AVSpeechSynthesizer, an object that produces synthesized speech from text utterances.
@State private var speechSynthesizer = AVSpeechSynthesizer() Second Step The second step is to add AVSpeechUtterance, an object that encapsulates the text for speech synthesis.
private var utterance: AVSpeechUtterance { let inputMessage = &amp;#34;Hello world!</description>
    </item>
    <item>
      <title>Speech To Text iOS</title>
      <link>http://localhost:1313/posts/speech-to-text-ios/</link>
      <pubDate>Thu, 23 May 2024 08:37:45 +0300</pubDate>
      <guid>http://localhost:1313/posts/speech-to-text-ios/</guid>
      <description>Introduction I always wanted an iOS app that would allow me to economize my time by converting speech to text. I know this option is built into the keyboard, but you first need to click the text field, then tap on the microphone, and finally speak. I wanted a one-click option with the possibility to integrate it into all my daily routines. Here is what I discovered:
First Step The first step is to request authorization to access the device&amp;rsquo;s microphone using the Privacy - Speech Recognition Usage Description key and the Privacy - Microphone Usage Description key.</description>
    </item>
    <item>
      <title>Animation - UIKit</title>
      <link>http://localhost:1313/posts/animation-uikit/</link>
      <pubDate>Tue, 21 May 2024 06:31:02 +0300</pubDate>
      <guid>http://localhost:1313/posts/animation-uikit/</guid>
      <description>Introduction I was curious about creating animations in UIKit. I wanted to animate different properties such as color and path. Here is what I found:
It’s impossible to create complex animations only by using the block-based animation API. To do that, you need the Core Animation API and CAPropertyAnimation with its various subclasses.
Complex animation in UIKit is based on a few key components:
CAShapeLayer - provides extensive customization options: path, stroke, fill, shadow CABasicAnimation - helps animate color or change the path Implementation First Step The first step is to create a shape layer that will draw an arrow using CAShapeLayer.</description>
    </item>
    <item>
      <title>Animation - SwiftUI</title>
      <link>http://localhost:1313/posts/animation-swiftui/</link>
      <pubDate>Fri, 17 May 2024 07:23:46 +0300</pubDate>
      <guid>http://localhost:1313/posts/animation-swiftui/</guid>
      <description>Introduction I was eager to learn about creating complex animations in SwiftUI. The few questions that were on my mind included what types of animations exist and what I can animate. Here is what I found:
Types of Animation SwiftUI has explicit and implicit animation types.
Implicit Animation: This is specified with the .animation() modifier. SwiftUI will animate changes in old and new values.
struct ImplicitAnimation: View { @State private var half = false @State private var dim = false var body: some View { Image(&amp;#34;tower&amp;#34;) .</description>
    </item>
    <item>
      <title>Implementing GraphQL in an iOS application</title>
      <link>http://localhost:1313/posts/implementing-graphql-in-an-ios-application/</link>
      <pubDate>Wed, 15 May 2024 07:13:39 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-graphql-in-an-ios-application/</guid>
      <description>Introduction I previously never had a chance to work with GraphQL. I was excited to learn when to apply this technology, what tools I can use, and how I can implement it. Here’s what I found:
For testing, I used the Star Wars GraphQL API with AllFilmsQuery:
query AllFilmsQuery { allFilms { films { title director created producers releaseDate } } } I requested allFilms with title, director, created, producers, and releaseDate information.</description>
    </item>
    <item>
      <title>Securing user data with Keychain, Touch ID, and Face ID</title>
      <link>http://localhost:1313/posts/securing-user-data-with-keychain-touch-id-and-face-id/</link>
      <pubDate>Mon, 13 May 2024 07:31:49 +0300</pubDate>
      <guid>http://localhost:1313/posts/securing-user-data-with-keychain-touch-id-and-face-id/</guid>
      <description>Introduction I was eager to learn about securing user data using Keychain and biometric authentication. Here are a few steps I found:
Caveats You can test accessing Keychain data using Touch ID and Face ID only on a real device.
First Step The first step is to add the Privacy - Face ID Usage Description key to your Info.plist. Without it, you would not be able to retrieve data from Keychain using Face ID.</description>
    </item>
    <item>
      <title>Implementing In-App Purchases to SwiftUI app using StoreKit 2</title>
      <link>http://localhost:1313/posts/implementing-in-app-purchases-to-swiftui-app-using-storekit-2/</link>
      <pubDate>Sun, 12 May 2024 07:57:51 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-in-app-purchases-to-swiftui-app-using-storekit-2/</guid>
      <description>Introduction I was wondering how to add in-app purchases to my app. I chose non-consumable in-app purchase because you can pay one time for this item. Here are a few steps on how I did it.
First Step Set up In-App Purchases for your app in App Store Connect account or add a .storekit configuration file and start from there. If you&amp;rsquo;ve already set up In-App Purchases in your account, you can sync the StoreKit config with that data.</description>
    </item>
    <item>
      <title>Implementing Apple Pay in a SwiftUI app</title>
      <link>http://localhost:1313/posts/implementing-apple-pay-in-a-swiftui-app/</link>
      <pubDate>Sat, 11 May 2024 07:25:24 +0300</pubDate>
      <guid>http://localhost:1313/posts/implementing-apple-pay-in-a-swiftui-app/</guid>
      <description>Introduction Sometime ago, I was working on a marketplace app, and I needed to add Apple Pay to make purchases more easily. Here are a few steps on how I did it: First Step You need to add Apple Pay capability to your project. You will need to Register a Merchant ID. I will skip this step; you can find info by following this link Setting up Apple Pay. Second Step You will need to import PassKit and create PKPaymentRequest to interact with PKPaymentAuthorizationController and PKPaymentAuthorizationControllerDelegate.</description>
    </item>
    <item>
      <title>Integration testing for SwiftUI views</title>
      <link>http://localhost:1313/posts/integration-testing-for-swiftui-views/</link>
      <pubDate>Fri, 10 May 2024 06:20:50 +0300</pubDate>
      <guid>http://localhost:1313/posts/integration-testing-for-swiftui-views/</guid>
      <description>Introduction I have been looking for information about implementation details of integration testing. I found a lot of information, but it was theoretical and all information looked the same. I did not find a meaningful example, so I tried to come up with my own definition and sample.
Integration testing means testing the behavior between modules or views to ensure they work as expected after user actions.
There are two ways of conducting integration testing: The first is by unit tests, where you try to test the flowing data between view models.</description>
    </item>
    <item>
      <title>UI testing SwiftUI views using XCTest Framework</title>
      <link>http://localhost:1313/posts/ui-testing-swiftui-views-using-xctest-framework/</link>
      <pubDate>Wed, 08 May 2024 06:34:32 +0300</pubDate>
      <guid>http://localhost:1313/posts/ui-testing-swiftui-views-using-xctest-framework/</guid>
      <description>Introduction After spending some time developing my personal iOS app, I found myself in a position where I needed to add UI tests to my application. The reason behind this decision was the necessity to change the architecture to make it more scalable. However, this task proved to be challenging due to certain parts of the code being tightly coupled. The situation was quite frustrating. To address this problem, I decided to incorporate UI tests that could help identify issues during the refactoring process.</description>
    </item>
    <item>
      <title>Building Dynamic Island for Video Streaming App</title>
      <link>http://localhost:1313/posts/building-dynamic-island-for-video-streaming-app/</link>
      <pubDate>Mon, 06 May 2024 07:35:52 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-dynamic-island-for-video-streaming-app/</guid>
      <description>Introduction I was curious about how to add Dynamic Island and implement it into a Video Streaming App. Here are a few steps on how you can achieve this.
Caveats Debugging Dynamic Island can be a bit tricky; it only works when the main app is running. If you try to run it separately, you will encounter the error SendProcessControlEvent:toPid: encountered an error: Error Domain=com.apple.dt.deviceprocesscontrolservice Code=8 &amp;quot;Failed to show Widget&amp;quot;. The solution is to configure live activities and run them through the main app.</description>
    </item>
    <item>
      <title>Building Video Streaming Widget for iOS App</title>
      <link>http://localhost:1313/posts/building-video-streaming-widget-for-ios-app/</link>
      <pubDate>Sun, 05 May 2024 07:20:29 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-video-streaming-widget-for-ios-app/</guid>
      <description>Introduction I was exploring the idea of creating a YouTube-like widget for the lock screen on iOS devices. It wasn&amp;rsquo;t easy because most articles on the Internet discussed general implementations, such as for a coffee shop or a to-do list. Even when I found some similar versions, the project wouldn&amp;rsquo;t compile. I made the decision to approach it my way, so here&amp;rsquo;s what I found out:
Caveats After being stuck for two or more hours without understanding why, after tapping on a button, I wasn&#39;t able to receive a callback from it and the widget always opened the main iOS app, I realized that I forgot to add AppIntent - without it, you can&amp;rsquo;t handle actions for iOS 17.</description>
    </item>
    <item>
      <title>Building Video Streaming iOS App</title>
      <link>http://localhost:1313/posts/building-video-streaming-ios-app/</link>
      <pubDate>Fri, 03 May 2024 07:34:56 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-video-streaming-ios-app/</guid>
      <description>Introduction I was looking for a way to add a video player to my iOS app that could be able to play remote videos.
Caveats Problem I found that you can&amp;rsquo;t open Vimeo or Youtube videos because of AVFoundationErrorDomain Code=-11850 &amp;quot;Operation Stopped&amp;quot; UserInfo={NSLocalizedFailureReason=The server is not correctly configured Domain=NSOSStatusErrorDomain Code=-12939 error. I don’t know exactly what this means, but I&amp;rsquo;m speculating it&amp;rsquo;s related to some protection.
Solution My solution was to find another video that is not related to those platforms.</description>
    </item>
    <item>
      <title>Building Group Chat using WebSockets</title>
      <link>http://localhost:1313/posts/building-group-chat-using-websockets/</link>
      <pubDate>Thu, 02 May 2024 15:15:14 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-group-chat-using-websockets/</guid>
      <description>Introduction I never had a chance to work with WebSockets, so I decided to take a look and create a group chat. Here&amp;rsquo;s what I discovered:
To be able to send and receive messages, you need to create an interface for communication between a server and your application. In my case, I chose sendMessage and receiveMessage methods. For the server-side, I chose Node.js. For the iOS application, I chose the Socket.</description>
    </item>
    <item>
      <title>Exploring visionOS</title>
      <link>http://localhost:1313/posts/exploring-visionos/</link>
      <pubDate>Thu, 02 May 2024 08:45:39 +0300</pubDate>
      <guid>http://localhost:1313/posts/exploring-visionos/</guid>
      <description>Introduction I find myself fascinated by the idea of creating an app for visionOS where I could possibly display 3D AirPods that I like. Here are a few steps on how you can do the same:
First step The first step that you need to do is to create a visionOS project.
Second step The next step would be adding a 3D object to Reality Composer Pro and exporting it as a .</description>
    </item>
    <item>
      <title>iOS AR App: Experience 3D Guitar</title>
      <link>http://localhost:1313/posts/ios-ar-app-experience-3d-guitar/</link>
      <pubDate>Wed, 01 May 2024 15:57:54 +0300</pubDate>
      <guid>http://localhost:1313/posts/ios-ar-app-experience-3d-guitar/</guid>
      <description>Introduction I was searching for an AR implementation of a 3D guitar inside an iOS app. Here&amp;rsquo;s what I discovered:
First Step The first step is not related to building the app. Before that you need to create a project using the Reality Composer Pro app (you can find it through Spotlight search).
Second Step After that, you need to visit https://developer.apple.com/augmented-reality/quick-look/ and download one of the USDZ files. In my case, I chose the 3D guitar.</description>
    </item>
    <item>
      <title>Building movie recommendations using ML</title>
      <link>http://localhost:1313/posts/building-movie-recommendations-using-ml/</link>
      <pubDate>Wed, 01 May 2024 10:29:44 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-movie-recommendations-using-ml/</guid>
      <description>Introduction I was wondering about how to create movie recommendations, so I decided to take a closer look and find out more about this topic. This is what I found:
First step: You need to create a JSON file with the data that you will use to train the model and define the parameters for training the model.
[ { &amp;#34;title&amp;#34;: &amp;#34;Avatar&amp;#34;, &amp;#34;year&amp;#34;: &amp;#34;2009&amp;#34;, &amp;#34;rated&amp;#34;: &amp;#34;PG-13&amp;#34;, &amp;#34;released&amp;#34;: &amp;#34;18 Dec 2009&amp;#34;, &amp;#34;runtime&amp;#34;: &amp;#34;162 min&amp;#34;, &amp;#34;genre&amp;#34;: &amp;#34;Action, Adventure, Fantasy&amp;#34;, &amp;#34;director&amp;#34;: &amp;#34;James Cameron&amp;#34;, &amp;#34;writer&amp;#34;: &amp;#34;James Cameron&amp;#34;, &amp;#34;actors&amp;#34;: &amp;#34;Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang&amp;#34;, &amp;#34;plot&amp;#34;: &amp;#34;A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.</description>
    </item>
    <item>
      <title>Testing Xcode project using Github Actions</title>
      <link>http://localhost:1313/posts/testing-xcode-project-using-github-actions/</link>
      <pubDate>Fri, 26 Apr 2024 06:51:21 +0300</pubDate>
      <guid>http://localhost:1313/posts/testing-xcode-project-using-github-actions/</guid>
      <description>Introduction If you&amp;rsquo;re wondering how to test an Xcode project using GitHub Actions, here are a few steps:
First, you need to create a .github/workflows folder with a CI.yml file inside your project directory. Next, you need to add configuration to the CI.yml file. name: CI on: push: branches: - main jobs: build: runs-on: macos-14 steps: - name: Checkout code uses: actions/checkout@v4 - name: Set up Xcode version run: sudo xcode-select -s /Applications/Xcode_15.</description>
    </item>
    <item>
      <title>Building Xcode project using Github Actions</title>
      <link>http://localhost:1313/posts/building-xcode-project-using-github-actions/</link>
      <pubDate>Tue, 23 Apr 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-xcode-project-using-github-actions/</guid>
      <description>Introduction If you&amp;rsquo;re wondering how to build an Xcode project using GitHub Actions, here are a few steps:
First, you need to create a .github/workflows folder with a CI.yml file inside your project directory. Next, you need to add configuration to the CI.yml file. name: CI on: push: branches: - main jobs: build: runs-on: macos-14 steps: - name: Checkout code uses: actions/checkout@v4 - name: Set up Xcode version run: sudo xcode-select -s /Applications/Xcode_15.</description>
    </item>
    <item>
      <title>Delivering iOS app using Fastlane</title>
      <link>http://localhost:1313/posts/delivering-ios-app-using-fastlane/</link>
      <pubDate>Fri, 19 Apr 2024 06:49:13 +0300</pubDate>
      <guid>http://localhost:1313/posts/delivering-ios-app-using-fastlane/</guid>
      <description>Introduction You can easily deliver an iOS app in two ways: through beta and release lanes.
The First Way - TestFlight By creating a beta lane inside the Fastfile. It utilizes:
build_app: To easily build and sign your app (via gym). pilot: Makes it easier to manage your app on Apple’s TestFlight. lane :beta do build_app(scheme: &amp;#34;YourScheme&amp;#34;) pilot end To run Fastlane:
fastlane beta Attention Before proceeding, you need to have the ipa or pkg file generated.</description>
    </item>
    <item>
      <title>Archiving Xcode project using the CLI</title>
      <link>http://localhost:1313/posts/archiving-xcode-project-using-the-cli/</link>
      <pubDate>Tue, 16 Apr 2024 13:46:03 +0300</pubDate>
      <guid>http://localhost:1313/posts/archiving-xcode-project-using-the-cli/</guid>
      <description>Introduction When you are working on different projects sometimes you need to use different IDE’s. You need to find a way to archive a project in the fastest way.
One of such ways is by using the xcodebuild archive command Basic outline of the process Open Terminal: Open the Terminal application on your Mac. Navigate to Project Directory: Use the cd command to navigate to the directory containing your Xcode project.</description>
    </item>
    <item>
      <title>Testing Xcode project using the CLI</title>
      <link>http://localhost:1313/posts/testing-xcode-project-using-the-cli/</link>
      <pubDate>Fri, 12 Apr 2024 03:20:34 +0300</pubDate>
      <guid>http://localhost:1313/posts/testing-xcode-project-using-the-cli/</guid>
      <description>Introduction When you are working on different projects sometimes you need to use different IDE’s. You need to find a way to test a project in the fastest way.
One of such ways is by using the xcodebuild command Basic outline of the process Open Terminal: Open the Terminal application on your Mac. Navigate to Project Directory: Use the cd command to navigate to the directory containing your Xcode project. Run xcodebuild: Once you&amp;rsquo;re in the project directory, you can run xcodebuild with the appropriate parameters to build your project.</description>
    </item>
    <item>
      <title>Building Xcode project using the CLI</title>
      <link>http://localhost:1313/posts/building-xcode-project-using-the-cli/</link>
      <pubDate>Fri, 05 Apr 2024 04:59:38 +0300</pubDate>
      <guid>http://localhost:1313/posts/building-xcode-project-using-the-cli/</guid>
      <description>Introduction When you are working on different projects sometimes you need to use different IDE’s. You need to find a way to build a project in the fastest way.
One of such ways is by using the xcodebuild command Basic outline of the process Open Terminal: Open the Terminal application on your Mac. Navigate to Project Directory: Use the cd command to navigate to the directory containing your Xcode project. Run xcodebuild: Once you&amp;rsquo;re in the project directory, you can run xcodebuild with the appropriate parameters to build your project.</description>
    </item>
    <item>
      <title>The Visitor Pattern</title>
      <link>http://localhost:1313/posts/the-visitor-pattern/</link>
      <pubDate>Mon, 01 Apr 2024 08:01:22 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-visitor-pattern/</guid>
      <description>What is a Visitor Pattern? The Visitor Pattern helps add new capabilities to a composite of objects.
Source
What problems does it solve? The Visitor Pattern helps solve following problems:
Separation of Concerns: The Visitor Pattern separates algorithms from the objects on which they operate. This allows for clean code organization by keeping algorithms and operations separate from the data structures they operate on. Extensibility: It allows you to add new operations to existing object structures without modifying those structures.</description>
    </item>
    <item>
      <title>The Memento Pattern</title>
      <link>http://localhost:1313/posts/the-memento-pattern/</link>
      <pubDate>Fri, 22 Mar 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-memento-pattern/</guid>
      <description>What is a Memento Pattern? The Memento Pattern helps return an object to one of its previous states; for instance, if the user requests an “undo” operation.
Source
What problems does it solve? The Memento Pattern helps solve following problems:
Undo/Redo Functionality: Memento allows you to capture an object’s state at a specific point in time and store it externally. This enables you to implement undo/redo functionality by restoring the object to its previous state.</description>
    </item>
    <item>
      <title>The Interpreter Pattern</title>
      <link>http://localhost:1313/posts/the-interpreter-pattern/</link>
      <pubDate>Mon, 18 Mar 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-interpreter-pattern/</guid>
      <description>What is an Interpreter Pattern? The Interpreter Pattern helps implement a simple language and defines a class based representation for its grammar along with an interpreter to interpret its sentences.
Source
What problems does it solve? The Interpreter Pattern helps solve following problems:
Language Interpretation: When you have a language or syntax that needs to be interpreted, such as mathematical expressions, regular expressions, or domain-specific languages (DSLs), the Interpreter Pattern helps in implementing the logic to interpret and execute these expressions.</description>
    </item>
    <item>
      <title>The Flyweight Pattern</title>
      <link>http://localhost:1313/posts/the-flyweight-pattern/</link>
      <pubDate>Sun, 17 Mar 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-flyweight-pattern/</guid>
      <description>What is a Flyweight Pattern? The Flyweight Pattern refers to an object that minimizes memory usage by sharing some of its data with other similar objects.
Source
What problems does it solve? The Flyweight Pattern helps solve following problems:
Large Memory Footprint: When dealing with a large number of objects, especially if these objects share a significant amount of common state, traditional object creation can lead to excessive memory consumption. The Flyweight Pattern reduces memory usage by sharing this common state among multiple objects.</description>
    </item>
    <item>
      <title>The Chain Of Responsibility Pattern</title>
      <link>http://localhost:1313/posts/the-chain-of-responsibility-pattern/</link>
      <pubDate>Fri, 15 Mar 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-chain-of-responsibility-pattern/</guid>
      <description>What is a Chain Of Responsibility Pattern? The Chain Of Responsibility Pattern helps create a chain of objects to examine requests. Each object in turn examines a request and either handles it or passes onto the next object in the chain.
Source
What problems does it solve? The Chain Of Responsibility Pattern (CoR) helps solve following problems:
Dynamic Request Handling: It enables dynamic assignment of responsibilities at runtime. Handlers can be added, removed, or reordered without affecting the client’s code.</description>
    </item>
    <item>
      <title>The State Pattern</title>
      <link>http://localhost:1313/posts/the-state-pattern/</link>
      <pubDate>Sun, 10 Mar 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-state-pattern/</guid>
      <description>What is a State Pattern? The State Pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.
Source
What problems does it solve? Complex conditional logic: When an object’s behavior depends on its internal state, it often leads to complex conditional statements. The State pattern simplifies this by encapsulating each state and its behavior in separate classes, making the code more readable and maintainable.</description>
    </item>
    <item>
      <title>The Dependency Inversion Principle</title>
      <link>http://localhost:1313/posts/the-dependency-inversion-principle/</link>
      <pubDate>Tue, 05 Mar 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-dependency-inversion-principle/</guid>
      <description>What is a Dependency Inversion Principle? The Dependency Inversion Principle means that high-level modules should not depend on low-level modules.
Source
Source
What problems does it solve? The Dependency Inversion Principle (DIP) helps solve:
Rigidity Fragility Immobility problems Real-world code example Violation of DIP // High-level module directly depending on low-level modules class MessageService { func sendMessageViaEmail(message: String) { let emailSender = EmailSender() emailSender.sendMessage(message: message) } func sendMessageViaSMS(message: String) { let smsSender = SMSSender() smsSender.</description>
    </item>
    <item>
      <title>Big O notation</title>
      <link>http://localhost:1313/posts/big-o-notation/</link>
      <pubDate>Wed, 21 Feb 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/big-o-notation/</guid>
      <description>What is a Big O notation? The Big O notation helps identify algorithm efficiency. It can measure computation and memory growth with respect to input. Real-world code example O(n) — Linear Time
func containsValue(array: [Int], value: Int) -&amp;gt; Bool { for element in array { if element == value { return true } } return false } O(1) — Constant Time
func findFirstElement(array: [Int]) -&amp;gt; Int? { return array.first } Thank you for reading!</description>
    </item>
    <item>
      <title>Combine — Basics</title>
      <link>http://localhost:1313/posts/combine-basics/</link>
      <pubDate>Wed, 07 Feb 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/combine-basics/</guid>
      <description>What is Combine? Combine Framework provides an API for processing async events over time such as user-input, network response, and other dynamic data.
What is the purpose of Combine? The purpose of Combine is to simplify the management of async events and data streams.
Publishers Publisher declares that a type can transit a sequence of values over time. A publisher delivers elements to one or more Subscriber instances.
class PostService { func fetchPosts() -&amp;gt; AnyPublisher&amp;lt;[Post], Error&amp;gt; { guard let url = URL(string: &amp;#34;https://jsonplaceholder.</description>
    </item>
    <item>
      <title>Modern Concurrency</title>
      <link>http://localhost:1313/posts/modern-concurrency/</link>
      <pubDate>Sun, 04 Feb 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/modern-concurrency/</guid>
      <description>When was it introduced? It was introduced in Swift 5.5 at WWDC 2021.
You can find the more comprehensive info about Modern Concurrency in Swift Concurrency Manifesto.
What are actors? Actors eliminate shared mutable state and explicit synchronization through deep copying of all the data that passed to an actor to a message sent and preventing direct access to actor state. Actors are reference types.
actor DatabaseManager { private var data: [String: String] = [:] func readData(key: String) -&amp;gt; String?</description>
    </item>
    <item>
      <title>What are Threads in Swift?</title>
      <link>http://localhost:1313/posts/what-are-threads-in-swift/</link>
      <pubDate>Sat, 20 Jan 2024 08:29:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/what-are-threads-in-swift/</guid>
      <description>What is the Thread? A Thread is a small set of instructions that can be executed independently from the main program. Threads are often used to improve program performance by allowing multiple tasks to be executed at the same time. The Thread has its own stack, registers, and program counters.
Threads share memory address space, and it is possible to communicate between Threads using shared memory space. How to use it?</description>
    </item>
    <item>
      <title>DispatchGroup in Swift</title>
      <link>http://localhost:1313/posts/dispatchgroup-in-swift/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/dispatchgroup-in-swift/</guid>
      <description>What is DispatchGroup? DispatchGroup provides a mechanism to track the completion group of tasks.
How DispatchGroup works? DispatchGroup has three main methods, enter, leave and notify, that allow you to control the completion of a specific task.
let dispatchGroup = DispatchGroup() dispatchGroup.enter() dispatchGroup.leave() dispatchGroup.notify(queue: .main) {} Let`s talk about each of these methods. enter — manually indicate a block has entered group. leave — manually indicate a block in the group has been completed.</description>
    </item>
    <item>
      <title>Concurrency in Swift</title>
      <link>http://localhost:1313/posts/concurrency-in-swift/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/concurrency-in-swift/</guid>
      <description>What is concurrency? The system can perform multiple tasks simultaneously. By tasks, I mean code or instructions. Modern computer chips have multiple cores that allow developers to create and run various tasks on multiple cores. Even if your chip has one core operating system it will provide context switching mechanism by enabling it to execute multiple tasks concurrently.
Material about processes, threads I will skip explaining concepts about processes and threads because it is a vast topic, and it will take a lot of time to explain it.</description>
    </item>
    <item>
      <title>What are value types in Swift?</title>
      <link>http://localhost:1313/posts/what-are-value-types-in-swift/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/what-are-value-types-in-swift/</guid>
      <description>What are value types? Value types play a central role in programming languages by grouping data values.
`Value type” is a type of data copied when assigned to a new variable.
struct Storage { var data: String = &amp;#34;some data&amp;#34; } let originalStorage = Storage() var copiedStorage = originalStorage // `originalStorage` is copied to `copiedStorage` How can you pass value types? You can pass value type by copying value.
struct Storage { var data: String = &amp;#34;some data&amp;#34; } let originalStorage = Storage() var copiedStorage = originalStorage // `originalStorage` is copied to `copiedStorage` copiedStorage.</description>
    </item>
    <item>
      <title>How to prevent memory leaks?</title>
      <link>http://localhost:1313/posts/how-to-prevent-memory-leaks/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/how-to-prevent-memory-leaks/</guid>
      <description>I was searching for tools that could help me find memory leaks faster and would be simple in implementation without affecting performance and memory size of application.
I found a fantastic fit for this task LifetimeTracker developed by Krzysztof Zabłocki.
All you need is to add LifetimeTracker package to the project, inherit from LifetimeTrackable protocol, and add two lines of code.
class Department: LifetimeTrackable {} trackLifetime method to init of instance that you are going to verify, and lifetimeConfiguration property where you set max number of valid instances.</description>
    </item>
    <item>
      <title>How to find memory leaks?</title>
      <link>http://localhost:1313/posts/how-to-find-memory-leaks/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/how-to-find-memory-leaks/</guid>
      <description>The common way to find memory leaks is by using Xcode Instruments. All you need is the following:
Open Xcode Instruments
Choose Leaks option Select Simulator where you are going to test your application Select your installed application When you finish preparation, you can start immediate recoding and check application for leaks. To do that, you need to open Simulator and try some cases that could cause memory leaks.
After you spend some time trying different scenarios, you can see that Instruments found Leaked Objects.</description>
    </item>
    <item>
      <title>ARC in Swift</title>
      <link>http://localhost:1313/posts/arc-in-swift/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/arc-in-swift/</guid>
      <description>What is ARC? Swift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed. - Apple
ARC In Action In this example, we assign an instance to the reference1 property.</description>
    </item>
    <item>
      <title>What is closure in Swift language?</title>
      <link>http://localhost:1313/posts/what-is-closure-in-swift-language/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/what-is-closure-in-swift-language/</guid>
      <description>Introduction In this article, I’m going to briefly explain what closure is.
Closures is self-conitained blocks of funcionality that can be passed around and used in your code. — Apple
Expression:
{ (params) -&amp;gt; return value in statements } @escaping When closure is marked as escaping, it will outlive or leave the scope you passed.
func response(_ completionHandler: @escaping(Result) -&amp;gt; Void) { completionHandler(.success) } @nonescaping By default, closures are nonescaping, meaning closure will no longer exist in memory after complete execution in the scope you have passed it to.</description>
    </item>
    <item>
      <title>What is “reference type” in Swift?</title>
      <link>http://localhost:1313/posts/what-is-reference-type-in-swift/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/what-is-reference-type-in-swift/</guid>
      <description>Introduction In Swift, classes, closures, and actors all reference types.
&amp;lsquo;Reference type’ is instance that shares a single copy of data.
Assigning a reference type to a constant or variable, or passing it into a function or method, it is always a reference to a shared instance that is assigned or passed in.
Example You can pass your property value by sharing the same address in memory.
// Reference type example class Storage { var data = “data-example” } var storage = Storage() print(&amp;#34;\(storage.</description>
    </item>
    <item>
      <title>Let’s talk about Composable Architecture</title>
      <link>http://localhost:1313/posts/lets-talk-about-composable-architecture/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/lets-talk-about-composable-architecture/</guid>
      <description>Introduction The Composable Architecture (TCA) uses a unidirectional data flow (UDF). UDF is a design pattern where data and events move consistently and predictably. In UDF, data can only be transferred to other application parts in one way.
In TCA, the only way to mutate the state is by sending actions to a runtime store. The runtime store holds the entire app’s business logic and mutates the state inside.
UDF can reduce data inconsistencies because of the single source of truth for the application.</description>
    </item>
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>Information about me.</description>
    </item>
    <item>
      <title>Newsletter</title>
      <link>http://localhost:1313/newsletter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/newsletter/</guid>
      <description>newsletter</description>
    </item>
  </channel>
</rss>
