<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>150 on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/150/</link>
    <description>Recent content in 150 on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 Jun 2025 07:51:16 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/150/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode - 150 - Evaluate Reverse Polish Notation</title>
      <link>http://localhost:1313/posts/leetcode-150-evaluate-reverse-polish-notation/</link>
      <pubDate>Thu, 05 Jun 2025 07:51:16 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-evaluate-reverse-polish-notation/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;You are given an array of strings &lt;code&gt;tokens&lt;/code&gt; that represents an arithmetic expression in &lt;a href=&#34;https://en.wikipedia.org/wiki/Reverse_Polish_notation&#34;&gt;Reverse Polish Notation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Evaluate the expression. Return an integer that represents the value of the expression.&lt;/p&gt;
&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The valid operators are &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each operand may be an integer or another expression.&lt;/li&gt;
&lt;li&gt;The division between two integers always truncates toward zero.&lt;/li&gt;
&lt;li&gt;There will not be any division by zero.&lt;/li&gt;
&lt;li&gt;The input represents a valid arithmetic expression in reverse Polish notation.&lt;/li&gt;
&lt;li&gt;The answer and all the intermediate calculations can be represented in a 32-bit integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: tokens = [&amp;#34;2&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;+&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;*&amp;#34;]
Output: 9
Explanation: ((2 + 1) * 3) = 9
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: tokens = [&amp;#34;4&amp;#34;,&amp;#34;13&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;/&amp;#34;,&amp;#34;+&amp;#34;]
Output: 6
Explanation: (4 + (13 / 5)) = 6
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: tokens = [&amp;#34;10&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;+&amp;#34;,&amp;#34;-11&amp;#34;,&amp;#34;*&amp;#34;,&amp;#34;/&amp;#34;,&amp;#34;*&amp;#34;,&amp;#34;17&amp;#34;,&amp;#34;+&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;+&amp;#34;]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;constraints&#34;&gt;Constraints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= tokens.length &amp;lt;= 10^4&lt;/li&gt;
&lt;li&gt;tokens[i] is either an operator: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;/&lt;/code&gt;, or an integer in the range [-200, 200].&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explanation&#34;&gt;Explanation&lt;/h4&gt;
&lt;p&gt;Let’s take a look at the example with input &lt;code&gt;tokens = [&amp;quot;2&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;+&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;*&amp;quot;]&lt;/code&gt;, and try to figure out the way we can solve it.

    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-359c0&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-359c0&#34;&gt;
        &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34; 
            src=&#34;images/150.png#center&#34; alt=&#34;alt image&#34; 
             /&gt;
    &lt;/label&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode - 150 - Min Stack</title>
      <link>http://localhost:1313/posts/leetcode-150-min-stack/</link>
      <pubDate>Tue, 03 Jun 2025 07:29:07 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-min-stack/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Design a stack that supports &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, and &lt;strong&gt;retrieving the minimum element in constant time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Implement the &lt;code&gt;MinStack&lt;/code&gt; class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MinStack()&lt;/code&gt; initializes the stack object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void push(int val)&lt;/code&gt; pushes the element &lt;code&gt;val&lt;/code&gt; onto the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void pop()&lt;/code&gt; removes the element on the top of the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int top()&lt;/code&gt; gets the top element of the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int getMin()&lt;/code&gt; retrieves the minimum element in the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You must implement a solution with &lt;code&gt;O(1)&lt;/code&gt; time complexity for each function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode - 150 - Sliding Window Maximum</title>
      <link>http://localhost:1313/posts/leetcode-150-sliding-window-maximum/</link>
      <pubDate>Mon, 02 Jun 2025 07:18:22 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-sliding-window-maximum/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;You are given an array of integers &lt;code&gt;nums&lt;/code&gt;, and there is a sliding window of size &lt;code&gt;k&lt;/code&gt; which is moving from the very left of the array to the very right. You can only see the &lt;code&gt;k&lt;/code&gt; numbers in the window. Each time the sliding window moves right by one position.&lt;/p&gt;
&lt;p&gt;Return the max sliding window.&lt;/p&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: nums = [1], k = 1
Output: [1]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;constraints&#34;&gt;Constraints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 10^5&lt;/li&gt;
&lt;li&gt;-10^4 &amp;lt;= nums[i] &amp;lt;= 10^4&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= k &amp;lt;= nums.length&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explanation&#34;&gt;Explanation&lt;/h4&gt;
&lt;p&gt;Before we jump into the solution, let&amp;rsquo;s look at our example with &lt;code&gt;nums = [1,3,-1,-3,5,3,6,7], k = 3&lt;/code&gt;

    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-2dedb&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-2dedb&#34;&gt;
        &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34; 
            src=&#34;images/239.png#center&#34; alt=&#34;alt image&#34; 
             /&gt;
    &lt;/label&gt;

We can see that at the first position we have &lt;strong&gt;max&lt;/strong&gt; value &lt;code&gt;3&lt;/code&gt;, which we add to our output array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode - 150 - Permutation in String</title>
      <link>http://localhost:1313/posts/leetcode-150-permutation-in-string/</link>
      <pubDate>Wed, 28 May 2025 07:53:36 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-permutation-in-string/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Given two strings &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s2&lt;/code&gt; contains a permutation of &lt;code&gt;s1&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A permutation is a rearrangement of all the characters of a string.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In other words, return &lt;code&gt;true&lt;/code&gt; if one of &lt;code&gt;s1&lt;/code&gt;’s permutations is a substring of &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: s1 = &amp;#34;ab&amp;#34;, s2 = &amp;#34;eidbaooo&amp;#34;
Output: true
Explanation: s2 contains one permutation of s1 (&amp;#34;ba&amp;#34;).
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: s1 = &amp;#34;ab&amp;#34;, s2 = &amp;#34;eidboaoo&amp;#34;
Output: false
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;constraints&#34;&gt;Constraints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= s1.length, s2.length &amp;lt;= 10^4&lt;/li&gt;
&lt;li&gt;s1 and s2 consist of lowercase English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explanation&#34;&gt;Explanation&lt;/h4&gt;
&lt;p&gt;Before we jump into the solution, let&amp;rsquo;s take a look at the example with input &lt;code&gt;s1 = &amp;quot;ab&amp;quot;, s2 = &amp;quot;eidbaooo&amp;quot;&lt;/code&gt;&lt;br&gt;

    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-7d24f&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-7d24f&#34;&gt;
        &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34; 
            src=&#34;images/567.png#center&#34; alt=&#34;alt image&#34; 
             /&gt;
    &lt;/label&gt;
&lt;br&gt;
We are looking for a permutation of &lt;code&gt;s1&lt;/code&gt; in &lt;code&gt;s2&lt;/code&gt; with the size of &lt;code&gt;s1&lt;/code&gt;.&lt;br&gt;
In the example, we can see that we have a permutation of &lt;code&gt;s1 = &amp;quot;ab&amp;quot;&lt;/code&gt; in &lt;code&gt;s2 = &amp;quot;eidbaooo&amp;quot;&lt;/code&gt; but in a different order.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode - 150 - Trapping Rain Water</title>
      <link>http://localhost:1313/posts/leetcode-150-trapping-rain-water/</link>
      <pubDate>Fri, 23 May 2025 07:18:50 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-trapping-rain-water/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.&lt;/p&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;p&gt;
    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-ed9e8&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-ed9e8&#34;&gt;
        &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34; 
            src=&#34;images/rainwatertrap.png#center&#34; alt=&#34;alt image&#34; 
             /&gt;
    &lt;/label&gt;
&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: height = [4,2,0,3,2,5]
Output: 9
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;constraints&#34;&gt;Constraints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;n == height.length&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 2 * 10^4&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= height[i] &amp;lt;= 10^5&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explanation&#34;&gt;Explanation&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s look at our example and determine the algorithm of how much water each position could trap.&lt;br&gt;

    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-ada9c&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-ada9c&#34;&gt;
        &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34; 
            src=&#34;images/42.png#center&#34; alt=&#34;alt image&#34; 
             /&gt;
    &lt;/label&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode - 150 - Two Sum II - Input Array Is Sorted</title>
      <link>http://localhost:1313/posts/leetcode-150-two-sum-ii-input-array-is-sorted/</link>
      <pubDate>Mon, 19 May 2025 07:17:39 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-two-sum-ii-input-array-is-sorted/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Given a 1-indexed array of integers &lt;code&gt;numbers&lt;/code&gt; that is already sorted in non-decreasing order, find two numbers such that they add up to a specific &lt;code&gt;target&lt;/code&gt; number. Let these two numbers be &lt;code&gt;numbers[index1]&lt;/code&gt; and &lt;code&gt;numbers[index2]&lt;/code&gt; where &lt;code&gt;1 &amp;lt;= index1 &amp;lt; index2 &amp;lt;= numbers.length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Return the indices of the two numbers, &lt;code&gt;index1&lt;/code&gt; and &lt;code&gt;index2&lt;/code&gt;, added by one as an integer array &lt;code&gt;[index1, index2]&lt;/code&gt; of length 2.&lt;/p&gt;
&lt;p&gt;The tests are generated such that there is exactly one solution. You may not use the same element twice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode - 150 - Valid Sudoku</title>
      <link>http://localhost:1313/posts/leetcode-150-valid-sudoku/</link>
      <pubDate>Fri, 16 May 2025 08:02:42 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-valid-sudoku/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Determine if a &lt;code&gt;9 x 9&lt;/code&gt; Sudoku board is valid. Only the filled cells need to be validated according to the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Each row must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;li&gt;Each column must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;li&gt;Each of the nine &lt;code&gt;3 x 3&lt;/code&gt; sub-boxes of the grid must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Sudoku board (partially filled) could be valid but is not necessarily solvable.&lt;/li&gt;
&lt;li&gt;Only the filled cells need to be validated according to the mentioned rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;p&gt;
    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-334fd&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-334fd&#34;&gt;
        &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34; 
            src=&#34;images/Sudoku-by-L2G-20050714.svg.png#center&#34; alt=&#34;alt image&#34; 
             /&gt;
    &lt;/label&gt;
&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
