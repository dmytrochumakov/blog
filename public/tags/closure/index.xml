<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Closure on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/closure/</link>
    <description>Recent content in Closure on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Dec 2023 00:00:00 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/closure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is closure in Swift language?</title>
      <link>http://localhost:1313/posts/what-is-closure-in-swift-language/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/what-is-closure-in-swift-language/</guid>
      <description>Introduction In this article, I’m going to briefly explain what closure is.
Closures is self-conitained blocks of funcionality that can be passed around and used in your code. — Apple
Expression:
{ (params) -&amp;gt; return value in statements } @escaping When closure is marked as escaping, it will outlive or leave the scope you passed.
func response(_ completionHandler: @escaping(Result) -&amp;gt; Void) { completionHandler(.success) } @nonescaping By default, closures are nonescaping, meaning closure will no longer exist in memory after complete execution in the scope you have passed it to.</description>
    </item>
  </channel>
</rss>
