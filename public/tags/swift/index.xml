<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Swift on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/swift/</link>
    <description>Recent content in Swift on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DispatchGroup in Swift</title>
      <link>http://localhost:1313/posts/post-13/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-13/</guid>
      <description>What is DispatchGroup? DispatchGroup provides a mechanism to track the completion group of tasks.
How DispatchGroup works? DispatchGroup has three main methods, enter, leave and notify, that allow you to control the completion of a specific task.
let dispatchGroup = DispatchGroup() dispatchGroup.enter() dispatchGroup.leave() dispatchGroup.notify(queue: .main) {} Let`s talk about each of these methods. enter — manually indicate a block has entered group. leave — manually indicate a block in the group has been completed.</description>
    </item>
    <item>
      <title>Concurrency in Swift</title>
      <link>http://localhost:1313/posts/post-12/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-12/</guid>
      <description>What is concurrency? The system can perform multiple tasks simultaneously. By tasks, I mean code or instructions. Modern computer chips have multiple cores that allow developers to create and run various tasks on multiple cores. Even if your chip has one core operating system it will provide context switching mechanism by enabling it to execute multiple tasks concurrently.
Material about processes, threads I will skip explaining concepts about processes and threads because it is a vast topic, and it will take a lot of time to explain it.</description>
    </item>
    <item>
      <title>What are value types in Swift?</title>
      <link>http://localhost:1313/posts/post-8/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-8/</guid>
      <description>What are value types? Value types play a central role in programming languages by grouping data values.
`Value type” is a type of data copied when assigned to a new variable.
struct Storage { var data: String = &amp;#34;some data&amp;#34; } let originalStorage = Storage() var copiedStorage = originalStorage // `originalStorage` is copied to `copiedStorage` How can you pass value types? You can pass value type by copying value.
struct Storage { var data: String = &amp;#34;some data&amp;#34; } let originalStorage = Storage() var copiedStorage = originalStorage // `originalStorage` is copied to `copiedStorage` copiedStorage.</description>
    </item>
    <item>
      <title>How to prevent memory leaks?</title>
      <link>http://localhost:1313/posts/post-9/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-9/</guid>
      <description>I was searching for tools that could help me find memory leaks faster and would be simple in implementation without affecting performance and memory size of application.
I found a fantastic fit for this task LifetimeTracker developed by Krzysztof Zabłocki.
All you need is to add LifetimeTracker package to the project, inherit from LifetimeTrackable protocol, and add two lines of code.
class Department: LifetimeTrackable {} trackLifetime method to init of instance that you are going to verify, and lifetimeConfiguration property where you set max number of valid instances.</description>
    </item>
    <item>
      <title>How to find memory leaks?</title>
      <link>http://localhost:1313/posts/post-10/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-10/</guid>
      <description>The common way to find memory leaks is by using Xcode Instruments. All you need is the following:
Open Xcode Instruments
Choose Leaks option Select Simulator where you are going to test your application Select your installed application When you finish preparation, you can start immediate recoding and check application for leaks. To do that, you need to open Simulator and try some cases that could cause memory leaks.
After you spend some time trying different scenarios, you can see that Instruments found Leaked Objects.</description>
    </item>
    <item>
      <title>ARC in Swift</title>
      <link>http://localhost:1313/posts/post-11/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-11/</guid>
      <description>What is ARC? Swift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed. - Apple
ARC In Action In this example, we assign an instance to the reference1 property.</description>
    </item>
    <item>
      <title>What is closure in Swift language?</title>
      <link>http://localhost:1313/posts/post-7/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-7/</guid>
      <description>Introduction In this article, I’m going to briefly explain what closure is.
Closures is self-conitained blocks of funcionality that can be passed around and used in your code. — Apple
Expression:
{ (params) -&amp;gt; return value in statements } @escaping When closure is marked as escaping, it will outlive or leave the scope you passed.
func response(_ completionHandler: @escaping(Result) -&amp;gt; Void) { completionHandler(.success) } @nonescaping By default, closures are nonescaping, meaning closure will no longer exist in memory after complete execution in the scope you have passed it to.</description>
    </item>
    <item>
      <title>What is “reference type” in Swift?</title>
      <link>http://localhost:1313/posts/post-5/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/post-5/</guid>
      <description>Introduction In Swift, classes, closures, and actors all reference types.
&amp;lsquo;Reference type’ is instance that shares a single copy of data.
Assigning a reference type to a constant or variable, or passing it into a function or method, it is always a reference to a shared instance that is assigned or passed in.
Example You can pass your property value by sharing the same address in memory.
// Reference type example class Storage { var data = “data-example” } var storage = Storage() print(&amp;#34;\(storage.</description>
    </item>
  </channel>
</rss>
