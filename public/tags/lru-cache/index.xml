<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LRU Cache on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/lru-cache/</link>
    <description>Recent content in LRU Cache on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Jul 2025 07:51:33 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/lru-cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode - 150 - LRU Cache</title>
      <link>http://localhost:1313/posts/leetcode-150-lru-cache/</link>
      <pubDate>Tue, 22 Jul 2025 07:51:33 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-150-lru-cache/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Design a data structure that follows the constraints of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU&#34;&gt;Least Recently Used (LRU) cache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Implement the &lt;code&gt;LRUCache&lt;/code&gt; class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LRUCache(int capacity)&lt;/code&gt; Initialize the LRU cache with positive size &lt;code&gt;capacity&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int get(int key)&lt;/code&gt; Return the value of the &lt;code&gt;key&lt;/code&gt; if the key exists, otherwise return &lt;code&gt;-1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void put(int key, int value)&lt;/code&gt; Update the value of the &lt;code&gt;key&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; exists. Otherwise, add the &lt;code&gt;key-value&lt;/code&gt; pair to the cache. If the number of keys exceeds the &lt;code&gt;capacity&lt;/code&gt; from this operation, evict the least recently used key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The functions &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; must each run in &lt;code&gt;O(1)&lt;/code&gt; average time complexity.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
