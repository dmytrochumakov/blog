<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Reverse Bits on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/reverse-bits/</link>
    <description>Recent content in Reverse Bits on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 May 2025 07:59:05 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/reverse-bits/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode - Blind 75 - Reverse Bits</title>
      <link>http://localhost:1313/posts/leetcode-blind-75-reverse-bits/</link>
      <pubDate>Sat, 10 May 2025 07:59:05 +0300</pubDate>
      <guid>http://localhost:1313/posts/leetcode-blind-75-reverse-bits/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Reverse bits of a given 32-bit unsigned integer.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer&amp;rsquo;s internal binary representation is the same, whether it is signed or unsigned.&lt;/li&gt;
&lt;li&gt;In Java, the compiler represents the signed integers using &lt;a href=&#34;https://en.wikipedia.org/wiki/Two%27s_complement&#34;&gt;2â€™s complement notation&lt;/a&gt;. Therefore, in Example 2 above, the input represents the signed integer &lt;code&gt;-3&lt;/code&gt; and the output represents the signed integer &lt;code&gt;-1073741825&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: n = 00000010100101000001111010011100  
Output:    964176192 (00111001011110000010100101000000)  
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192, whose binary representation is 00111001011110000010100101000000.
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: n = 11111111111111111111111111111101  
Output:   3221225471 (10111111111111111111111111111111)  
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471, whose binary representation is 10111111111111111111111111111111.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;constraints&#34;&gt;Constraints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The input must be a binary string of length &lt;code&gt;32&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow up: If this function is called many times, how would you optimize it?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
