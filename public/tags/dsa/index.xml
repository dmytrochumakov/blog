<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DSA on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/dsa/</link>
    <description>Recent content in DSA on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.123.3</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Aug 2024 07:00:23 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/dsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DSA - Two Pointers Technique</title>
      <link>http://localhost:1313/posts/dsa-two-pointers-technique/</link>
      <pubDate>Sat, 17 Aug 2024 07:00:23 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-two-pointers-technique/</guid>
      <description>What is the Two Pointers Technique? The two pointers technique helps track indices in a collection of elements to access objects in memory by index with O(1) space. This technique is very handy when you need to optimize the time and space of a solution.
What Problems Does It Solve? The two pointers technique solves problems involving collections. For example, it is useful when you need to compare each element to other elements in that collection.</description>
    </item>
    <item>
      <title>DSA - Merge Sorted Array Problem</title>
      <link>http://localhost:1313/posts/dsa-merge-sorted-array-problem/</link>
      <pubDate>Thu, 15 Aug 2024 07:04:16 +0300</pubDate>
      <guid>http://localhost:1313/posts/dsa-merge-sorted-array-problem/</guid>
      <description>Introduction In the previous chapter, we discussed Data Structures and Algorithms, delved into an overview of Dynamic Arrays, and solved the &amp;ldquo;Remove Element&amp;rdquo; problem.
In this article, I&amp;rsquo;m going to show one of the ways to solve the 88. Merge Sorted Array problem.
Problem You are given two integer arrays, nums1 and nums2, sorted in non-decreasing order, and two integers, m and n, representing the number of elements in nums1 and nums2, respectively.</description>
    </item>
    <item>
      <title>Data Structures and Algorithms Arrays Swift</title>
      <link>http://localhost:1313/posts/data-structures-and-algorithms-arrays-swift/</link>
      <pubDate>Mon, 12 Aug 2024 07:01:34 +0300</pubDate>
      <guid>http://localhost:1313/posts/data-structures-and-algorithms-arrays-swift/</guid>
      <description>Introduction I’ve always been curious about data structures and algorithms, and how they can improve user experiences while saving money for businesses through optimized computations.
In this series of articles, I’m going to solve LeetCode problems and share my approach with you.
I’ve just started my journey in solving LeetCode problems, so my solutions might not be as efficient as they could be, but I’m always looking for improvement.
Before each topic, I’ll provide a brief introduction to the data structure, algorithm, or technique I’ll be using to solve a specific problem.</description>
    </item>
  </channel>
</rss>
