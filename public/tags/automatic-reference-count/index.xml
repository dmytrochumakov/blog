<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Automatic Reference Count on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/automatic-reference-count/</link>
    <description>Recent content in Automatic Reference Count on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.134.3</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Dec 2023 00:00:00 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/automatic-reference-count/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARC in Swift</title>
      <link>http://localhost:1313/posts/arc-in-swift/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0300</pubDate>
      <guid>http://localhost:1313/posts/arc-in-swift/</guid>
      <description>&lt;h3 id=&#34;what-is-arc&#34;&gt;What is ARC?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed. - Apple&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;arc-in-action&#34;&gt;ARC In Action&lt;/h3&gt;
&lt;p&gt;In this example, we assign an instance to the &lt;code&gt;reference1&lt;/code&gt; property.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
