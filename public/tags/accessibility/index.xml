<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Accessibility on Dmytro&#39;s Blog</title>
    <link>http://localhost:1313/tags/accessibility/</link>
    <description>Recent content in Accessibility on Dmytro&#39;s Blog</description>
    <image>
      <title>Dmytro&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.123.3</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Jun 2024 09:04:06 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/accessibility/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Accessibility iOS SwiftUI</title>
      <link>http://localhost:1313/posts/accessibility-ios-swiftui/</link>
      <pubDate>Sun, 02 Jun 2024 09:04:06 +0300</pubDate>
      <guid>http://localhost:1313/posts/accessibility-ios-swiftui/</guid>
      <description>Introduction Previously, I posted about Accessibility for UIKit. The idea behind this post is to find differences between UIKit Accessibility and SwiftUI features.
Similarities: Both UIKit and SwiftUI have accessibilityLabel and accessibilityHints APIs.
Differences: To use dynamic type for fonts, you need additional modifiers in SwiftUI. struct ScaledFont: ViewModifier { @Environment(\.sizeCategory) var sizeCategory var name: String var size: Double func body(content: Content) -&amp;gt; some View { let scaledSize = UIFontMetrics.default.scaledValue(for: size) return content.</description>
    </item>
    <item>
      <title>Accessibility iOS UIKit</title>
      <link>http://localhost:1313/posts/accessibility-ios-uikit/</link>
      <pubDate>Thu, 30 May 2024 07:04:49 +0300</pubDate>
      <guid>http://localhost:1313/posts/accessibility-ios-uikit/</guid>
      <description>Introduction I was curious to find out how to make an application more accessible. You can look at popular applications like YouTube or Netflix; they all have accessibility features like VoiceOver and dynamic fonts. I decided to create this example for a fruit calorie counter. It contains a list of fruits with the fruit name, fruit calories, and a favorite button.
Where to Start Before diving into implementation details, I want to highlight some information about the existing accessibility features and what I will be focusing on.</description>
    </item>
  </channel>
</rss>
